{"version":3,"sources":["App/AlertView/AlertView.tsx","App/AutocompleteView/AutocompleteView.tsx","App/AutocompleteLocationView/AutocompleteLocationView.tsx","App/AutocompleteChipsView/AutocompleteChipsView.tsx","App/ButtonsView/ButtonsView.tsx","App/CheckboxesView/CheckboxesView.tsx","App/ChipView/ChipView.tsx","App/ChipsFieldView/ChipsFieldView.tsx","App/DatePickerView/DatePickerView.tsx","App/DialogsView/DialogsView.tsx","App/DrawersView/DrawersView.tsx","App/IconButtonView/IconButtonView.tsx","App/LinksView/LinksView.tsx","App/MultiSelectView/MultiSelectView.tsx","App/RadioView/RadioView.tsx","App/RadioGroupView/RadioGroupView.tsx","App/SpinnerView/SpinnerView.tsx","App/SplitButtonView/SplitButtonView.tsx","App/SelectView/SelectView.tsx","App/SkeletonView/SkeletonView.tsx","App/TimeInputView/TimeInputView.tsx","App/SwitchesView/SwitchesView.tsx","App/TextFieldsView/TextFieldsView.tsx","App/TextFieldsMultilineView/TextFieldsMultilineView.tsx","App/TableView/TableView.tsx","App/Pages/ComponentsPage.tsx","App/FormView/FormView.tsx","App/Pages/DemosPage.tsx","App/App.tsx","index.tsx","../../src/SFColors/SFColors.tsx","../../node_modules/icomoon-react/build/src/IcomoonReact/IcomoonReact.js","../../node_modules/icomoon-react/build/src/index.js","../../src/Components/SFIcon/SFIcon.tsx","../../src/Components/SFIconButton/SFIconButton.tsx","../../src/Helpers/index.ts","../../src/Components/SFAlert/SFAlert.tsx","../../src/Components/SFDialog/SFDialog.tsx","../../src/Components/SFButton/CustomButtons/ButtonMixin.tsx","../../src/Components/SFButton/CustomButtons/BlueButton.tsx","../../src/Components/SFButton/CustomButtons/RedButton.tsx","../../src/Components/SFButton/CustomButtons/GreyButton.tsx","../../src/Components/SFButton/SFButton.tsx","../../src/Components/SFAlertDialog/SFAlertDialog.tsx","../../src/Components/SFTextField/SFTextField.tsx","../../src/Components/SFAutocomplete/SFAutocomplete.tsx","../../src/Components/SFAutocompleteLocation/SFAutocompleteLocation.tsx","../../src/Components/SFSpinner/SFSpinner.tsx","../../src/Components/SFBadge/SFBadge.tsx","../../src/Components/SFPaper/SFPaper.tsx","../../src/Components/SFChip/SFChip.tsx","../../src/Components/SFCard/SFCard.tsx","../../src/Components/SFChipsListField/SFChipFieldModal/SFChipFieldModal.tsx","../../src/Components/SFChipsListField/SFChipFieldRender/SFChipFieldRender.tsx","../../src/Components/SFChipsListField/SFChipsListField.tsx","../../src/Components/SFFormControlBooleanLabel/SFFormControlBooleanLabel.tsx","../../src/Components/SFCheckbox/SFCheckbox.tsx","../../src/Components/SFDatePicker/SFDatePicker.tsx","../../src/Components/SFDrawer/SFDrawer.tsx","../../src/Components/SFLink/SFLink.tsx","../../src/Components/SFMenuItem/SFMenuItem.tsx","../../src/Components/SFMultiSelect/SFMultiSelect.tsx","../../src/Components/SFNumericField/SFNumericField.tsx","../../src/Components/SFPanel/SFPanel.tsx","../../src/Components/SFRadioGroup/SFRadio/SFRadio.tsx","../../src/Components/SFRadioGroup/SFRadioGroup.tsx","../../src/Components/SFScrollable/SFScrollable.tsx","../../src/Components/SFSelect/SFSelect.tsx","../../src/Components/SFSkeleton/SFSkeleton.tsx","../../src/Components/SFSplitButton/SFSplitButton.tsx","../../src/Components/SFSwitch/SFSwitch.tsx","../../src/Components/SFTable/SFTable.tsx","../../src/Components/SFTimeField/SFTimeField.tsx","../../src/Components/SFTootltip/SFTooltip.tsx","../../src/Components/SFTimeline/SFTimeline.tsx","../../src/SFTheme/CommonThemeOptions.tsx","../../src/SFTheme/NightTheme.tsx","../../src/SFTheme/DayTheme.tsx","../../src/SFHttpStatusCode/SFHttpStatusCode.ts","../../src/SFMedia/SFMedia.ts","../../src/SFTheme/SFTheme.tsx"],"names":["SFAlertView","style","display","flexDirection","gap","type","title","margin","SFAutocompleteView","React","useState","autocompleteValue","setAutocompleteValue","autocompleteValue1","setAutocompleteValue1","autocompleteValue2","setAutocompleteValue2","className","label","options","value","onChange","disabled","SFAutoCompleteLocationView","text","autcompleteValue","autcompleteValue1","autcompleteValue2","SFAutocompleteChipsView","ChipsListOptions","chipFieldValue","setChipFieldValue","isNew","chipFieldValue1","setChipFieldValue1","chipFieldValue2","setChipFieldValue2","chipFieldValue3","setChipFieldValue3","items","chipDisplay","renderButtonsColumn","size","sfColor","textTransform","variant","SFButtonsView","SFCheckboxesView","checked","SFChipsView","deleteable","onDelete","console","log","SFChipsFieldView","SFDatePickerView","undefined","firstPickerDate","setFirstPickerDate","Date","now","secondPickerDate","setSecondPickerDate","thirdPickerDate","setThirdPickerDate","fourthPickerDate","setFourthPickerDate","fifthPickerDate","setFifthPickerDate","dateLabel","helperText","error","SFDialogsView","setDisabled","alertTextOpen","setAlertTextOpen","alertFormOpen","setAlertFormOpen","onClick","leftAction","buttonProps","rightAction","content","open","marginTop","placeholder","event","target","length","SFDrawersView","drawerTextOpen","setDrawerTextOpen","drawerInputOpen","setDrawerInputOpen","drawerText","anchor","onClose","SFIconButtonView","sfIcon","sfSize","SFLinksView","alignItems","color","SFMultiSelectView","SFRadioView","SFRadioGroupView","defaultValue","SFSpinnerView","SFSplitButtonView","splitButtonOptions","defaultSelected","SFSelectView","selectValue","setSelectValue","selectValue1","setSelectValue1","selectValue2","setSelectValue2","selectValue3","setSelectValue3","selectValue4","setSelectValue4","SFSkeletonView","height","width","SFTimeFieldView","toISOString","SFSwitchesView","SFTextFieldsView","SFTextFieldsMultilineView","innerText","multiline","SFTableView","columns","field","data","one","two","three","four","five","six","search","toolbar","selection","paging","ComponentsPage","FormView","initialData","date","streetAdress","incidentNumber","incidentTime","description","injured","propertyDamage","witnessess","supervisor","officers","incidentEvents","placeOfOcurrence","incidentTests","policeDepartment","response","setResponse","formData","setFormData","openResponsePanel","setOpenResponsePanel","isLoading","setIsLoading","isSent","setIsSent","useEffect","setTimeout","name","row","autoComplete","href","PaperProps","maxWidth","fullWidth","Object","keys","JSON","stringify","DemosPage","setThemeType","theme","localStorage","setItem","App","prefersDarkMode","useSFMediaQuery","nightMode","setNightMode","showDemo","setShowDemo","switchLabel","createSFTheme","getLocalStorageThemeType","getItem","injectFirst","backgroundColor","palette","background","default","primary","main","ReactDOM","render","document","getElementById","SFBlue","SFRed","SFGrey","A100","A200","A400","A700","50","100","200","300","400","500","600","700","800","900","SFGreen","SFBlueMainLight","SFBlueMainDark","SFRedMainLight","SFRedMainDark","SFSurfaceLight","SFSurfaceDark","SFTextWhite","SFCommonWhite","SFCommonBlack","__assign","this","assign","t","s","i","n","arguments","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__importDefault","mod","__esModule","defineProperty","exports","iconList","react_1","require$$0","iconSet","list","icons","forEach","icon","push","properties","split","props","_a","_b","_c","rest","styles","iconObj","currentIcon","find","iconEl","includes","createElement","svg","viewBox","xmlns","paths","map","path","index","attrs","key","d","warn","getSvg","verticalAlign","fill","IcomoonReact","displayName","IcomoonReact_2","IcomoonReact_1","enumerable","get","getRotationDeg","rotation","SFIcon","forwardRef","rotate","colorDefault","useTheme","customStyle","transform","IconSet","ref","StyledIconButton","root","SFIconButton","isThemeLight","disabledColor","colorPicked","iconButtonInnerProps","result","getIconButtonInnerProps","disableRipple","padding","hexToRgba","hex","opacity","exec","parseInt","StyledAlert","action","message","fontWeight","fontSize","lineHeight","flexGrow","standardError","standardInfo","standardSuccess","standardWarning","SFAlert","children","getIcon","severity","SFDialogTitle","fontStyle","SFDialogContent","SFDialogContentText","SFDialogActions","StyledDialog","SFDialog","disableBackdropClick","transitionDuration","reason","ButtonMixin","sfButtonConfig","backgroundColorHover","backgroundColorActive","outlined","borderColor","border","BlueButton","contained","light","backgroundColorDisabled","dark","colorHover","colorActive","borderColorHover","borderColorActive","RedButton","GreyButton","spinnerSizes","small","medium","large","SFButton","ButtonInnerProps","getButtonInnerProps","ButtonInnerStyle","ButtonComponent","grey","blue","red","disableElevation","SFAlertDialog","StyledTextField","boxSizing","borderRadius","transition","SFTextField","rows","StyledAutocomplete","inputRoot","paddingTop","right","endAdornment","listbox","option","useStyles","makeStyles","SFAutocomplete","required","hasPopupIcon","allowEmpty","classes","isOpen","setIsOpen","initInputValue","isOption","inputValue","setInputValue","openOnFocus","onInputChange","onOpen","getOptionSelected","getOptionLabel","renderInput","params","popupIcon","closeIcon","popupIndicator","clearIndicator","menu","gridTemplateColumns","itemText","textHighlight","itemSecondaryText","SFAutocompleteLocation","currentLocation","currentLocationType","autocompleteService","geocoderService","apiLoaded","setApiLoaded","selectedOption","setSelectedOption","setOptions","getPredictions","throttle","fetchOptions","input","results","window","navigator","google","pos","latlng","lat","lng","longitude","location","status","locationType","place_id","placeId","freeSolo","newValue","renderOption","matches","parts","parse","match","part","SFSpinner","minWidth","badge","boxShadow","StyledPaper","SFPaper","elevation","StyledChip","position","justifyContent","labelSmall","SFChip","hasError","deleteIcon","SFChipListModal","isValid","onEdit","editedValue","setEditedValue","hasChanged","SFChipListRender","values","isChipFullWidth","chipSize","clickable","StyledAutoComplete","paper","marginLeft","marginRight","minHeight","chipsDisplay","chipDisplayInline","flexWrap","chipDisplayBlock","SFChipsListField","emptyMessage","delimiters","isEditable","inputType","isPopperOpen","setIsPopperOpen","isModalOpen","setIsModalOpen","isFreeSolo","savedValues","item","inputValues","createNewValue","addValue","deleteValue","getValuesFromInputField","separatorRegExp","RegExp","Array","Set","getValueFromOptions","isValueAlreadyAdded","previousInput","filteredOptions","multiple","lastItem","currentValues","valueTrim","matchValueOption","nativeEvent","_event","insertedValues","valuesToAdd","insertedValue","valueOption","filterSelectedOptions","renderTags","StyledFromControlLabel","SFFormControlBooleanLabel","StyledCheckbox","colorPrimary","SFCheckbox","iconCheckedColor","getIconCheckedColor","iconUncheckedColor","getIconUncheckedColor","control","checkedIcon","useButtonBackgrounds","createStyles","usePopOverStyle","StyledDatePicker","paddingRight","SFDatePicker","popOverStyle","arrowStyle","openCalendarStyle","setOpenCalendarStyle","utils","MomentUtils","disableToolbar","inputVariant","format","PopoverProps","anchorOrigin","vertical","horizontal","transformOrigin","rightArrowButtonProps","rightArrowIcon","leftArrowButtonProps","leftArrowIcon","keyboardIcon","StyledDrawer","SFDrawer","StyledLink","cursor","getSizeStyle","SFLink","SFMenuItem","StyledSelect","pointerEvents","top","StyledMenuItem","useMenuStyles","SFMultiSelect","selected","setSelected","menuClasses","isChecked","selectedValues","select","SelectProps","MenuProps","autoFocus","disableAutoFocusItem","renderValue","IconComponent","NumberFormatCustom","inputRef","allowDecimals","other","inputMode","decimalScale","pattern","getInputRef","onValueChange","SFNumericField","numberFormatProps","inputProps","InputProps","inputComponent","actions","SFPanel","StyledRadio","SFRadio","isGroup","StyledRadioGroup","SFRadioGroup","opt","withHorizontalScroll","paddingBottom","container","overflow","scrollbarWidth","msOverflowStyle","vScrollBar","bottom","vScrollThumb","hScrollBar","left","hScrollThumb","hasScrollVertical","elem","hasScrollHorizontal","SFScrollable","containerClassName","onScroll","scrollHostRef","scrollToTop","hasHorizontalScroll","setHasHorizontalScroll","verticalScrollHeight","setVerticalScrollHeight","horizontalScrollWidth","setHorizontalScrollWidth","verticalScrollTop","setVerticalScrollTop","horizontalScrollLeft","setHorizontalScrollLeft","showVerticalScroll","setShowVerticalScroll","showHorizontalScroll","setShowHorizontalScroll","isVerticalDragging","setIsVerticalDragging","isHorizontalDragging","setIsHorizontalDragging","lastVerticalPos","setLastVerticalPos","lastHorizontalPos","setLastHorizontalPos","updateScrollbar","clientHeight","clientWidth","scrollHeight","scrollWidth","scrollThumbWidth","Math","scrollThumbHeight","resizeObserver","ResizeObserver","onDocumentMouseMove","offsetHeight","offsetTop","deltaY","percentage","offsetWidth","deltaX","verticalScroll","horizontalScroll","host","current","onDocumentMouseUp","onMouseOver","onMouseOut","onTouchStart","onTouchEnd","scrollTop","scrollLeft","newTop","newLeft","onMouseDown","SFSelect","SFSkeleton","iconButton","isLight","StyledButtonGroup","grouped","groupedContainedHorizontal","borderRight","SFSplitButton","isMenuOpen","setIsMenuOpen","selectedItemIndex","setSelectedItemIndex","refMenu","zIndex","anchorEl","placement","disablePortal","onClickAway","id","onMenuItemClick","StyledSwitch","switchBase","thumb","track","SFSwitch","disableTouchRipple","disableFocusRipple","StyledRow","StyledContainer","useSelectionStyles","colorSecondary","iconSize","tableIcons","Add","Check","Clear","Delete","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","defaultOptions","sorting","showTitle","draggable","SFTable","selectionProps","customColumns","cellStyle","borderBottom","customOptions","headerStyle","rowStyle","rowData","headerSelectionProps","indeterminate","components","Container","Row","StyledTimePicker","SFTimeField","mask","getBackgroundColor","marginBottom","borderLeft","subtitle","isSelected","CommonThemeOptions","tooltip","arrow","getTitleColor","getContentColor","MuiButtonBase","MuiDrawer","shape","overrides","MuiFormControlLabel","MuiIconButton","MuiButton","MuiPaper","elevation1","elevation2","elevation3","elevation4","elevation6","elevation8","elevation9","elevation12","elevation16","elevation24","secondary","active","activatedOpacity","hover","hoverOpacity","selectedOpacity","disabledBackground","disabledOpacity","focus","focusOpacity","NightTheme","createMuiTheme","DayTheme","HttpStatusCode","SFMedia"],"mappings":"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","file":"static/js/main.6c6a931a.chunk.js","sourcesContent":["import React from 'react';\n\nimport { SFAlert } from 'sfui';\n\nexport const SFAlertView = (): JSX.Element => {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>\n      <SFAlert type='error' title='Lorem ipsum dolor sit amet.'>\n        <p style={{ margin: '0px' }}>\n          Lorem ipsum dolor sit amet, consect adipiscing elit.\n        </p>\n      </SFAlert>\n      <SFAlert type='warning' title='Lorem ipsum dolor sit amet.'>\n        <p style={{ margin: '0px' }}>\n          Lorem ipsum dolor sit amet, consect adipiscing elit.\n        </p>\n      </SFAlert>\n      <SFAlert type='info' title='Lorem ipsum dolor sit amet.'>\n        <p style={{ margin: '0px' }}>\n          Lorem ipsum dolor sit amet, consect adipiscing elit.\n        </p>\n      </SFAlert>\n      <SFAlert type='success' title='Lorem ipsum dolor sit amet.'>\n        <p style={{ margin: '0px' }}>\n          Lorem ipsum dolor sit amet, consect adipiscing elit.\n        </p>\n      </SFAlert>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFAutocomplete, SFMenuOption } from 'sfui';\n\nexport const SFAutocompleteView = (): JSX.Element => {\n  const getOptions = (): SFMenuOption[] => {\n    return [\n      {\n        label: 'Bagel number one',\n        value: 'Bagel number one'\n      },\n      {\n        label: 'Bagel number two',\n        value: 'Bagel number two'\n      },\n      {\n        label: 'Bagel number three',\n        value: 'Bagel number three'\n      }\n    ];\n  };\n\n  const [autocompleteValue, setAutocompleteValue] = React.useState<string>('');\n  const [autocompleteValue1, setAutocompleteValue1] = React.useState<string>(\n    getOptions()[1].value\n  );\n  const [autocompleteValue2, setAutocompleteValue2] = React.useState<string>(\n    getOptions()[1].value\n  );\n\n  return (\n    <div className='column'>\n      <SFAutocomplete\n        label='Bagel'\n        options={getOptions()}\n        value={autocompleteValue}\n        onChange={(value: string): void => setAutocompleteValue(value)}\n      />\n      <SFAutocomplete\n        label='Bagel'\n        value={autocompleteValue1}\n        options={getOptions()}\n        onChange={(value: string): void => setAutocompleteValue1(value)}\n      />\n      <SFAutocomplete\n        label='Bagel'\n        disabled\n        value={autocompleteValue2}\n        options={getOptions()}\n        onChange={(value: string): void => setAutocompleteValue2(value)}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFAutocompleteLocation, SFAutocompleteLocationResult } from 'sfui';\n\nexport const SFAutoCompleteLocationView = (): JSX.Element => {\n  const [\n    autcompleteValue,\n    setAutocompleteValue\n  ] = React.useState<SFAutocompleteLocationResult>({\n    text: ''\n  });\n  const [\n    autcompleteValue1,\n    setAutocompleteValue1\n  ] = React.useState<SFAutocompleteLocationResult>({\n    text:\n      '6400 S. Fiddlers Green Circle, Suite 250, Greenwood Village, CO 80111'\n  });\n  const [\n    autcompleteValue2,\n    setAutocompleteValue2\n  ] = React.useState<SFAutocompleteLocationResult>({\n    text:\n      '6400 S. Fiddlers Green Circle, Suite 250, Greenwood Village, CO 80111'\n  });\n  return (\n    <div className='column'>\n      <SFAutocompleteLocation\n        label='Bagel'\n        value={autcompleteValue}\n        onChange={(value: SFAutocompleteLocationResult): void =>\n          setAutocompleteValue(value)\n        }\n      />\n      <SFAutocompleteLocation\n        label='Bagel'\n        value={autcompleteValue1}\n        onChange={(value: SFAutocompleteLocationResult): void =>\n          setAutocompleteValue1(value)\n        }\n      />\n      <SFAutocompleteLocation\n        label='Bagel'\n        value={autcompleteValue2}\n        disabled\n        onChange={(value: SFAutocompleteLocationResult): void =>\n          setAutocompleteValue2(value)\n        }\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFChipsListField, ChipFieldValueType } from 'sfui';\n\nexport const SFAutocompleteChipsView = (): JSX.Element => {\n  const ChipsListOptions: string[] = [\n    'Bagel1',\n    'Bagel2',\n    'Bagel3',\n    'Bagel4',\n    'Bagel5',\n    'Bagel6',\n    'Bagel7',\n    'Bagel8',\n    'Bagel9',\n    'Bagel10',\n    'Bagel11',\n    'Bagel12'\n  ];\n\n  const [chipFieldValue, setChipFieldValue] = React.useState<\n    ChipFieldValueType[]\n  >();\n  const [chipFieldValue1, setChipFieldValue1] = React.useState<\n    ChipFieldValueType[]\n  >([{ value: 'Bagel1', isNew: true }]);\n  const [chipFieldValue2, setChipFieldValue2] = React.useState<\n    ChipFieldValueType[]\n  >([{ value: 'Bagel1', isNew: true }]);\n  const [chipFieldValue3, setChipFieldValue3] = React.useState<\n    ChipFieldValueType[]\n  >([\n    { value: 'Bagel1', isNew: true },\n    { value: 'Bagel2', isNew: true },\n    { value: 'Bagel3', isNew: true },\n    { value: 'Bagel4', isNew: true },\n    { value: 'Bagel5', isNew: true },\n    { value: 'Bagel6', isNew: true },\n    { value: 'Bagel7' },\n    { value: 'Bagel8' },\n    { value: 'Bagel9' },\n    { value: 'Bagel10' },\n    { value: 'Bagel11' },\n    { value: 'Bagel12' }\n  ]);\n\n  return (\n    <div className='column'>\n      <SFChipsListField\n        items={chipFieldValue}\n        label='Bagel'\n        options={ChipsListOptions}\n        chipDisplay='block'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue(value)\n        }\n      />\n      <SFChipsListField\n        items={chipFieldValue1}\n        label='Bagel'\n        options={ChipsListOptions}\n        chipDisplay='block'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue1(value)\n        }\n      />\n      <SFChipsListField\n        items={chipFieldValue2}\n        label='Bagel'\n        disabled\n        options={ChipsListOptions}\n        chipDisplay='block'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue2(value)\n        }\n      />\n      <SFChipsListField\n        items={chipFieldValue3}\n        label='Bagel'\n        options={ChipsListOptions}\n        chipDisplay='block'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue3(value)\n        }\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFButton } from 'sfui';\n\nconst renderButtonsColumn = (\n  size: 'small' | 'medium' | 'large' | undefined\n): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFButton sfColor='blue' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='blue' variant='outlined' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='blue' variant='text' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n      </div>\n\n      <div className='row'>\n        <SFButton sfColor='grey' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='grey' variant='outlined' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='grey' variant='text' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n      </div>\n      <div className='row'>\n        <SFButton sfColor='red' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='red' variant='outlined' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='red' variant='text' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n      </div>\n      <div className='row'>\n        <SFButton sfColor='blue' disabled size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='blue' variant='outlined' disabled size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='blue' variant='text' disabled size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n      </div>\n    </div>\n  );\n};\n\nconst SFButtonsView = (): JSX.Element => {\n  return (\n    <div className='row spaced'>\n      {renderButtonsColumn('small')}\n      {renderButtonsColumn('medium')}\n      {renderButtonsColumn('large')}\n    </div>\n  );\n};\n\nexport { SFButtonsView };\n","import React from 'react';\nimport { SFCheckbox } from 'sfui';\n\nconst SFCheckboxesView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFCheckbox />\n        <SFCheckbox label='Bagel' />\n      </div>\n      <div className='row'>\n        <SFCheckbox disabled />\n        <SFCheckbox label='Bagel' disabled />\n      </div>\n      <div className='row'>\n        <SFCheckbox checked />\n        <SFCheckbox label='Bagel' checked />\n      </div>\n      <div className='row'>\n        <SFCheckbox checked disabled />\n        <SFCheckbox label='Bagel' checked disabled />\n      </div>\n    </div>\n  );\n};\n\nexport { SFCheckboxesView };\n","import React from 'react';\n\nimport { SFChip } from 'sfui';\n\nexport const SFChipsView = (): JSX.Element => {\n  return (\n    <div className='row spaced'>\n      <div className='column'>\n        <div className='row'>\n          <SFChip label='Small' size='small' sfColor='primary' />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='primary'\n            variant='outlined'\n          />\n        </div>\n        <div className='row'>\n          <SFChip label='Small' size='small' sfColor='primary' disabled />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='primary'\n            disabled\n            variant='outlined'\n          />\n        </div>\n        <div className='row'>\n          <SFChip label='Small' size='small' sfColor='default' />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='default'\n            variant='outlined'\n          />\n        </div>\n        <div className='row'>\n          <SFChip label='Small' size='small' sfColor='default' disabled />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='default'\n            disabled\n            variant='outlined'\n          />\n        </div>\n      </div>\n      <div className='column'>\n        <div className='row'>\n          <SFChip label='Medium' sfColor='primary' />\n          <SFChip label='Medium' sfColor='primary' variant='outlined' />\n        </div>\n        <div className='row'>\n          <SFChip label='Medium' sfColor='primary' disabled />\n          <SFChip\n            label='Medium'\n            sfColor='primary'\n            disabled\n            variant='outlined'\n          />\n        </div>\n        <div className='row'>\n          <SFChip label='Medium' sfColor='default' />\n          <SFChip label='Medium' sfColor='default' variant='outlined' />\n        </div>\n        <div className='row'>\n          <SFChip label='Medium' sfColor='default' disabled />\n          <SFChip\n            label='Medium'\n            sfColor='default'\n            disabled\n            variant='outlined'\n          />\n        </div>\n      </div>\n      <div className='column'>\n        <div className='row'>\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='primary'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='primary'\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n        <div className='row'>\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='primary'\n            disabled\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='primary'\n            disabled\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n        <div className='row'>\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='default'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='default'\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n        <div className='row'>\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='default'\n            disabled\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='default'\n            disabled\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n      </div>\n      <div className='column'>\n        <div className='row'>\n          <SFChip\n            label='Medium'\n            sfColor='primary'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Medium'\n            sfColor='primary'\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n        <div className='row'>\n          <SFChip\n            label='Medium'\n            sfColor='primary'\n            disabled\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Medium'\n            sfColor='primary'\n            disabled\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n        <div className='row'>\n          {' '}\n          <SFChip\n            label='Medium'\n            sfColor='default'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Medium'\n            sfColor='default'\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n        <div className='row'>\n          <SFChip\n            label='Medium'\n            sfColor='default'\n            disabled\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Medium'\n            sfColor='default'\n            disabled\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFChipsListField, ChipFieldValueType } from 'sfui';\n\nexport const SFChipsFieldView = (): JSX.Element => {\n  const [chipFieldValue, setChipFieldValue] = React.useState<\n    ChipFieldValueType[]\n  >();\n  const [chipFieldValue1, setChipFieldValue1] = React.useState<\n    ChipFieldValueType[]\n  >([{ value: 'Bagel1', isNew: true }]);\n  const [chipFieldValue2, setChipFieldValue2] = React.useState<\n    ChipFieldValueType[]\n  >([{ value: 'Bagel1', isNew: true }]);\n  const [chipFieldValue3, setChipFieldValue3] = React.useState<\n    ChipFieldValueType[]\n  >([\n    { value: 'Bagel1', isNew: true },\n    { value: 'Bagel2', isNew: true },\n    { value: 'Bagel3', isNew: true },\n    { value: 'Bagel4', isNew: true },\n    { value: 'Bagel5', isNew: true },\n    { value: 'Bagel6', isNew: true },\n    { value: 'Bagel7' },\n    { value: 'Bagel8' },\n    { value: 'Bagel9' },\n    { value: 'Bagel10' },\n    { value: 'Bagel11' },\n    { value: 'Bagel12' }\n  ]);\n\n  return (\n    <div className='column'>\n      <SFChipsListField\n        items={chipFieldValue}\n        label='Bagel'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue(value)\n        }\n      />\n      <SFChipsListField\n        items={chipFieldValue1}\n        label='Bagel'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue1(value)\n        }\n      />\n      <SFChipsListField\n        items={chipFieldValue2}\n        label='Bagel'\n        disabled\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue2(value)\n        }\n      />\n      <SFChipsListField\n        items={chipFieldValue3}\n        label='Bagel'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue3(value)\n        }\n      />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { SFDatePicker } from 'sfui';\n\nconst SFDatePickerView = (): JSX.Element => {\n  const [firstPickerDate, setFirstPickerDate] = useState(undefined);\n  const [secondPickerDate, setSecondPickerDate] = useState(Date.now());\n  const [thirdPickerDate, setThirdPickerDate] = useState(Date.now());\n  const [fourthPickerDate, setFourthPickerDate] = useState(Date.now());\n  const [fifthPickerDate, setFifthPickerDate] = useState(Date.now());\n  const dateLabel = 'mm/dd/yyyy';\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFDatePicker\n          label={dateLabel}\n          onChange={(value): void => setFirstPickerDate(value)}\n          value={firstPickerDate}\n        />\n      </div>\n      <div className='row'>\n        <SFDatePicker\n          label={dateLabel}\n          onChange={(value): void => setSecondPickerDate(value)}\n          value={secondPickerDate}\n        />\n      </div>\n      <div className='row'>\n        <SFDatePicker\n          label={dateLabel}\n          onChange={(value): void => setThirdPickerDate(value)}\n          value={thirdPickerDate}\n          disabled\n        />\n      </div>\n      <div className='row'>\n        <SFDatePicker\n          label={dateLabel}\n          onChange={(value): void => setFourthPickerDate(value)}\n          helperText='Error message'\n          value={fourthPickerDate}\n          error\n        />\n      </div>\n      <div className='row'>\n        <SFDatePicker\n          label={dateLabel}\n          value={fifthPickerDate}\n          onChange={(value): void => setFifthPickerDate(value)}\n          helperText='Helper message'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { SFDatePickerView };\n","import * as React from 'react';\n\nimport { SFAlertDialog, SFTextField, SFButton } from 'sfui';\n\nconst SFDialogsView = (): JSX.Element => {\n  const [disabled, setDisabled] = React.useState<boolean>(true);\n  const [alertTextOpen, setAlertTextOpen] = React.useState<boolean>(false);\n  const [alertFormOpen, setAlertFormOpen] = React.useState<boolean>(false);\n\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFButton\n          sfColor='blue'\n          onClick={(): void => setAlertTextOpen(!alertTextOpen)}\n        >\n          Open Alert\n        </SFButton>\n      </div>\n      <div className='row'>\n        <SFButton\n          sfColor='red'\n          onClick={(): void => {\n            setAlertFormOpen(!alertFormOpen);\n          }}\n        >\n          Open Alert Form\n        </SFButton>\n      </div>\n      <SFAlertDialog\n        leftAction={{\n          label: 'Medium',\n          buttonProps: { onClick: (): void => setAlertTextOpen(!alertTextOpen) }\n        }}\n        rightAction={{\n          label: 'Medium',\n          buttonProps: { onClick: (): void => setAlertTextOpen(!alertTextOpen) }\n        }}\n        title='Alert dialog title'\n        content={`Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n      Mauris lobortis a erat eu mattis.`}\n        open={alertTextOpen}\n      />\n      <SFAlertDialog\n        content={`Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n    Mauris lobortis a erat eu mattis.`}\n        open={alertFormOpen}\n        title='Form dialog title'\n        leftAction={{\n          label: 'Medium',\n          buttonProps: { onClick: (): void => setAlertFormOpen(!alertFormOpen) }\n        }}\n        rightAction={{ label: 'Medium', buttonProps: { disabled } }}\n      >\n        <SFTextField\n          style={{ marginTop: 20 }}\n          label='Bagel'\n          placeholder='Please write something to enable button'\n          onChange={(event: React.ChangeEvent<HTMLInputElement>): void =>\n            setDisabled(event.target.value.length === 0)\n          }\n        />\n      </SFAlertDialog>\n    </div>\n  );\n};\n\nexport { SFDialogsView };\n","import React, { useState } from 'react';\n\nimport { SFButton, SFPanel, SFTextField } from 'sfui';\n\nexport const SFDrawersView = (): JSX.Element => {\n  const [drawerTextOpen, setDrawerTextOpen] = useState<boolean>(false);\n  const [drawerInputOpen, setDrawerInputOpen] = useState<boolean>(false);\n  const drawerText =\n    'Lorem ipsum dolor sit amet consectetur adipisicing elit. Amet doloribus eius asperiores incidunt voluptates.';\n\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFButton\n          sfColor='blue'\n          onClick={(): void => setDrawerTextOpen(!drawerTextOpen)}\n        >\n          Open Panel\n        </SFButton>\n      </div>\n      <div className='row'>\n        <SFButton\n          sfColor='red'\n          onClick={(): void => setDrawerInputOpen(!drawerInputOpen)}\n        >\n          Open Custom Drawer\n        </SFButton>\n      </div>\n\n      <SFPanel\n        open={drawerTextOpen}\n        anchor='right'\n        title='Drawer Title'\n        rightAction={{\n          label: 'Medium',\n          buttonProps: {\n            onClick: (): void => setDrawerTextOpen(!drawerTextOpen)\n          }\n        }}\n        leftAction={{\n          label: 'Medium',\n          buttonProps: {\n            onClick: (): void => setDrawerTextOpen(!drawerTextOpen)\n          }\n        }}\n        onClose={(): void => setDrawerTextOpen(!drawerTextOpen)}\n      >\n        <p>\n          {drawerText}\n          <br />\n          {drawerText}\n          <br />\n          {drawerText}\n          <br />\n          {drawerText}\n        </p>\n      </SFPanel>\n      <SFPanel\n        open={drawerInputOpen}\n        anchor='right'\n        title='Drawer title'\n        leftAction={{\n          label: 'Medium',\n          buttonProps: {\n            onClick: (): void => setDrawerInputOpen(!drawerInputOpen)\n          }\n        }}\n        rightAction={{\n          label: 'Medium',\n          buttonProps: {\n            onClick: (): void => setDrawerInputOpen(!drawerInputOpen)\n          }\n        }}\n        onClose={(): void => setDrawerInputOpen(!drawerInputOpen)}\n      >\n        <p>{drawerText}</p>\n        <SFTextField style={{ marginTop: 24 }} label='Bagel' />\n        <SFTextField style={{ marginTop: 12 }} label='Bagel' />\n        <SFTextField style={{ marginTop: 12 }} label='Bagel' />\n        <SFTextField style={{ marginTop: 12 }} label='Bagel' />\n      </SFPanel>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFIconButton } from 'sfui';\n\nconst SFIconButtonView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row align-baseline'>\n        <SFIconButton sfIcon='Callendar' sfSize='tiny' />\n        <SFIconButton sfIcon='Callendar' sfSize='small' />\n        <SFIconButton sfIcon='Callendar' sfSize='medium' />\n        <SFIconButton sfIcon='Callendar' sfSize='large' />\n      </div>\n      <div className='row align-baseline'>\n        <SFIconButton sfIcon='Callendar' sfSize='tiny' disabled />\n        <SFIconButton sfIcon='Callendar' sfSize='small' disabled />\n        <SFIconButton sfIcon='Callendar' sfSize='medium' disabled />\n        <SFIconButton sfIcon='Callendar' sfSize='large' disabled />\n      </div>\n    </div>\n  );\n};\nexport { SFIconButtonView };\n","import React from 'react';\nimport { SFLink } from 'sfui';\n\nconst SFLinksView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row  no-space' style={{ alignItems: 'flex-end' }}>\n        <SFLink sfSize='medium' color='primary'>\n          I am a link example\n        </SFLink>\n        <SFLink sfSize='small' color='primary'>\n          I am a link example\n        </SFLink>\n      </div>\n      <div className='row  no-space' style={{ alignItems: 'flex-end' }}>\n        <SFLink sfSize='medium'>I am a link example</SFLink>\n        <SFLink sfSize='small'>I am a link example</SFLink>\n      </div>\n    </div>\n  );\n};\nexport { SFLinksView };\n","import React from 'react';\nimport { SFMultiSelect, SFMenuOption } from 'sfui';\nconst getOptions = (): SFMenuOption[] => {\n  return [\n    {\n      label: 'Bagel number one',\n      value: 'Bagel number one'\n    },\n    {\n      label: 'Bagel number two',\n      value: 'Bagel number two'\n    },\n    {\n      label: 'Bagel number three',\n      value: 'Bagel number three'\n    }\n  ];\n};\n\nconst SFMultiSelectView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFMultiSelect label='Bagel' options={getOptions()} />\n      </div>\n      <div className='row'>\n        <SFMultiSelect\n          label='Bagel'\n          options={getOptions()}\n          value={['Bagel number one']}\n        />\n      </div>\n      <div className='row'>\n        <SFMultiSelect\n          label='Bagel'\n          options={getOptions()}\n          value={['Bagel number one']}\n          disabled\n        />\n      </div>\n      <div className='row'>\n        <SFMultiSelect\n          label='Bagel'\n          options={getOptions()}\n          value={['Bagel number one']}\n          error\n          helperText='Error message'\n        />\n      </div>\n      <div className='row'>\n        <SFMultiSelect\n          label='Bagel'\n          options={getOptions()}\n          value={['Bagel number one']}\n          helperText='Helper message'\n        />\n      </div>\n    </div>\n  );\n};\nexport { SFMultiSelectView };\n","import React from 'react';\n\nimport { SFRadio } from 'sfui';\n\nconst SFRadioView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFRadio />\n        <SFRadio label='Bagel' />\n      </div>\n      <div className='row'>\n        <SFRadio disabled />\n        <SFRadio label='Bagel' disabled />\n      </div>\n      <div className='row'>\n        <SFRadio checked />\n        <SFRadio label='Bagel' checked />\n      </div>\n      <div className='row'>\n        <SFRadio checked disabled />\n        <SFRadio label='Bagel' checked disabled />\n      </div>\n    </div>\n  );\n};\n\nexport { SFRadioView };\n","import React from 'react';\n\nimport { SFRadioGroup, SFRadioOptionsProps } from 'sfui';\n\nconst SFRadioGroupView = (): JSX.Element => {\n  const options: SFRadioOptionsProps[] = [\n    { value: 'male', label: 'Male', disabled: false },\n    { value: 'female', label: 'Female', disabled: false },\n    { value: 'others', label: 'Others', disabled: false }\n  ];\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFRadioGroup label='Genders' defaultValue='male' options={options} />\n      </div>\n    </div>\n  );\n};\n\nexport { SFRadioGroupView };\n","import React from 'react';\nimport { SFSpinner } from 'sfui';\n\nconst SFSpinnerView = (): JSX.Element => {\n  return (\n    <div className='links'>\n      <div className='row'>\n        <SFSpinner />\n      </div>\n    </div>\n  );\n};\nexport { SFSpinnerView };\n","import React from 'react';\n\nimport { SFSplitButton, SFSplitButtonOption } from 'sfui';\n\nexport const SFSplitButtonView = (): JSX.Element => {\n  const splitButtonOptions: SFSplitButtonOption[] = [\n    {\n      onClick: (): void => console.log('Clicked Small option!'),\n      label: 'Small'\n    },\n    {\n      onClick: (): void => console.log('Clicked Medium option!'),\n      label: 'Medium'\n    },\n    {\n      onClick: (): void => console.log('Clicked Large option!'),\n      label: 'Large'\n    }\n  ];\n\n  return (\n    <div className='row'>\n      <div className='column'>\n        <SFSplitButton\n          sfColor='blue'\n          variant='contained'\n          defaultSelected={1}\n          options={splitButtonOptions}\n        />\n        <SFSplitButton\n          sfColor='blue'\n          variant='outlined'\n          defaultSelected={1}\n          options={splitButtonOptions}\n        />\n        <SFSplitButton\n          sfColor='grey'\n          variant='contained'\n          defaultSelected={1}\n          options={splitButtonOptions}\n        />\n        <SFSplitButton\n          sfColor='grey'\n          variant='outlined'\n          defaultSelected={1}\n          options={splitButtonOptions}\n        />\n      </div>\n      <div className='column'>\n        <SFSplitButton\n          sfColor='blue'\n          variant='contained'\n          defaultSelected={2}\n          size='large'\n          options={splitButtonOptions}\n        />\n        <SFSplitButton\n          sfColor='blue'\n          variant='outlined'\n          defaultSelected={2}\n          size='large'\n          options={splitButtonOptions}\n        />\n        <SFSplitButton\n          sfColor='grey'\n          variant='contained'\n          defaultSelected={2}\n          size='large'\n          options={splitButtonOptions}\n        />\n        <SFSplitButton\n          sfColor='grey'\n          variant='outlined'\n          defaultSelected={2}\n          size='large'\n          options={splitButtonOptions}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFSelect, SFMenuOption } from 'sfui';\n\nconst getOptions = (): SFMenuOption[] => {\n  return [\n    {\n      label: 'Bagel number one',\n      value: 'Bagel number one'\n    },\n    {\n      label: 'Bagel number two',\n      value: 'Bagel number two'\n    },\n    {\n      label: 'Bagel number three',\n      value: 'Bagel number three'\n    }\n  ];\n};\n\nconst SFSelectView = (): JSX.Element => {\n  const [selectValue, setSelectValue] = React.useState<string>('');\n  const [selectValue1, setSelectValue1] = React.useState<string>(\n    'Bagel number one'\n  );\n  const [selectValue2, setSelectValue2] = React.useState<string>(\n    'Bagel number one'\n  );\n  const [selectValue3, setSelectValue3] = React.useState<string>('');\n  const [selectValue4, setSelectValue4] = React.useState<string>('');\n\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFSelect\n          label='Bagel'\n          options={getOptions()}\n          value={selectValue}\n          onChange={(\n            event: React.ChangeEvent<{\n              name?: string | undefined;\n              value: unknown;\n            }>\n          ) => setSelectValue(event.target.value as string)}\n        />\n      </div>\n      <div className='row'>\n        <SFSelect\n          label='Bagel'\n          options={getOptions()}\n          value={selectValue1}\n          onChange={(event): void =>\n            setSelectValue1(event.target.value as string)\n          }\n        />\n      </div>\n      <div className='row'>\n        <SFSelect\n          label='Bagel'\n          options={getOptions()}\n          value={selectValue2}\n          onChange={(event): void =>\n            setSelectValue2(event.target.value as string)\n          }\n          disabled\n        />\n      </div>\n      <div className='row'>\n        <SFSelect\n          label='Bagel'\n          options={getOptions()}\n          value={selectValue3}\n          onChange={(event): void =>\n            setSelectValue3(event.target.value as string)\n          }\n          error\n          helperText='Error message'\n        />\n      </div>\n      <div className='row'>\n        <SFSelect\n          label='Bagel'\n          options={getOptions()}\n          value={selectValue4}\n          onChange={(event): void =>\n            setSelectValue4(event.target.value as string)\n          }\n          helperText='Helper message'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { SFSelectView };\n","import React from 'react';\n\nimport { SFSkeleton } from 'sfui';\n\nexport const SFSkeletonView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFSkeleton variant='circle' height={50} width={50} />\n        <SFSkeleton variant='rect' height={50} width='90%' />\n      </div>\n      <SFSkeleton variant='text' height={30} />\n      <SFSkeleton variant='text' height={30} />\n      <SFSkeleton variant='text' height={30} />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFTimeField } from 'sfui';\n\nexport const SFTimeFieldView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <SFTimeField\n        label='Bagel'\n        value=''\n        onChange={(): void => console.log('Time Selected')}\n      />\n      <SFTimeField\n        label='Bagel'\n        value={new Date().toISOString()}\n        onChange={(): void => console.log('Time Selected')}\n      />\n      <SFTimeField\n        label='Bagel'\n        value={new Date().toISOString()}\n        disabled\n        onChange={(): void => console.log('Time Selected')}\n      />\n      <SFTimeField\n        label='Bagel'\n        value={new Date().toISOString()}\n        error\n        helperText='Error message'\n        onChange={(): void => console.log('Time Selected')}\n      />\n      <SFTimeField\n        label='Bagel'\n        value={new Date().toISOString()}\n        helperText='Helper message'\n        onChange={(): void => console.log('Time Selected')}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFSwitch } from 'sfui';\n\nconst SFSwitchesView = (): JSX.Element => {\n  return (\n    <div className='row extra-space'>\n      <div className='row'>\n        <div className='column'>\n          <SFSwitch size='small' />\n          <SFSwitch size='small' disabled />\n          <SFSwitch size='small' checked />\n          <SFSwitch size='small' checked disabled />\n        </div>\n        <div className='column'>\n          <SFSwitch size='small' label='Bagel' />\n          <SFSwitch size='small' label='Bagel' disabled />\n          <SFSwitch size='small' label='Bagel' checked />\n          <SFSwitch size='small' checked label='Bagel' disabled />\n        </div>\n      </div>\n      <div className='row'>\n        <div className='column'>\n          <SFSwitch />\n          <SFSwitch disabled />\n          <SFSwitch checked />\n          <SFSwitch checked disabled />\n        </div>\n        <div className='column'>\n          <SFSwitch label='Bagel' />\n          <SFSwitch label='Bagel' disabled />\n          <SFSwitch label='Bagel' checked />\n          <SFSwitch checked label='Bagel' disabled />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { SFSwitchesView };\n","import React from 'react';\n\nimport { SFTextField } from 'sfui';\n\nconst SFTextFieldsView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFTextField label='Bagel' />\n      </div>\n      <div className='row'>\n        <SFTextField label='Bagel' value='This is a bagel' />\n      </div>\n      <div className='row'>\n        <SFTextField label='Bagel' value='This is a bagel' disabled />\n      </div>\n      <div className='row'>\n        <SFTextField\n          label='Bagel'\n          value='This is a bagel'\n          error\n          helperText='Error message'\n        />\n      </div>\n      <div className='row'>\n        <SFTextField\n          label='Bagel'\n          value='This is a bagel'\n          helperText='Helper Message'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { SFTextFieldsView };\n","import React from 'react';\nimport { SFTextField } from 'sfui';\n\nconst SFTextFieldsMultilineView = (): JSX.Element => {\n  const innerText = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris lobortis a erat eu mattis. \n  Donec fringilla molestie justo pulvinar dignissim. Pellentesque sit amet ex a velit maximus aliquet sit amet id justo.\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris lobortis a erat eu mattis.\n   Donec fringilla molestie justo pulvinar dignissim. Pellentesque sit amet ex a velit maximus aliquet sit amet id justo.`;\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFTextField multiline label='Bagel' />\n      </div>\n      <div className='row'>\n        <SFTextField multiline label='Bagel' value={innerText} />\n      </div>\n      <div className='row'>\n        <SFTextField multiline label='Bagel' value={innerText} disabled />\n      </div>\n      <div className='row'>\n        <SFTextField\n          multiline\n          label='Bagel'\n          value={innerText}\n          error\n          helperText='Error message'\n        />\n      </div>\n      <div className='row'>\n        <SFTextField\n          multiline\n          label='Bagel'\n          value={innerText}\n          helperText='Helper Message'\n        />\n      </div>\n    </div>\n  );\n};\nexport { SFTextFieldsMultilineView };\n","import React from 'react';\n\nimport { SFTable, SFTableColumn, RowData } from 'sfui';\n\nconst SFTableView = (): JSX.Element => {\n  const getColumns = (): SFTableColumn[] => {\n    return [\n      { title: 'Head title one', field: 'one' },\n      { title: 'Head title two', field: 'two' },\n      { title: 'Head title three', field: 'three' },\n      { title: 'Head title four', field: 'four' },\n      { title: 'Head title five', field: 'five' },\n      { title: 'Head title six', field: 'six' }\n    ];\n  };\n\n  const getRows = (): RowData[] => {\n    return [\n      {\n        one: 'Body row one',\n        two: 'Body row one',\n        three: 'Body row one',\n        four: 'Body row one',\n        five: 'Body row one',\n        six: 'Body row one'\n      },\n      {\n        one: 'Body row two',\n        two: 'Body row two',\n        three: 'Body row two',\n        four: 'Body row two',\n        five: 'Body row two',\n        six: 'Body row two'\n      },\n      {\n        one: 'Body row three',\n        two: 'Body row three',\n        three: 'Body row three',\n        four: 'Body row three',\n        five: 'Body row three',\n        six: 'Body row three'\n      },\n      {\n        one: 'Body row four',\n        two: 'Body row four',\n        three: 'Body row four',\n        four: 'Body row four',\n        five: 'Body row four',\n        six: 'Body row four'\n      },\n      {\n        one: 'Body row five',\n        two: 'Body row five',\n        three: 'Body row five',\n        four: 'Body row five',\n        five: 'Body row five',\n        six: 'Body row five'\n      },\n      {\n        one: 'Body row six',\n        two: 'Body row six',\n        three: 'Body row six',\n        four: 'Body row six',\n        five: 'Body row six',\n        six: 'Body row six'\n      }\n    ];\n  };\n\n  return (\n    <div className='custom-grid'>\n      <div className='row'>\n        <SFTable columns={getColumns()} data={getRows()} />\n        <SFTable\n          options={{\n            search: true,\n            toolbar: true\n          }}\n          columns={getColumns()}\n          data={getRows()}\n        />\n      </div>\n      <div className='row'>\n        <SFTable\n          options={{ selection: true }}\n          columns={getColumns()}\n          data={getRows()}\n        />\n        <SFTable\n          options={{ paging: true }}\n          columns={getColumns()}\n          data={getRows()}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { SFTableView };\n","import React from 'react';\n\nimport { SFAlertView } from '../AlertView/AlertView';\nimport { SFAutocompleteView } from '../AutocompleteView/AutocompleteView';\nimport { SFAutoCompleteLocationView } from '../AutocompleteLocationView/AutocompleteLocationView';\nimport { SFAutocompleteChipsView } from '../AutocompleteChipsView/AutocompleteChipsView';\nimport { SFButtonsView } from '../ButtonsView/ButtonsView';\nimport { SFCheckboxesView } from '../CheckboxesView/CheckboxesView';\nimport { SFChipsView } from '../ChipView/ChipView';\nimport { SFChipsFieldView } from '../ChipsFieldView/ChipsFieldView';\nimport { SFDatePickerView } from '../DatePickerView/DatePickerView';\nimport { SFDialogsView } from '../DialogsView/DialogsView';\nimport { SFDrawersView } from '../DrawersView/DrawersView';\nimport { SFIconButtonView } from '../IconButtonView/IconButtonView';\nimport { SFLinksView } from '../LinksView/LinksView';\nimport { SFMultiSelectView } from '../MultiSelectView/MultiSelectView';\nimport { SFRadioView } from '../RadioView/RadioView';\nimport { SFRadioGroupView } from '../RadioGroupView/RadioGroupView';\nimport { SFScrollable } from 'sfui';\nimport { SFSpinnerView } from '../SpinnerView/SpinnerView';\nimport { SFSplitButtonView } from '../SplitButtonView/SplitButtonView';\nimport { SFSelectView } from '../SelectView/SelectView';\nimport { SFSkeletonView } from '../SkeletonView/SkeletonView';\nimport { SFTimeFieldView } from '../TimeInputView/TimeInputView';\nimport { SFSwitchesView } from '../SwitchesView/SwitchesView';\nimport { SFTextFieldsView } from '../TextFieldsView/TextFieldsView';\nimport { SFTextFieldsMultilineView } from '../TextFieldsMultilineView/TextFieldsMultilineView';\nimport { SFTableView } from '../TableView/TableView';\n\nexport const ComponentsPage = (): JSX.Element => {\n  return (\n    <div className='componentsPage'>\n      <SFScrollable>\n        <div className='pagesLayout'>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Buttons</h4>\n              <SFButtonsView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Icon Button</h4>\n              <SFIconButtonView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Split Button</h4>\n              <SFSplitButtonView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Links</h4>\n              <SFLinksView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Progress Circular Indeterminate</h4>\n              <SFSpinnerView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Alert</h4>\n              <SFAlertView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Chips</h4>\n              <SFChipsView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Checkbox</h4>\n              <SFCheckboxesView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Radio Button</h4>\n              <SFRadioView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Radio Group Button</h4>\n              <SFRadioGroupView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Switch</h4>\n              <SFSwitchesView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Dialog and Drawer</h4>\n              <div className='row'>\n                <SFDialogsView />\n                <SFDrawersView />\n              </div>\n            </div>\n            <div className='section'>\n              <h4 className='title'>Skeleton</h4>\n              <SFSkeletonView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Time Picker</h4>\n              <SFTimeFieldView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Date Picker</h4>\n              <SFDatePickerView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Text Field</h4>\n              <SFTextFieldsView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Text Field Multiline</h4>\n              <SFTextFieldsMultilineView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Chips Field</h4>\n              <SFChipsFieldView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Autocomplete Chips</h4>\n              <SFAutocompleteChipsView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Autocomplete Text</h4>\n              <SFAutocompleteView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Autocomplete Location</h4>\n              <SFAutoCompleteLocationView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Simple Select</h4>\n              <SFSelectView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Multiline Select</h4>\n              <SFMultiSelectView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section fitContent'>\n              <h4 className='title'>Tables</h4>\n              <SFTableView />\n            </div>\n          </div>\n        </div>\n      </SFScrollable>\n    </div>\n  );\n};\n","import { ParsableDate } from '@material-ui/pickers/constants/prop-types';\nimport React, { ChangeEvent, useEffect, useState } from 'react';\n\nimport {\n  SFTextField,\n  SFRadioGroup,\n  SFRadioOptionsProps,\n  SFCheckbox,\n  SFSwitch,\n  SFDatePicker,\n  SFSelect,\n  SFMenuOption,\n  SFAlertDialog,\n  SFNumericField,\n  SFAutocompleteLocation,\n  SFAutocompleteLocationResult,\n  SFTimeField,\n  SFLink,\n  SFSkeleton,\n  SFSpinner,\n  SFChipsListField,\n  ChipFieldValueType,\n  SFAutocomplete,\n  SFMultiSelect,\n  SFButton,\n  SFScrollable\n} from 'sfui';\n\nexport const FormView = (): JSX.Element => {\n  type formInformation = {\n    date: string | undefined;\n    streetAdress: SFAutocompleteLocationResult;\n    incidentNumber: string;\n    incidentTime: ParsableDate;\n    description: string;\n    injured: boolean;\n    propertyDamage: boolean;\n    witnessess: string;\n    supervisor: string;\n    officers: ChipFieldValueType[];\n    incidentEvents: ChipFieldValueType[];\n    placeOfOcurrence: string | undefined;\n    incidentTests: string[] | undefined;\n    policeDepartment: string;\n  };\n\n  const initialData: formInformation = {\n    date: undefined,\n    streetAdress: { text: '' },\n    incidentNumber: '',\n    incidentTime: undefined,\n    description: '',\n    injured: false,\n    propertyDamage: false,\n    witnessess: '',\n    supervisor: '',\n    officers: [],\n    incidentEvents: [],\n    placeOfOcurrence: undefined,\n    incidentTests: [],\n    policeDepartment: ''\n  };\n\n  const [response, setResponse] = useState<formInformation>({ ...initialData });\n  const [formData, setFormData] = useState({ ...initialData });\n  const [openResponsePanel, setOpenResponsePanel] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSent, setIsSent] = useState(false);\n\n  const cleanOutput = (): void => {\n    console.log(formData);\n    setFormData({ ...initialData });\n  };\n\n  const handleFormResponse = (): void => {\n    setIsSent(true);\n    setTimeout(() => {\n      setIsSent(false);\n    }, 1000);\n    setResponse(formData);\n  };\n\n  const radioGroupOptions: SFRadioOptionsProps[] = [\n    { value: 'None', label: 'None', disabled: false },\n    { value: 'Around 10', label: 'Few', disabled: false },\n    { value: 'Around 25 ', label: 'Some', disabled: false },\n    { value: 'More Than 30', label: 'Many', disabled: false }\n  ];\n\n  const selectOptions: SFMenuOption[] = [\n    { value: 'Henry McKane', label: 'Henry McKane' },\n    { value: 'Donald McDonald', label: 'Donald McDonald' },\n    { value: 'Andrew Snippets', label: 'Andrew Snippets' },\n    { value: 'John Cenna', label: 'John Cenna' }\n  ];\n\n  const ChipsListOptions: string[] = [\n    'Verbal',\n    'Fight',\n    'Escape',\n    'Hand Weapon Usage',\n    'Pursuit',\n    'Firegun Usage',\n    'Standup Stabilization',\n    'Ground Stabilization'\n  ];\n\n  const autoCompleteOptions: SFMenuOption[] = [\n    { label: 'School', value: 'School' },\n    { label: 'Gym', value: 'Gym' },\n    { label: 'Hospital', value: 'Hospital' },\n    { label: 'Store', value: 'Store' },\n    { label: 'Parking Lot', value: 'Parking Lot' },\n    { label: 'Playground', value: 'Playground' },\n    { label: 'Street', value: 'Street' },\n    { label: 'House', value: 'House' },\n    { label: 'Train Station', value: 'Train Station' }\n  ];\n\n  const multiSelectOptions: SFMenuOption[] = [\n    { label: 'Alcohol Test', value: 'Alcohol Test' },\n    { label: 'Drugs Test', value: 'Drugs Test' },\n    { label: 'First Aid', value: 'First Aid' }\n  ];\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 2000);\n  }, []);\n\n  return (\n    <div className='demoItem'>\n      <h4 className='demoTitle'>Form Demo</h4>\n      <div className='demoBody'>\n        {isLoading && (\n          <div className='grid-column skeleton'>\n            <div className='row'>\n              <SFSkeleton variant='circle' width={60} height={60} />\n              <SFSkeleton variant='rect' width='94%' height={60} />\n            </div>\n            <SFSkeleton variant='text' />\n            <SFSkeleton variant='text' />\n            <SFSkeleton variant='text' />\n          </div>\n        )}\n        {!isLoading && (\n          <form className='demoTest'>\n            <div className='column'>\n              <h4 className='title'>Incident Information</h4>\n              <SFAutocomplete\n                label='Place of Ocurrence'\n                options={autoCompleteOptions}\n                value={formData.placeOfOcurrence}\n                onChange={(value: string): void =>\n                  setFormData({ ...formData, placeOfOcurrence: value })\n                }\n              />\n              <div className='grid-row'>\n                <div className='column'>\n                  <SFDatePicker\n                    label='Incident Date'\n                    name='date'\n                    value={formData.date}\n                    onChange={(value: string): void =>\n                      setFormData({\n                        ...formData,\n                        date: value\n                      })\n                    }\n                  />\n                  <SFAutocompleteLocation\n                    label='Street you were in'\n                    value={formData.streetAdress}\n                    onChange={(value: SFAutocompleteLocationResult): void =>\n                      setFormData({\n                        ...formData,\n                        streetAdress: {\n                          text: value.text\n                        }\n                      })\n                    }\n                  />\n                </div>\n                <div className='column'>\n                  <SFNumericField\n                    label='Incident #'\n                    value={formData.incidentNumber}\n                    onChange={(event: ChangeEvent<HTMLInputElement>): void =>\n                      setFormData({\n                        ...formData,\n                        incidentNumber: event.target.value\n                      })\n                    }\n                  />\n                  <SFTimeField\n                    label='Time of Incident'\n                    name='incidentTime'\n                    placeholder='08:00 AM'\n                    value={formData.incidentTime}\n                    onChange={(value: string): void =>\n                      setFormData({ ...formData, incidentTime: value })\n                    }\n                  />\n                </div>\n              </div>\n              <SFTextField\n                multiline\n                label='Incident description'\n                name='description'\n                value={formData.description}\n                onChange={(event: ChangeEvent<HTMLInputElement>): void =>\n                  setFormData({ ...formData, description: event.target.value })\n                }\n              />\n            </div>\n            <div className='column'>\n              <h4 className='title'>Additional Information</h4>\n            </div>\n            <div className='grid-row'>\n              <div className='column'>\n                <SFSwitch\n                  label='Property Damage'\n                  name='propertyDamage'\n                  checked={formData.propertyDamage}\n                  onChange={(event: ChangeEvent<HTMLInputElement>): void =>\n                    setFormData({\n                      ...formData,\n                      propertyDamage: event.target.checked\n                    })\n                  }\n                />\n                <SFCheckbox\n                  label='Officer Injured'\n                  name='injured'\n                  checked={formData.injured}\n                  onChange={(event: ChangeEvent<HTMLInputElement>): void =>\n                    setFormData({ ...formData, injured: event.target.checked })\n                  }\n                />\n              </div>\n              <SFRadioGroup\n                row\n                label='Witnessess'\n                name='witnessess'\n                value={formData.witnessess}\n                options={radioGroupOptions}\n                onChange={(event: ChangeEvent<HTMLInputElement>): void =>\n                  setFormData({ ...formData, witnessess: event.target.value })\n                }\n              />\n            </div>\n            <SFChipsListField\n              label='Incident Events'\n              options={ChipsListOptions}\n              items={formData.incidentEvents}\n              onChange={(value: ChipFieldValueType[]): void =>\n                setFormData({ ...formData, incidentEvents: value })\n              }\n            />\n            <SFMultiSelect\n              label='Incident Tests'\n              value={formData.incidentTests}\n              options={multiSelectOptions}\n              onChange={(event): void =>\n                setFormData({\n                  ...formData,\n                  incidentTests: event.target.value as string[]\n                })\n              }\n            />\n            <div className='column'>\n              <h4 className='title'>Employees Assigned</h4>\n              <SFTextField\n                label='Police Department Name'\n                name='police department'\n                autoComplete='off'\n                value={formData.policeDepartment}\n                onChange={(event: ChangeEvent<HTMLInputElement>): void =>\n                  setFormData({\n                    ...formData,\n                    policeDepartment: event.target.value\n                  })\n                }\n              />\n              <div className='grid-row'>\n                <SFChipsListField\n                  label='Officers Involved'\n                  items={formData.officers}\n                  onChange={(value: ChipFieldValueType[]): void =>\n                    setFormData({ ...formData, officers: value })\n                  }\n                />\n\n                <SFSelect\n                  label='Supervisor'\n                  name='supervisor'\n                  options={selectOptions}\n                  value={formData.supervisor}\n                  onChange={(event): void =>\n                    setFormData({\n                      ...formData,\n                      supervisor: event.target.value\n                        ? (event.target.value as string)\n                        : ''\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className='send'>\n              <SFButton\n                variant='outlined'\n                sfColor='grey'\n                onClick={(): void => cleanOutput()}\n              >\n                Clear Input\n              </SFButton>\n              <SFButton\n                variant='contained'\n                sfColor='blue'\n                onClick={(): void => {\n                  handleFormResponse();\n                  setOpenResponsePanel(true);\n                }}\n              >\n                Send Information\n              </SFButton>\n            </div>\n          </form>\n        )}\n      </div>\n      <footer className='brand'>\n        <span>Powered by</span>\n        <br />\n        <SFLink\n          sfSize='medium'\n          color='primary'\n          href='https://smartforce.app'\n          target='_blank'\n        >\n          SmartForce Technologies, Inc.\n        </SFLink>\n      </footer>\n      {isSent && (\n        <div className='loadingScreen'>\n          <SFSpinner size='60px' />\n        </div>\n      )}\n      <SFAlertDialog\n        title='Form Output'\n        PaperProps={{ className: 'demoResponse' }}\n        maxWidth='sm'\n        fullWidth\n        open={openResponsePanel}\n        content=''\n        rightAction={{\n          label: 'Close',\n          buttonProps: {\n            onClick: (): void => setOpenResponsePanel(false)\n          }\n        }}\n      >\n        {!isSent && (\n          <div className='response'>\n            <SFScrollable>\n              <code>\n                <pre>\n                  {response && Object.keys(response).length === 0\n                    ? ''\n                    : JSON.stringify(response, null, 2)}\n                </pre>\n              </code>\n            </SFScrollable>\n          </div>\n        )}\n      </SFAlertDialog>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { FormView } from '../FormView/FormView';\nimport { SFScrollable } from 'sfui';\n\nexport const DemosPage = (): JSX.Element => {\n  return (\n    <div className='demoPage'>\n      <SFScrollable>\n        <FormView />\n      </SFScrollable>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport {\n  SFThemeProvider,\n  createSFTheme,\n  SFTheme,\n  SFThemeType,\n  SFPaper,\n  SFSwitch,\n  useSFMediaQuery,\n  SFStylesProvider,\n  SFButton\n} from 'sfui';\n\nimport { ComponentsPage } from './Pages/ComponentsPage';\nimport { DemosPage } from './Pages/DemosPage';\n\nconst setThemeType = (theme: SFThemeType): void => {\n  localStorage.setItem('Smartforce.SFuiExample.ThemeType', theme);\n};\n\nconst getThemeType = (): SFThemeType | undefined => {\n  return localStorage.getItem('Smartforce.SFuiExample.ThemeType') as\n    | SFThemeType\n    | undefined;\n};\n\nconst App = (): JSX.Element => {\n  const prefersDarkMode: boolean = useSFMediaQuery(\n    '(prefers-color-scheme: dark)'\n  );\n\n  const [nightMode, setNightMode] = useState(prefersDarkMode);\n  const [showDemo, setShowDemo] = useState(false);\n\n  const switchLabel = nightMode === true ? 'Night' : 'Day';\n\n  const theme: SFTheme = createSFTheme(nightMode ? 'night' : 'day');\n  const toggleSwitch = (): void => {\n    setThemeType(nightMode ? 'day' : 'night');\n    setNightMode((value) => !value);\n  };\n\n  React.useEffect(() => {\n    const getLocalStorageThemeType: SFThemeType | undefined = getThemeType();\n    if (getLocalStorageThemeType) {\n      setNightMode(getLocalStorageThemeType === 'night');\n    } else {\n      setThemeType(prefersDarkMode ? 'night' : 'day');\n      setNightMode(prefersDarkMode);\n    }\n  }, []);\n\n  return (\n    <SFThemeProvider theme={theme}>\n      <SFStylesProvider injectFirst>\n        <SFPaper\n          style={{\n            backgroundColor: theme.palette.background.default\n          }}\n          className={`${nightMode ? 'night' : 'day'}`}\n        >\n          <div className='bodyContent'>\n            <h1 className='textHeader'>\n              <span>\n                SFUI <span className='libText'>Library </span>\n                <span\n                  className='textBrand'\n                  style={{ color: theme.palette.primary.main }}\n                >\n                  by Smartforce\n                </span>\n              </span>\n              <SFSwitch\n                label={switchLabel}\n                checked={nightMode}\n                onChange={toggleSwitch}\n              />\n            </h1>\n            <div className='row topBar'>\n              <SFButton\n                size='medium'\n                sfColor='blue'\n                variant='text'\n                onClick={(): void => setShowDemo(false)}\n              >\n                Components\n              </SFButton>\n              <SFButton\n                size='medium'\n                sfColor='blue'\n                variant='text'\n                onClick={(): void => setShowDemo(true)}\n              >\n                Demos\n              </SFButton>\n            </div>\n            {showDemo === false ? <ComponentsPage /> : <DemosPage />}\n          </div>\n        </SFPaper>\n      </SFStylesProvider>\n    </SFThemeProvider>\n  );\n};\n\nexport default App;\n","import './index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","export interface SFColorProps {\n  A100?: string;\n  A200?: string;\n  A400?: string;\n  A700?: string;\n  50: string;\n  100: string;\n  200: string;\n  300: string;\n  400: string;\n  500: string;\n  600: string;\n  700: string;\n  800: string;\n  900: string;\n}\n\nconst SFBlue: SFColorProps = {\n  50: '#E5F6FF',\n  100: '#CCEBFF',\n  200: '#80C6FF',\n  300: '#5CADFF',\n  400: '#338FFF',\n  500: '#0066FF',\n  600: '#0050E6',\n  700: '#003DCC',\n  800: '#002699',\n  900: '#001466'\n};\n\nconst SFRed: SFColorProps = {\n  50: '#FCEEEF',\n  100: '#F9DCDE',\n  200: '#F0A8AD',\n  300: '#EB8E95',\n  400: '#E7747C',\n  500: '#DB343E',\n  600: '#C7232E',\n  700: '#AD1F29',\n  800: '#821724',\n  900: '#5F111E'\n};\n\nconst SFGrey: SFColorProps = {\n  A100: '#CCCCCC',\n  A200: '#B2B2B2',\n  A400: '#333333',\n  A700: '#666666',\n  50: '#F2F2F2',\n  100: '#E5E5E5',\n  200: '#CCCCCC',\n  300: '#B2B2B2',\n  400: '#999999',\n  500: '#808080',\n  600: '#666666',\n  700: '#4D4D4D',\n  800: '#333333',\n  900: '#1A1A1A'\n};\n\nconst SFGreen: SFColorProps = {\n  50: '#E0F5E7',\n  100: '#C1EBCF',\n  200: '#54C97B',\n  300: '#33B760',\n  400: '#239F4C',\n  500: '#17823B',\n  600: '#0F6C2E',\n  700: '#085421',\n  800: '#043A16',\n  900: '#01230C'\n};\n\nconst SFBlueMainLight = SFBlue[500];\nconst SFBlueMainDark = SFBlue[200];\n\nconst SFRedMainLight = SFRed[700];\nconst SFRedMainDark = SFRed[200];\n\nconst SFGreyMainLight = SFGrey[600];\nconst SFGreyMainDark = SFGrey[400];\n\nconst SFGreenMainLight = SFGreen[500];\nconst SFGreenMainDark = SFGreen[200];\n\nconst SFBackgroundLight = '#FAFAFA';\nconst SFBackgroundDark = '#121212';\n\nconst SFSurfaceLight = '#FFFFFF';\nconst SFSurfaceDark = '#1F1F1F';\n\nconst SFTextWhite = '#F2F2F2';\nconst SFTextBlack = '#1A1A1A';\n\nconst SFCommonWhite = '#FFFFFF';\nconst SFCommonBlack = '#000000';\n\nexport {\n  SFBlue,\n  SFBlueMainLight,\n  SFBlueMainDark,\n  SFRed,\n  SFRedMainLight,\n  SFRedMainDark,\n  SFGrey,\n  SFGreyMainLight,\n  SFGreyMainDark,\n  SFGreen,\n  SFGreenMainLight,\n  SFGreenMainDark,\n  SFBackgroundLight,\n  SFBackgroundDark,\n  SFSurfaceLight,\n  SFSurfaceDark,\n  SFTextWhite,\n  SFTextBlack,\n  SFCommonWhite,\n  SFCommonBlack\n};\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IcomoonReact = exports.iconList = void 0;\nvar react_1 = __importDefault(require(\"react\"));\nexports.iconList = function (iconSet) {\n    var list = [];\n    iconSet.icons.forEach(function (icon) {\n        list.push(icon.properties.name.split(\", \")[0]);\n    });\n    return list;\n};\nfunction getSvg(icon, iconSet, styles, size, className, rest) {\n    var find = function (iconEl) { return iconEl.properties.name.split(\", \").includes(icon); };\n    var currentIcon = iconSet.icons.find(find);\n    var renderPath = function (iconObj) { return function (path, index) {\n        var attrs = (iconObj.attrs && iconObj.attrs[index]) || {};\n        return react_1.default.createElement(\"path\", __assign({ style: styles.path, key: index, d: path }, attrs));\n    }; };\n    if (currentIcon) {\n        return (react_1.default.createElement(\"svg\", __assign({ className: className, style: styles.svg, width: size, height: size, viewBox: \"0 0 \" + (currentIcon.icon.width || \"1024\") + \" 1024\", xmlns: \"http://www.w3.org/2000/svg\" }, rest), currentIcon.icon.paths.map(renderPath(currentIcon.icon))));\n    }\n    console.warn(\"icon \" + icon + \" does not exist.\");\n    return null;\n}\nexports.IcomoonReact = function (props) {\n    var color = props.color, _a = props.size, size = _a === void 0 ? \"100%\" : _a, icon = props.icon, iconSet = props.iconSet, _b = props.className, className = _b === void 0 ? \"\" : _b, _c = props.style, style = _c === void 0 ? {} : _c, rest = __rest(props, [\"color\", \"size\", \"icon\", \"iconSet\", \"className\", \"style\"]);\n    var styles = {\n        svg: __assign({ display: \"inline-block\", verticalAlign: \"middle\" }, style),\n        path: {\n            fill: color\n        }\n    };\n    return getSvg(icon, iconSet, styles, size, className, rest);\n};\nexports.IcomoonReact.displayName = \"IcomoonReact\";\nexports.default = exports.IcomoonReact;\n//# sourceMappingURL=IcomoonReact.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IcomoonReact_1 = require(\"./IcomoonReact/IcomoonReact\");\nvar IcomoonReact_2 = require(\"./IcomoonReact/IcomoonReact\");\nObject.defineProperty(exports, \"iconList\", { enumerable: true, get: function () { return IcomoonReact_2.iconList; } });\nexports.default = IcomoonReact_1.IcomoonReact;\n//# sourceMappingURL=index.js.map","import React, { forwardRef } from 'react';\nimport { useTheme, Theme } from '@material-ui/core/styles';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport IcomoonReact from 'icomoon-react';\nimport IconSet from './icons/selection.json';\n\nexport type SFIconRotation = 'left' | 'right' | 'invert' | 'none';\n\nexport interface SFIconProps {\n  color?: string | undefined;\n  size?: string | number | undefined;\n  rotate?: SFIconRotation;\n  icon: string;\n  className?: string | undefined;\n  style?: React.CSSProperties | undefined;\n}\n\nconst getRotationDeg = (rotation: SFIconRotation): number => {\n  switch (rotation) {\n    case 'left':\n      return -90;\n    case 'right':\n      return 90;\n    case 'invert':\n      return 180;\n    default:\n      return 0;\n      break;\n  }\n};\n\nexport const SFIcon = forwardRef(\n  (\n    { icon = 'Bell', size = 24, rotate = 'none', ...props }: SFIconProps,\n    ref: React.Ref<SVGSVGElement>\n  ): React.ReactElement<SFIconProps> => {\n    const theme: Theme = useTheme();\n    const colorDefault: string =\n      theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400];\n    const color: string = props.color ? props.color : colorDefault;\n    const customStyle: React.CSSProperties = {\n      transform: `rotate(${getRotationDeg(rotate)}deg)`\n    };\n\n    return (\n      <IcomoonReact\n        {...props}\n        iconSet={IconSet}\n        icon={icon}\n        size={size}\n        color={color}\n        style={customStyle}\n        ref={ref}\n      />\n    );\n  }\n);\n","import * as React from 'react';\nimport { useTheme, Theme, withStyles } from '@material-ui/core/styles';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { SFIcon, SFIconRotation } from '../SFIcon/SFIcon';\nimport IconButton, { IconButtonProps } from '@material-ui/core/IconButton';\n\ntype SFSize = 'tiny' | 'small' | 'medium' | 'large';\n\ninterface IconButtonInnerProps {\n  padding?: string;\n  size?: string;\n  width?: string;\n  height?: string;\n}\n\nconst StyledIconButton = withStyles((theme: Theme) => ({\n  root: {\n    '&:hover': {\n      '@media (hover: hover)': {\n        backgroundColor: `${\n          theme.palette.type === 'light'\n            ? 'rgba(204, 204, 204, 0.3)'\n            : 'rgba(128, 128, 128, 0.3)'\n        }`\n      }\n    },\n    '&:active': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 204, 204, 0.5)'\n          : 'rgba(128, 128, 128, 0.2)'\n      }`\n    }\n  }\n}))(IconButton);\n\nconst getIconButtonInnerProps = (size?: SFSize): IconButtonInnerProps => {\n  const result: IconButtonInnerProps = {};\n  switch (size) {\n    case 'tiny':\n      result.padding = '5px';\n      result.size = '10';\n      result.height = '20px';\n      result.width = '20px';\n      break;\n    case 'small':\n      result.padding = '9px';\n      result.size = '16';\n      result.height = '34px';\n      result.width = '34px';\n      break;\n    case 'large':\n      result.padding = '14px';\n      result.size = '26';\n      result.height = '54px';\n      result.width = '54px';\n      break;\n    default:\n      result.padding = '11px';\n      result.size = '20';\n      result.height = '42px';\n      result.width = '42px';\n      break;\n  }\n  return result;\n};\n\nexport interface SFIconButtonProps extends IconButtonProps {\n  sfColor?: string | undefined;\n  sfSize: SFSize;\n  sfIcon: string;\n  rotate?: SFIconRotation;\n}\n\nexport const SFIconButton = ({\n  sfColor,\n  sfSize = 'medium',\n  sfIcon = 'Bell',\n  rotate = 'none',\n  ...props\n}: SFIconButtonProps): React.ReactElement<SFIconButtonProps> => {\n  const theme: Theme = useTheme();\n  const isThemeLight: boolean = theme.palette.type === 'light';\n  const iconDefaultColor: string = isThemeLight ? SFGrey[600] : SFGrey[400];\n  const disabledColor: string = isThemeLight ? SFGrey[200] : SFGrey[700];\n  const colorPicked: string = sfColor || iconDefaultColor;\n  const iconButtonInnerProps: IconButtonInnerProps = getIconButtonInnerProps(\n    sfSize\n  );\n\n  return (\n    <StyledIconButton\n      {...props}\n      disableRipple\n      style={{\n        padding: iconButtonInnerProps.padding,\n        height: iconButtonInnerProps.height,\n        width: iconButtonInnerProps.width\n      }}\n    >\n      <SFIcon\n        icon={sfIcon}\n        size={iconButtonInnerProps.size}\n        color={props.disabled ? disabledColor : colorPicked}\n        rotate={rotate}\n      />\n    </StyledIconButton>\n  );\n};\n","export function hexToRgba(hex: string, opacity: number): string | undefined {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n  return result\n    ? `rgba(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(\n        result[3],\n        16\n      )}, ${opacity})`\n    : undefined;\n}\n\nexport function getColorRgb(color: string): string {\n  const el = document.createElement('div');\n  el.style.color = color;\n  document.body.appendChild(el);\n  const rgb = window.getComputedStyle(el).getPropertyValue('color');\n  document.body.removeChild(el);\n  return rgb;\n}\n","import React from 'react';\nimport { Alert, AlertTitle, AlertProps } from '@material-ui/lab';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { SFIconButton } from '../SFIconButton/SFIconButton';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport { SFRed, SFBlue, SFGreen, SFGrey } from '../../SFColors/SFColors';\nimport { hexToRgba } from '../../Helpers';\n\nconst StyledAlert = withStyles((theme: Theme) => ({\n  root: {\n    padding: '16px'\n  },\n  action: {\n    margin: '0 11px',\n    padding: '0'\n  },\n  message: {\n    padding: '0 0 0 16px',\n    fontWeight: 400,\n    fontSize: '16px',\n    lineHeight: '24px',\n    flexGrow: 1,\n\n    '& .MuiAlertTitle-root': {\n      fontWeight: 700,\n      fontSize: '16px',\n      lineHeight: '24px',\n      marginTop: '0'\n    }\n  },\n  icon: {\n    padding: '0px',\n    margin: '0px'\n  },\n  standardError: {\n    backgroundColor: theme.palette.type === 'light' ? SFRed[50] : SFRed[900],\n\n    '& .MuiAlert-icon': {\n      '& svg path': {\n        fill: `${\n          theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n        } !important`\n      }\n    },\n\n    '& .MuiAlert-message': {\n      color: theme.palette.type === 'light' ? SFRed[900] : SFRed[50]\n    },\n\n    '& .MuiIconButton-root': {\n      '& .MuiIconButton-label': {\n        '& svg path': {\n          fill: `${\n            theme.palette.type === 'light' ? SFRed[900] : SFRed[50]\n          } !important`\n        }\n      },\n\n      '&:hover': {\n        '@media (hover: hover)': {\n          backgroundColor:\n            theme.palette.type === 'light'\n              ? hexToRgba(SFRed[100], 0.4)\n              : hexToRgba(SFRed[200], 0.2)\n        }\n      },\n\n      '&:active': {\n        backgroundColor: `${\n          theme.palette.type === 'light'\n            ? hexToRgba(SFRed[100], 0.7)\n            : hexToRgba(SFRed[200], 0.1)\n        } !important`\n      }\n    }\n  },\n  standardInfo: {\n    backgroundColor: theme.palette.type === 'light' ? SFBlue[50] : SFBlue[900],\n\n    '& .MuiAlert-icon': {\n      '& svg path': {\n        fill: `${\n          theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        } !important`\n      }\n    },\n\n    '& .MuiAlert-message': {\n      color: theme.palette.type === 'light' ? SFBlue[900] : SFBlue[50]\n    },\n\n    '& .MuiIconButton-root': {\n      '& .MuiIconButton-label': {\n        '& svg path': {\n          fill: `${\n            theme.palette.type === 'light' ? SFBlue[900] : SFBlue[50]\n          } !important`\n        }\n      },\n\n      '&:hover': {\n        '@media (hover: hover)': {\n          backgroundColor:\n            theme.palette.type === 'light'\n              ? hexToRgba(SFBlue[100], 0.4)\n              : hexToRgba(SFBlue[200], 0.2)\n        }\n      },\n\n      '&:active': {\n        backgroundColor: `${\n          theme.palette.type === 'light'\n            ? hexToRgba(SFBlue[100], 0.6)\n            : hexToRgba(SFBlue[200], 0.1)\n        } !important`\n      }\n    }\n  },\n  standardSuccess: {\n    backgroundColor:\n      theme.palette.type === 'light' ? SFGreen[50] : SFGreen[900],\n\n    '& .MuiAlert-icon': {\n      '& svg path': {\n        fill: `${\n          theme.palette.type === 'light' ? SFGreen[400] : SFGreen[200]\n        } !important`\n      }\n    },\n\n    '& .MuiAlert-message': {\n      color: theme.palette.type === 'light' ? SFGreen[900] : SFGreen[50]\n    },\n\n    '& .MuiIconButton-root': {\n      '& .MuiIconButton-label': {\n        '& svg path': {\n          fill: `${\n            theme.palette.type === 'light' ? SFGreen[900] : SFGreen[50]\n          } !important`\n        }\n      },\n\n      '&:hover': {\n        '@media (hover: hover)': {\n          backgroundColor:\n            theme.palette.type === 'light'\n              ? hexToRgba(SFGreen[100], 0.4)\n              : hexToRgba(SFGreen[200], 0.2)\n        }\n      },\n\n      '&:active': {\n        backgroundColor: `${\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGreen[100], 0.6)\n            : hexToRgba(SFGreen[200], 0.1)\n        } !important`\n      }\n    }\n  },\n  // TODO: We need a Yellow Color palette.\n  standardWarning: {\n    backgroundColor: theme.palette.type === 'light' ? SFGrey[50] : SFGrey[900],\n\n    '& .MuiAlert-icon': {\n      '& svg path': {\n        fill: `${\n          theme.palette.type === 'light' ? SFGrey[400] : SFGrey[200]\n        } !important`\n      }\n    },\n\n    '& .MuiAlert-message': {\n      color: theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n    },\n\n    '& .MuiIconButton-root': {\n      '& .MuiIconButton-label': {\n        '& svg path': {\n          fill: `${\n            theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n          } !important`\n        }\n      },\n\n      '&:hover': {\n        '@media (hover: hover)': {\n          backgroundColor:\n            theme.palette.type === 'light'\n              ? hexToRgba(SFGrey[100], 0.4)\n              : hexToRgba(SFGrey[200], 0.2)\n        }\n      },\n\n      '&:active': {\n        backgroundColor: `${\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey[100], 0.6)\n            : hexToRgba(SFGrey[200], 0.1)\n        } !important`\n      }\n    }\n  }\n}))(Alert);\n\nexport interface SFAlertProps extends AlertProps {\n  title: string;\n  type: 'error' | 'warning' | 'info' | 'success';\n}\n\nconst getIcon = (type: string): JSX.Element | undefined => {\n  switch (type) {\n    case 'error':\n    case 'warning':\n      return <SFIcon size={22} icon='Error-Mark' />;\n    case 'info':\n      return <SFIcon size={22} icon='Information' />;\n    case 'success':\n      return <SFIcon size={22} icon='Check-1' />;\n    default:\n      return undefined;\n  }\n};\n\nexport const SFAlert = ({\n  title,\n  type = 'error',\n  children,\n  onClose,\n  ...props\n}: SFAlertProps): React.ReactElement<SFAlertProps> => {\n  const icon: JSX.Element | undefined = getIcon(type);\n\n  return (\n    <StyledAlert\n      {...props}\n      icon={icon}\n      severity={type}\n      action={\n        onClose ? (\n          <SFIconButton sfIcon='Close' sfSize='medium' onClick={onClose} />\n        ) : undefined\n      }\n      onClose={onClose}\n    >\n      <AlertTitle>{title}</AlertTitle>\n      {children}\n    </StyledAlert>\n  );\n};\n","import {\n  Dialog,\n  DialogProps,\n  DialogTitle,\n  DialogTitleProps,\n  DialogContent,\n  DialogContentProps,\n  DialogContentText,\n  DialogContentTextProps,\n  DialogActions,\n  DialogActionsProps\n} from '@material-ui/core';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { hexToRgba } from '../../Helpers';\nimport React from 'react';\n\nexport interface SFDialogTitleProps extends DialogTitleProps {}\nexport interface SFDialogContentProps extends DialogContentProps {}\nexport interface SFDialogContentTextProps extends DialogContentTextProps {}\nexport interface SFDialogActionsProps extends DialogActionsProps {}\nexport interface SFDialogProps extends DialogProps {}\n\nexport const SFDialogTitle = withStyles((theme: Theme) => ({\n  root: {\n    padding: '36px 36px 24px',\n    '& h2': {\n      color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`,\n      fontSize: 24,\n      fontStyle: 'normal',\n      fontWeight: 500,\n      lineHeight: '28px'\n    }\n  }\n}))(DialogTitle);\n\nexport const SFDialogContent = withStyles(() => ({\n  root: {\n    padding: '0 36px'\n  }\n}))(DialogContent);\n\nexport const SFDialogContentText = withStyles((theme: Theme) => ({\n  root: {\n    color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`,\n    fontSize: 16,\n    fontStyle: 'normal',\n    fontWeight: 400,\n    lineHeight: '24px'\n  }\n}))(DialogContentText);\n\nexport const SFDialogActions = withStyles(() => ({\n  root: {\n    padding: '24px 36px 36px',\n    display: 'flex',\n    gap: '17px'\n  }\n}))(DialogActions);\n\nconst StyledDialog = withStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: `${\n      theme.palette.type === 'light'\n        ? 'rgba(0, 0, 0, 0.3)'\n        : hexToRgba(SFGrey.A400 as string, 0.8)\n    }`\n  }\n}))(Dialog);\n\nexport interface SFDialogProps extends DialogProps {\n  disableBackdropClick?: boolean;\n}\n\nexport const SFDialog = ({\n  disableBackdropClick = true,\n  children,\n  onClose,\n  transitionDuration = 360,\n  ...props\n}: SFDialogProps): React.ReactElement<SFDialogProps> => {\n  const checkCloseReason = (\n    e: Record<string, unknown>,\n    reason: 'backdropClick' | 'escapeKeyDown'\n  ): void => {\n    if (disableBackdropClick) {\n      if (reason !== ('backdropClick' || 'escapeKeyDown')) {\n        onClose && onClose(e, reason);\n      }\n    } else {\n      onClose && onClose(e, reason);\n    }\n  };\n\n  return (\n    <StyledDialog\n      {...props}\n      transitionDuration={transitionDuration}\n      onClose={checkCloseReason}\n    >\n      {children}\n    </StyledDialog>\n  );\n};\n","import { withStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { SFGrey } from '../../../SFColors/SFColors';\n\nexport interface ButtonMixinProps {\n  contained: {\n    light: {\n      color: string;\n      backgroundColor: string;\n      backgroundColorHover: string;\n      backgroundColorActive: string;\n      backgroundColorDisabled: string;\n    };\n    dark: {\n      color: string;\n      backgroundColor: string;\n      backgroundColorHover: string;\n      backgroundColorActive: string;\n      backgroundColorDisabled: string;\n    };\n  };\n  outlined: {\n    light: {\n      color: string;\n      colorHover: string;\n      colorActive: string;\n      backgroundColor: string;\n      backgroundColorHover: string;\n      backgroundColorActive: string;\n      backgroundColorDisabled: string;\n      borderColor: string;\n      borderColorHover: string;\n      borderColorActive: string;\n    };\n    dark: {\n      color: string;\n      colorHover: string;\n      colorActive: string;\n      backgroundColor: string;\n      backgroundColorHover: string;\n      backgroundColorActive: string;\n      backgroundColorDisabled: string;\n      borderColor: string;\n      borderColorHover: string;\n      borderColorActive: string;\n    };\n  };\n  text: {\n    light: {\n      color: string;\n      colorHover: string;\n      colorActive: string;\n      backgroundColor: string;\n      backgroundColorHover: string;\n      backgroundColorActive: string;\n      backgroundColorDisabled: string;\n    };\n    dark: {\n      color: string;\n      colorHover: string;\n      colorActive: string;\n      backgroundColor: string;\n      backgroundColorHover: string;\n      backgroundColorActive: string;\n      backgroundColorDisabled: string;\n    };\n  };\n}\n\n// TODO: Fix this 'any' return type\nexport default function ButtonMixin(sfButtonConfig: ButtonMixinProps): any {\n  return withStyles((theme: Theme) => ({\n    root: {\n      color: sfButtonConfig.contained[theme.palette.type].color,\n      backgroundColor:\n        sfButtonConfig.contained[theme.palette.type].backgroundColor,\n      '@media (hover: hover)': {\n        '&:hover': {\n          backgroundColor:\n            sfButtonConfig.contained[theme.palette.type].backgroundColorHover\n        },\n        '&:active': {\n          backgroundColor:\n            sfButtonConfig.contained[theme.palette.type].backgroundColorActive\n        }\n      },\n      '@media (hover: none)': {\n        '&:hover': {\n          color: sfButtonConfig.contained[theme.palette.type].color,\n          backgroundColor:\n            sfButtonConfig.contained[theme.palette.type].backgroundColor\n        },\n        '&:active': {\n          backgroundColor:\n            sfButtonConfig.contained[theme.palette.type].backgroundColorActive\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600],\n        backgroundColor:\n          theme.palette.type === 'light' ? SFGrey[100] : SFGrey[800]\n      },\n      '& .MuiCircularProgress-circle': {\n        color: sfButtonConfig.contained[theme.palette.type].color\n      }\n    },\n    outlined: {\n      color: sfButtonConfig.outlined[theme.palette.type].color,\n      borderColor: sfButtonConfig.outlined[theme.palette.type].borderColor,\n      backgroundColor:\n        sfButtonConfig.outlined[theme.palette.type].backgroundColor,\n      '@media (hover: hover)': {\n        '&:hover': {\n          color: sfButtonConfig.outlined[theme.palette.type].colorHover,\n          borderColor:\n            sfButtonConfig.outlined[theme.palette.type].borderColorHover,\n          backgroundColor:\n            sfButtonConfig.outlined[theme.palette.type].backgroundColorHover\n        },\n        '&:active': {\n          color: sfButtonConfig.outlined[theme.palette.type].colorActive,\n          borderColor:\n            sfButtonConfig.outlined[theme.palette.type].borderColorActive,\n          backgroundColor:\n            sfButtonConfig.outlined[theme.palette.type].backgroundColorActive\n        }\n      },\n      '@media (hover: none)': {\n        '&:hover': {\n          color: sfButtonConfig.outlined[theme.palette.type].color,\n          borderColor: sfButtonConfig.outlined[theme.palette.type].borderColor,\n          backgroundColor:\n            sfButtonConfig.outlined[theme.palette.type].backgroundColor\n        },\n        '&:active': {\n          color: sfButtonConfig.outlined[theme.palette.type].colorActive,\n          borderColor:\n            sfButtonConfig.outlined[theme.palette.type].borderColorActive,\n          backgroundColor:\n            sfButtonConfig.outlined[theme.palette.type].backgroundColorActive\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600],\n        backgroundColor: 'transparent',\n        borderColor: theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n      },\n      '& .MuiCircularProgress-circle': {\n        color: sfButtonConfig.outlined[theme.palette.type].color\n      }\n    },\n    text: {\n      color: sfButtonConfig.text[theme.palette.type].color,\n      backgroundColor: sfButtonConfig.text[theme.palette.type].backgroundColor,\n      border: 'none',\n      '@media (hover: hover)': {\n        '&:hover': {\n          color: sfButtonConfig.text[theme.palette.type].colorHover,\n          backgroundColor:\n            sfButtonConfig.text[theme.palette.type].backgroundColorHover,\n          border: 'none'\n        },\n        '&:active': {\n          color: sfButtonConfig.text[theme.palette.type].colorActive,\n          backgroundColor:\n            sfButtonConfig.text[theme.palette.type].backgroundColorActive,\n          border: 'none'\n        }\n      },\n      '@media (hover: none)': {\n        '&:hover': {\n          color: sfButtonConfig.text[theme.palette.type].color,\n          backgroundColor:\n            sfButtonConfig.text[theme.palette.type].backgroundColor,\n          border: 'none'\n        },\n        '&:active': {\n          color: sfButtonConfig.text[theme.palette.type].colorActive,\n          backgroundColor:\n            sfButtonConfig.text[theme.palette.type].backgroundColorActive,\n          border: 'none'\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600],\n        backgroundColor: 'transparent',\n        borderColor: 'none'\n      },\n      '& .MuiCircularProgress-circle': {\n        color: sfButtonConfig.text[theme.palette.type].color\n      }\n    },\n    disabled: {\n      color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600],\n      backgroundColor:\n        theme.palette.type === 'light' ? SFGrey[100] : SFGrey[800],\n      '& .MuiCircularProgress-circle': {\n        color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600]\n      }\n    },\n    label: {\n      display: 'flex',\n      gap: '6px'\n    }\n  }))(Button);\n}\n","import ButtonMixin, { ButtonMixinProps } from './ButtonMixin';\nimport { SFBlue, SFGrey } from '../../../SFColors/SFColors';\n\nconst sfButtonConfig: ButtonMixinProps = {\n  contained: {\n    light: {\n      color: '#FFFFFF',\n      backgroundColor: SFBlue[500],\n      backgroundColorHover: SFBlue[700],\n      backgroundColorActive: SFBlue[800],\n      backgroundColorDisabled: SFGrey[100]\n    },\n    dark: {\n      color: '#1A1A1A',\n      backgroundColor: SFBlue[200],\n      backgroundColorHover: SFBlue[300],\n      backgroundColorActive: SFBlue[400],\n      backgroundColorDisabled: SFGrey[800]\n    }\n  },\n  outlined: {\n    light: {\n      color: SFBlue[500],\n      colorHover: SFBlue[700],\n      colorActive: SFBlue[800],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(204, 235, 255, 0.4)',\n      backgroundColorActive: 'rgba(204, 235, 255, 0.6)',\n      backgroundColorDisabled: SFGrey[100],\n      borderColor: SFBlue[500],\n      borderColorHover: SFBlue[700],\n      borderColorActive: SFBlue[800]\n    },\n    dark: {\n      color: SFBlue[200],\n      colorHover: SFBlue[300],\n      colorActive: SFBlue[400],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(128, 198, 255, 0.2)',\n      backgroundColorActive: 'rgba(128, 198, 255, 0.1)',\n      backgroundColorDisabled: SFGrey[800],\n      borderColor: SFBlue[200],\n      borderColorHover: SFBlue[300],\n      borderColorActive: SFBlue[400]\n    }\n  },\n  text: {\n    light: {\n      color: SFBlue[500],\n      colorHover: SFBlue[700],\n      colorActive: SFBlue[800],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(204, 235, 255, 0.4)',\n      backgroundColorActive: 'rgba(204, 235, 255, 0.6)',\n      backgroundColorDisabled: SFGrey[100]\n    },\n    dark: {\n      color: SFBlue[200],\n      colorHover: SFBlue[300],\n      colorActive: SFBlue[400],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(128, 198, 255, 0.2)',\n      backgroundColorActive: 'rgba(128, 198, 255, 0.1)',\n      backgroundColorDisabled: SFGrey[800]\n    }\n  }\n};\n\nconst BlueButton = ButtonMixin(sfButtonConfig);\n\nexport default BlueButton;\n","import ButtonMixin, { ButtonMixinProps } from './ButtonMixin';\nimport { SFRed, SFGrey } from '../../../SFColors/SFColors';\n\nconst sfButtonConfig: ButtonMixinProps = {\n  contained: {\n    light: {\n      color: '#FFFFFF',\n      backgroundColor: SFRed[700],\n      backgroundColorHover: SFRed[800],\n      backgroundColorActive: SFRed[900],\n      backgroundColorDisabled: SFGrey[100]\n    },\n    dark: {\n      color: '#1A1A1A',\n      backgroundColor: SFRed[200],\n      backgroundColorHover: SFRed[300],\n      backgroundColorActive: SFRed[400],\n      backgroundColorDisabled: SFGrey[800]\n    }\n  },\n  outlined: {\n    light: {\n      color: SFRed[700],\n      colorHover: SFRed[800],\n      colorActive: SFRed[900],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(249, 220, 222, 0.4)',\n      backgroundColorActive: 'rgba(249, 220, 222, 0.7)',\n      backgroundColorDisabled: SFGrey[100],\n      borderColor: SFRed[700],\n      borderColorHover: SFRed[800],\n      borderColorActive: SFRed[900]\n    },\n    dark: {\n      color: SFRed[200],\n      colorHover: SFRed[300],\n      colorActive: SFRed[400],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(240, 168, 173, 0.2)',\n      backgroundColorActive: 'rgba(240, 168, 173, 0.1)',\n      backgroundColorDisabled: SFGrey[800],\n      borderColor: SFRed[200],\n      borderColorHover: SFRed[300],\n      borderColorActive: SFRed[400]\n    }\n  },\n  text: {\n    light: {\n      color: SFRed[700],\n      colorHover: SFRed[800],\n      colorActive: SFRed[900],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(249, 220, 222, 0.4)',\n      backgroundColorActive: 'rgba(249, 220, 222, 0.7)',\n      backgroundColorDisabled: SFGrey[100]\n    },\n    dark: {\n      color: SFRed[200],\n      colorHover: SFRed[300],\n      colorActive: SFRed[400],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(240, 168, 173, 0.2)',\n      backgroundColorActive: 'rgba(240, 168, 173, 0.1)',\n      backgroundColorDisabled: SFGrey[800]\n    }\n  }\n};\n\nconst RedButton = ButtonMixin(sfButtonConfig);\n\nexport default RedButton;\n","import ButtonMixin, { ButtonMixinProps } from './ButtonMixin';\nimport { SFGrey } from '../../../SFColors/SFColors';\n\nconst sfButtonConfig: ButtonMixinProps = {\n  contained: {\n    light: {\n      color: '#1A1A1A',\n      backgroundColor: SFGrey[100],\n      backgroundColorHover: SFGrey[200],\n      backgroundColorActive: SFGrey[300],\n      backgroundColorDisabled: SFGrey[100]\n    },\n    dark: {\n      color: '#F2F2F2',\n      backgroundColor: SFGrey[500],\n      backgroundColorHover: SFGrey[600],\n      backgroundColorActive: SFGrey[700],\n      backgroundColorDisabled: SFGrey[800]\n    }\n  },\n  outlined: {\n    light: {\n      color: '#1A1A1A',\n      colorHover: SFGrey[900],\n      colorActive: SFGrey[900],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(204, 204, 204, 0.3)',\n      backgroundColorActive: 'rgba(204, 204, 204, 0.5)',\n      backgroundColorDisabled: SFGrey[100],\n      borderColor: SFGrey[400],\n      borderColorHover: SFGrey[600],\n      borderColorActive: SFGrey[800]\n    },\n    dark: {\n      color: '#F2F2F2',\n      colorHover: SFGrey[50],\n      colorActive: SFGrey[50],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(128, 128, 128, 0.3)',\n      backgroundColorActive: 'rgba(128, 128, 128, 0.2)',\n      backgroundColorDisabled: SFGrey[800],\n      borderColor: SFGrey[500],\n      borderColorHover: SFGrey[600],\n      borderColorActive: SFGrey[700]\n    }\n  },\n  text: {\n    light: {\n      color: '#1A1A1A',\n      colorHover: SFGrey[900],\n      colorActive: SFGrey[900],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(204, 204, 204, 0.3)',\n      backgroundColorActive: 'rgba(204, 204, 204, 0.5)',\n      backgroundColorDisabled: SFGrey[100]\n    },\n    dark: {\n      color: '#F2F2F2',\n      colorHover: SFGrey[50],\n      colorActive: SFGrey[50],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(128, 128, 128, 0.3)',\n      backgroundColorActive: 'rgba(128, 128, 128, 0.2)',\n      backgroundColorDisabled: SFGrey[800]\n    }\n  }\n};\n\nconst GreyButton = ButtonMixin(sfButtonConfig);\n\nexport default GreyButton;\n","import * as React from 'react';\nimport { ButtonProps } from '@material-ui/core/Button';\n\nimport BlueButton from './CustomButtons/BlueButton';\nimport RedButton from './CustomButtons/RedButton';\nimport GreyButton from './CustomButtons/GreyButton';\nimport { CircularProgress } from '@material-ui/core';\n\ninterface ButtonInnerProps {\n  padding?: string;\n  size?: string;\n  lineHeight?: string;\n  height?: string;\n}\n\nconst spinnerSizes = {\n  small: 22,\n  medium: 24,\n  large: 26\n};\n\nconst getButtonInnerProps = (size?: string): ButtonInnerProps => {\n  const result: ButtonInnerProps = {};\n  switch (size) {\n    case 'small':\n      result.padding = '4px 10px';\n      result.size = '13px';\n      result.lineHeight = '22px';\n      result.height = '30px';\n      break;\n    case 'large':\n      result.padding = '8px 22px';\n      result.size = '15px';\n      result.lineHeight = '26px';\n      result.height = '42px';\n      break;\n    default:\n      result.padding = '6px 16px';\n      result.size = '14px';\n      result.lineHeight = '24px';\n      result.height = '36px';\n      break;\n  }\n  return result;\n};\n\nexport interface SFButtonProps extends ButtonProps {\n  sfColor?: 'blue' | 'red' | 'grey';\n  isLoading?: boolean;\n}\n\nexport const SFButton = ({\n  variant = 'contained',\n  color,\n  size = 'medium',\n  sfColor = 'blue',\n  isLoading = false,\n  onClick,\n  children,\n  ...props\n}: SFButtonProps): React.ReactElement<SFButtonProps> => {\n  const ButtonInnerProps: ButtonInnerProps = getButtonInnerProps(size);\n  const ButtonInnerStyle = {\n    padding: ButtonInnerProps.padding,\n    fontSize: ButtonInnerProps.size,\n    lineHeight: ButtonInnerProps.lineHeight,\n    height: ButtonInnerProps.height\n  };\n\n  const Buttons = {\n    grey: GreyButton,\n    blue: BlueButton,\n    red: RedButton\n  };\n\n  const ButtonComponent = Buttons[sfColor];\n\n  return (\n    <ButtonComponent\n      {...props}\n      variant={variant}\n      disableElevation\n      disableRipple\n      style={ButtonInnerStyle}\n      onClick={!isLoading ? onClick : undefined}\n    >\n      {isLoading && (\n        <CircularProgress size={spinnerSizes[size]} variant='indeterminate' />\n      )}\n      {children}\n    </ButtonComponent>\n  );\n};\n","import React from 'react';\nimport {\n  SFDialog,\n  SFDialogProps,\n  SFDialogActions,\n  SFDialogContent,\n  SFDialogContentText,\n  SFDialogTitle\n} from '../SFDialog/SFDialog';\nimport { SFButton, SFButtonProps } from '../SFButton/SFButton';\n\nexport interface SFAlertDialogProps extends SFDialogProps {\n  title: string;\n  content: string;\n  leftAction?: SFAlertDialogAction;\n  rightAction?: SFAlertDialogAction;\n}\n\nexport interface SFAlertDialogAction {\n  label: string;\n  buttonProps?: SFButtonProps;\n}\n\nexport const SFAlertDialog = ({\n  title,\n  content,\n  leftAction,\n  rightAction,\n  children,\n  ...props\n}: SFAlertDialogProps): React.ReactElement<SFAlertDialogProps> => {\n  return (\n    <div>\n      <SFDialog {...props}>\n        <SFDialogTitle>{title}</SFDialogTitle>\n\n        <SFDialogContent>\n          <SFDialogContentText>{content}</SFDialogContentText>\n\n          {children}\n        </SFDialogContent>\n\n        <SFDialogActions>\n          {leftAction && (\n            <SFButton sfColor='grey' variant='text' {...leftAction.buttonProps}>\n              {leftAction.label}\n            </SFButton>\n          )}\n\n          {rightAction && (\n            <SFButton sfColor='blue' {...rightAction.buttonProps}>\n              {rightAction.label}\n            </SFButton>\n          )}\n        </SFDialogActions>\n      </SFDialog>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport TextField, { OutlinedTextFieldProps } from '@material-ui/core/TextField';\nimport { SFGrey, SFRed, SFBlue } from '../../SFColors/SFColors';\n\nconst StyledTextField = withStyles((theme: Theme) => ({\n  root: {\n    '& .MuiInputBase-root': {\n      backgroundColor: theme.palette.background.paper,\n      height: '56px',\n      boxSizing: 'border-box',\n\n      '&.Mui-focused': {\n        '& .MuiOutlinedInput-notchedOutline': {\n          border: `2px solid ${theme.palette.primary.main}`\n        },\n\n        '&.Mui-error': {\n          '& .MuiOutlinedInput-notchedOutline': {\n            border: `1px solid ${\n              theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n            }`\n          }\n        }\n      },\n\n      '&.Mui-error': {\n        '& .MuiOutlinedInput-notchedOutline': {\n          border: `1px solid ${\n            theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n          }`\n        }\n      },\n\n      '&.Mui-disabled': {\n        '& .MuiInputBase-input': {\n          color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600]\n        }\n      },\n\n      '&:hover': {\n        '@media (hover: hover)': {\n          '& .MuiOutlinedInput-notchedOutline': {\n            border: `1px solid ${\n              theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n            }`\n          },\n\n          '&.Mui-disabled': {\n            '& .MuiOutlinedInput-notchedOutline': {\n              border: `1px solid ${\n                theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n              }`\n            }\n          }\n        }\n      },\n\n      '& .MuiInputBase-input': {\n        padding: '27px 13px 5px',\n        color: theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50],\n\n        '&:focus': {\n          backgroundColor: 'transparent'\n        }\n      },\n\n      '& .MuiInputBase-inputMultiline': {\n        padding: '30px 13px 3px'\n      },\n\n      '&.MuiOutlinedInput-root': {\n        '&:after, &:before': {\n          content: 'none !important'\n        }\n      },\n\n      '&.MuiOutlinedInput-multiline': {\n        padding: '30px 12px 8px',\n        height: 'auto',\n\n        '& .MuiInputBase-inputMultiline': {\n          padding: '0'\n        }\n      },\n\n      '& .MuiOutlinedInput-notchedOutline': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n        }`,\n        borderRadius: 2,\n\n        '& > legend': {\n          transition: 'none',\n          maxWidth: '0px'\n        }\n      }\n    },\n\n    '& .MuiInputLabel-outlined': {\n      fontSize: '16px',\n      lineHeight: '24px',\n      color: theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400],\n      transform: 'translate(14px, 16px) scale(1)',\n\n      '&.MuiInputLabel-shrink': {\n        fontSize: '14px',\n        lineHeight: '20px',\n        transform: `translate(12px, 6px)`\n      },\n\n      '&.Mui-focused': {\n        color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n      },\n\n      '&.Mui-error': {\n        color: theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n      },\n\n      '&.Mui-disabled': {\n        color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600]\n      }\n    },\n\n    '& .MuiFormHelperText-root': {\n      margin: '5px 13px 0px',\n      lineHeight: '12px',\n      fontSize: '10px',\n\n      '&.Mui-error': {\n        color: theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n      }\n    }\n  }\n}))(TextField);\n\nexport interface SFTextFieldProps extends Partial<OutlinedTextFieldProps> {}\n\nexport const SFTextField = ({\n  variant,\n  autoComplete = 'off',\n  rows = 4,\n  color,\n  ...props\n}: SFTextFieldProps): React.ReactElement<SFTextFieldProps> => {\n  return (\n    <StyledTextField\n      {...props}\n      fullWidth\n      color='primary'\n      variant='outlined'\n      rows={props.multiline ? rows : 1}\n      autoComplete={autoComplete}\n    />\n  );\n};\n","import * as React from 'react';\nimport { Theme, withStyles, makeStyles } from '@material-ui/core/styles';\nimport {\n  Autocomplete,\n  AutocompleteProps,\n  AutocompleteInputChangeReason,\n  AutocompleteChangeReason,\n  AutocompleteCloseReason,\n  AutocompleteRenderInputParams\n} from '@material-ui/lab';\nimport { SFMenuOption } from '../SFSelect/SFSelect';\nimport { SFTextField } from '../SFTextField/SFTextField';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { SFGrey, SFSurfaceLight } from '../../SFColors/SFColors';\nimport { hexToRgba } from '../../Helpers';\n\nconst isOption = (value: string, options: SFMenuOption[]): boolean => {\n  if (options.find((option: SFMenuOption) => value === option.value)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst StyledAutocomplete = withStyles((theme: Theme) => ({\n  inputRoot: {\n    '&[class*=\"MuiOutlinedInput-root\"]': {\n      paddingTop: '20px',\n\n      '& input.MuiAutocomplete-input:first-child': {\n        padding: '9.5px 4px'\n      },\n\n      '& .MuiAutocomplete-endAdornment': {\n        right: '18px'\n      }\n    }\n  },\n  endAdornment: {\n    marginTop: '-3px',\n    '& button': {\n      padding: '9px',\n      '&:hover': {\n        '@media (hover: hover)': {\n          backgroundColor:\n            theme.palette.type === 'light'\n              ? hexToRgba(SFGrey.A100 as string, 0.3)\n              : hexToRgba(SFGrey[500] as string, 0.3)\n        }\n      },\n      '&:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey.A100 as string, 0.5)\n            : hexToRgba(SFGrey[500] as string, 0.5)\n      }\n    }\n  },\n  listbox: {\n    padding: '13px 0',\n    backgroundColor:\n      theme.palette.type === 'light' ? SFSurfaceLight : SFGrey[800]\n  },\n  option: {\n    padding: '6px 24px',\n\n    '&[data-focus=\"true\"]': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.3)\n          : hexToRgba(SFGrey[500] as string, 0.3),\n      '&:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey.A100 as string, 0.5)\n            : hexToRgba(SFGrey[500] as string, 0.5)\n      }\n    },\n\n    '&[aria-selected=\"true\"]': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.5)\n          : hexToRgba(SFGrey[500] as string, 0.5)\n    }\n  }\n}))(Autocomplete);\n\nconst useStyles = makeStyles({\n  root: {\n    '& button.MuiAutocomplete-popupIndicator': {\n      display: (props: Partial<SFAutocompleteProps>): string =>\n        props.hasPopupIcon ? 'inline-flex' : 'none',\n      padding: (props: Partial<SFAutocompleteProps>): string =>\n        props.hasPopupIcon ? '9px' : '0'\n    }\n  }\n});\n\nexport type SFAutocompleteInputChangeReason = AutocompleteInputChangeReason;\nexport type SFAutocompleteChangeReason = AutocompleteChangeReason;\nexport type SFAutocompleteCloseReason = AutocompleteCloseReason;\n\nexport interface SFAutocompleteProps\n  extends Omit<\n    AutocompleteProps<\n      SFMenuOption,\n      boolean | undefined,\n      boolean | undefined,\n      boolean | undefined\n    >,\n    'renderInput' | 'onChange' | 'onInputChange'\n  > {\n  label: string;\n  required?: boolean;\n  options: SFMenuOption[];\n  hasPopupIcon?: boolean;\n  allowEmpty?: boolean;\n  value?: string;\n  onChange: (value: string) => void;\n}\n\nexport const SFAutocomplete = ({\n  label,\n  required = false,\n  hasPopupIcon = false,\n  allowEmpty = false,\n  value,\n  ...props\n}: SFAutocompleteProps): React.ReactElement<SFAutocompleteProps> => {\n  const classes = useStyles({ hasPopupIcon });\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n\n  let initInputValue = '';\n  if (value && isOption(value, props.options)) {\n    initInputValue = value;\n  }\n\n  const [inputValue, setInputValue] = React.useState<string>(initInputValue);\n\n  const onInputChange = (\n    _event: React.ChangeEvent,\n    value: string,\n    reason: AutocompleteInputChangeReason\n  ): void => {\n    if (reason !== 'reset') {\n      setInputValue(value);\n\n      if (!isOpen && value.length > 0) {\n        setIsOpen(true);\n      } else if (isOpen && value.length === 0) {\n        setIsOpen(false);\n      }\n\n      if (props.freeSolo) {\n        props.onChange(value);\n      }\n    }\n  };\n\n  const onChange = (\n    _event: React.ChangeEvent,\n    option: SFMenuOption,\n    reason: AutocompleteChangeReason\n  ): void => {\n    setIsOpen(false);\n\n    if (reason !== 'create-option' && reason !== 'remove-option') {\n      setInputValue(option ? option.value : '');\n      props.onChange(option ? option.value : '');\n    }\n  };\n\n  const onOpen = (event: React.ChangeEvent): void => {\n    event.persist();\n\n    // If reason of open is click on button\n    if (event.type === 'click') {\n      setIsOpen(!isOpen);\n    }\n  };\n\n  const onClose = (\n    event: React.ChangeEvent,\n    reason: SFAutocompleteCloseReason\n  ): void => {\n    event.persist();\n\n    if (isOpen) {\n      setIsOpen(false);\n\n      if (props.onClose) {\n        props.onClose(event, reason);\n      }\n    }\n  };\n\n  let options: SFMenuOption[] = [...props.options];\n\n  if (allowEmpty) {\n    options = [...options, { label: '', value: '' }];\n  }\n\n  return (\n    <StyledAutocomplete\n      className={`${classes.root} ${props.className || ''}`}\n      {...props}\n      value={value}\n      open={isOpen}\n      openOnFocus={false}\n      options={options}\n      onChange={onChange}\n      onInputChange={onInputChange}\n      onClose={onClose}\n      onOpen={onOpen}\n      inputValue={inputValue}\n      getOptionSelected={(\n        option: SFMenuOption,\n        value: SFMenuOption | string\n      ): boolean => {\n        return typeof value === 'string'\n          ? value === option.value\n          : value.value === option.value;\n      }}\n      getOptionLabel={(option: SFMenuOption): string =>\n        typeof option === 'string' ? option : option.label\n      }\n      renderInput={(params: AutocompleteRenderInputParams): React.ReactNode => (\n        <SFTextField {...params} label={label} required={required} />\n      )}\n      popupIcon={<SFIcon icon='Down-2' size={16} />}\n      closeIcon={<SFIcon icon='Close' size={16} />}\n    />\n  );\n};\n","import React from 'react';\nimport { Theme, withStyles, makeStyles } from '@material-ui/core/styles';\nimport { Autocomplete, AutocompleteRenderInputParams } from '@material-ui/lab';\nimport throttle from 'lodash.throttle';\nimport parse from 'autosuggest-highlight/parse';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { SFTextField } from '../SFTextField/SFTextField';\nimport { SFGrey, SFSurfaceLight } from '../../SFColors/SFColors';\nimport { hexToRgba } from '../../Helpers';\n\ninterface GeolocationPosition {\n  coords: {\n    latitude: number;\n    longitude: number;\n  };\n}\n\ninterface TextPart {\n  text: string;\n  highlight: boolean;\n}\n\nconst StyledAutocomplete = withStyles((theme: Theme) => ({\n  inputRoot: {\n    '&[class*=\"MuiOutlinedInput-root\"]': {\n      paddingTop: '20px',\n\n      '& input.MuiAutocomplete-input:first-child': {\n        padding: '9.5px 4px'\n      },\n\n      '& .MuiAutocomplete-endAdornment': {\n        right: '18px'\n      }\n    }\n  },\n  endAdornment: {\n    marginTop: '-3px'\n  },\n  popupIndicator: {\n    padding: 0\n  },\n  clearIndicator: {\n    padding: '9px',\n    '&:hover': {\n      '@media (hover: hover)': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey.A100 as string, 0.3)\n            : hexToRgba(SFGrey[500] as string, 0.3)\n      }\n    },\n    '&:active': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.5)\n          : hexToRgba(SFGrey[500] as string, 0.5)\n    }\n  },\n  listbox: {\n    padding: '13px 0',\n    backgroundColor:\n      theme.palette.type === 'light' ? SFSurfaceLight : SFGrey[800]\n  },\n  option: {\n    padding: '6px 24px',\n\n    '&[data-focus=\"true\"]': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.3)\n          : hexToRgba(SFGrey[500] as string, 0.3),\n      '&:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey.A100 as string, 0.5)\n            : hexToRgba(SFGrey[500] as string, 0.5)\n      }\n    },\n\n    '&[aria-selected=\"true\"]': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.5)\n          : hexToRgba(SFGrey[500] as string, 0.5)\n    }\n  }\n}))(Autocomplete);\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  menu: {\n    display: 'grid',\n    gridTemplateColumns: 'auto 1fr',\n    gap: '15px',\n    alignItems: 'center'\n  },\n  itemText: {\n    fontSize: '16px',\n    lineHeight: '24px',\n    color: theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n  },\n  textHighlight: {\n    fontWeight: 700\n  },\n  itemSecondaryText: {\n    fontSize: '12px',\n    lineHeight: '14px',\n    color: theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]\n  }\n}));\n\nexport interface SFAutocompleteLocationResult {\n  text: string;\n  placeId?: string;\n}\n\nexport interface SFAutocompleteLocationProps {\n  label: string;\n  value: SFAutocompleteLocationResult;\n  disabled?: boolean;\n  required?: boolean;\n  currentLocation?: boolean;\n  currentLocationType?: 'address' | 'route';\n  onChange: (value: SFAutocompleteLocationResult) => void;\n}\n\nexport const SFAutocompleteLocation = ({\n  label,\n  value,\n  disabled = false,\n  required = false,\n  currentLocation = false,\n  currentLocationType = 'route',\n  onChange\n}: SFAutocompleteLocationProps): React.ReactElement<SFAutocompleteLocationResult> => {\n  const classes = useStyles();\n  const autocompleteService = React.useRef<google.maps.places.AutocompleteService>();\n  const geocoderService = React.useRef<google.maps.Geocoder>();\n\n  const [apiLoaded, setApiLoaded] = React.useState<boolean>(false);\n\n  const [selectedOption, setSelectedOption] = React.useState<\n    Partial<google.maps.places.AutocompletePrediction>\n  >({});\n\n  const [options, setOptions] = React.useState<\n    google.maps.places.AutocompletePrediction[]\n  >([]);\n\n  const getPredictions = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        if (autocompleteService.current) {\n          autocompleteService.current.getPlacePredictions(request, callback);\n        }\n      }, 200),\n    []\n  );\n\n  const fetchOptions = (): void =>\n    getPredictions(\n      { input: value.text },\n      (results: google.maps.places.AutocompletePrediction[]) => {\n        setOptions(results || []);\n      }\n    );\n\n  React.useEffect(() => {\n    // Check if Google API it's loaded\n    if (\n      window.google &&\n      typeof window.google === 'object' &&\n      typeof window.google.maps === 'object'\n    ) {\n      setApiLoaded(true);\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n\n      if (\n        (!value || !value.text || value.text.length === 0) &&\n        currentLocation &&\n        navigator.geolocation\n      ) {\n        geocoderService.current = new google.maps.Geocoder();\n\n        const onLocationError = (): void =>\n          console.error(\"Can't get GeolocationPosition: \");\n\n        const onLocationSuccess = (pos: GeolocationPosition): void => {\n          const latlng = {\n            lat: pos.coords.latitude,\n            lng: pos.coords.longitude\n          };\n\n          if (geocoderService.current) {\n            geocoderService.current.geocode(\n              { location: latlng },\n              (\n                results: google.maps.GeocoderResult[],\n                status: google.maps.GeocoderStatus\n              ) => {\n                if (status === 'OK') {\n                  const locationType = `${\n                    currentLocationType === 'address' ? 'street_' : ''\n                  }${currentLocationType}`;\n\n                  const result:\n                    | google.maps.GeocoderResult\n                    | undefined = results.find(\n                    (result: google.maps.GeocoderResult) => {\n                      return result.types.indexOf(locationType) !== -1;\n                    }\n                  );\n\n                  if (result) {\n                    setSelectedOption({\n                      description: result.formatted_address,\n                      // eslint-disable-next-line\n                      place_id: result.place_id\n                    });\n\n                    onChange({\n                      text: result.formatted_address,\n                      placeId: result.place_id\n                    });\n                  } else {\n                    console.error('Geocoder: no results found');\n                  }\n                } else {\n                  console.error('Geocoder: failed due to: ' + status);\n                }\n              }\n            );\n          }\n        };\n\n        navigator.geolocation.getCurrentPosition(\n          onLocationSuccess,\n          onLocationError\n        );\n      } else if (value.text && value.text.length > 0) {\n        fetchOptions();\n      }\n    } else {\n      console.error('Google API is not loaded');\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (value.text && value.text.length > 0) {\n      fetchOptions();\n    } else {\n      setOptions([]);\n    }\n  }, [value]);\n\n  const renderInput = (\n    params: AutocompleteRenderInputParams\n  ): React.ReactNode => (\n    <SFTextField {...params} required={required} label={label} />\n  );\n\n  const onAutocompleteChange = (\n    _event: React.ChangeEvent,\n    newValue: google.maps.places.AutocompletePrediction\n  ): void => {\n    if (newValue) {\n      setSelectedOption(newValue);\n      onChange({\n        text: newValue.description,\n        placeId: newValue.place_id\n      });\n    }\n  };\n\n  const onInputChange = (\n    _event: React.ChangeEvent,\n    newValue: string,\n    reason: string\n  ): void => {\n    if (reason !== 'reset') {\n      onChange({ text: newValue });\n    }\n  };\n\n  const getOptionLabel = (\n    option: google.maps.places.AutocompletePrediction\n  ): string => option.description || '';\n\n  const renderOption = (\n    option: google.maps.places.AutocompletePrediction\n  ): React.ReactNode => {\n    let matches: google.maps.places.PredictionSubstring[] = [];\n    let parts: TextPart[] = [];\n\n    if (option.structured_formatting) {\n      matches = option.structured_formatting.main_text_matched_substrings;\n      parts = parse(\n        option.structured_formatting.main_text,\n        matches.map((match: google.maps.places.PredictionSubstring) => [\n          match.offset,\n          match.offset + match.length\n        ])\n      );\n    }\n\n    return (\n      <div className={classes.menu}>\n        <SFIcon icon='Loction-1' />\n\n        <div className={classes.itemText}>\n          {parts.map((part, index) => (\n            <span\n              key={index}\n              className={part.highlight ? classes.textHighlight : ''}\n            >\n              {part.text}\n            </span>\n          ))}\n\n          <br />\n\n          <span className={classes.itemSecondaryText}>\n            {option.structured_formatting &&\n              option.structured_formatting.secondary_text}\n          </span>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <StyledAutocomplete\n      freeSolo\n      disabled={disabled || !apiLoaded}\n      options={options}\n      renderInput={renderInput}\n      popupIcon={null}\n      closeIcon={<SFIcon icon='Close' size='16' />}\n      value={selectedOption}\n      inputValue={value.text}\n      onChange={onAutocompleteChange}\n      onInputChange={onInputChange}\n      getOptionLabel={getOptionLabel}\n      renderOption={renderOption}\n    />\n  );\n};\n","import * as React from 'react';\nimport { CircularProgress, CircularProgressProps } from '@material-ui/core';\n\nexport interface SFSpinnerProps extends CircularProgressProps {}\n\nexport const SFSpinner = ({\n  ...props\n}: SFSpinnerProps): React.ReactElement<SFSpinnerProps> => {\n  return (\n    <CircularProgress {...props} color='primary' variant='indeterminate' />\n  );\n};\n","import React from 'react';\n\nimport { Badge, BadgeProps } from '@material-ui/core';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport {\n  SFCommonBlack,\n  SFCommonWhite,\n  SFRedMainDark,\n  SFRedMainLight\n} from '../..';\n\nconst StyledBadge = withStyles((theme: Theme) => ({\n  root: {\n    '&.small': {\n      '& .MuiBadge-badge': {\n        minWidth: 'unset',\n        width: '17px',\n        height: '17px'\n      }\n    },\n\n    '&.medium': {\n      '& .MuiBadge-badge': {\n        width: '21px',\n        height: '21px'\n      }\n    }\n  },\n  badge: {\n    backgroundColor:\n      theme.palette.type === 'light' ? SFRedMainLight : SFRedMainDark,\n    padding: 0,\n    fontWeight: 900,\n    fontSize: '12px',\n    lineHeight: '14px',\n    color: theme.palette.type === 'light' ? SFCommonWhite : SFCommonBlack,\n    boxShadow:\n      '0px 2px 1px -1px rgba(0, 0, 0, 0.02), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 1px 3px rgba(0, 0, 0, 0.12)',\n\n    '& .badgeDot': {\n      fill: theme.palette.type === 'light' ? SFCommonWhite : SFCommonBlack\n    }\n  }\n}))(Badge);\n\nexport interface SFBadgeProps extends BadgeProps {\n  value: number;\n  type?: 'numeric';\n  size?: 'small' | 'medium';\n}\n\nexport const SFBadge = ({\n  value,\n  size = 'small',\n  type = 'numeric',\n  overlap = 'circle',\n  className = '',\n  anchorOrigin = { vertical: 'top', horizontal: 'left' },\n  children,\n  ...props\n}: SFBadgeProps): React.ReactElement<SFBadgeProps> => {\n  const BadgeContent = (): React.ReactNode => {\n    if (type === 'numeric') {\n      return value > 0 ? (\n        value <= 99 ? (\n          value\n        ) : (\n          <svg\n            xmlns='http://www.w3.org/2000/svg'\n            width='5'\n            height='5'\n            viewBox='0 0 5 5'\n            fill='none'\n          >\n            <circle\n              className='badgeDot'\n              cx='2.5'\n              cy='2.5'\n              r='2.5'\n              fill='white'\n            />\n          </svg>\n        )\n      ) : undefined;\n    } else return undefined;\n  };\n\n  return (\n    <StyledBadge\n      {...props}\n      className={`${className} ${size}`}\n      badgeContent={BadgeContent()}\n      anchorOrigin={anchorOrigin}\n      overlap={overlap}\n    >\n      {children}\n    </StyledBadge>\n  );\n};\n","import * as React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper, { PaperProps } from '@material-ui/core/Paper';\n\nconst StyledPaper = withStyles({\n  root: {\n    borderRadius: 0,\n    height: '100%'\n  }\n})(Paper);\n\nexport interface SFPaperProps extends PaperProps {}\n\nexport const SFPaper = ({\n  elevation = 0,\n  ...props\n}: SFPaperProps): React.ReactElement<SFPaperProps> => {\n  return <StyledPaper elevation={elevation} {...props} />;\n};\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport Chip, { ChipProps } from '@material-ui/core/Chip';\nimport { SFBlue, SFGrey, SFRed, SFSurfaceLight } from '../../SFColors/SFColors';\nimport { SFIconButton } from '../SFIconButton/SFIconButton';\nimport { hexToRgba } from '../../Helpers';\n\nconst StyledChip = withStyles((theme: Theme) => ({\n  root: {\n    fontWeight: 400,\n    fontSize: '13px',\n    maxWidth: '100%',\n\n    '&:not(.Mui-disabled)': {\n      '&.primary:not(.hasError)': {\n        backgroundColor:\n          theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200],\n        color: theme.palette.type === 'light' ? SFSurfaceLight : SFGrey[900],\n\n        '&.MuiChip-deletable': {\n          '& .MuiChip-deleteIcon': {\n            color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200],\n\n            '& .MuiIconButton-label': {\n              '& svg': {\n                '& path': {\n                  fill: `${\n                    theme.palette.type === 'light'\n                      ? SFSurfaceLight\n                      : SFGrey[900]\n                  } !important`\n                }\n              }\n            },\n\n            '&:hover, &:active': {\n              '@media (hover: hover)': {\n                backgroundColor:\n                  theme.palette.type === 'light'\n                    ? hexToRgba(SFGrey[200], 0.3)\n                    : hexToRgba(SFGrey[500], 0.3)\n              }\n            }\n          },\n\n          '&:active': {\n            backgroundColor:\n              theme.palette.type === 'light' ? SFBlue[700] : SFBlue[300]\n          }\n        },\n\n        '&.MuiChip-outlined': {\n          backgroundColor: 'transparent',\n          border: `1px solid ${\n            theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n          }`,\n          color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200],\n\n          '&.MuiChip-deletable': {\n            '& .MuiChip-deleteIcon': {\n              color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200],\n\n              '& .MuiIconButton-label': {\n                '& svg': {\n                  '& path': {\n                    fill: `${\n                      theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n                    } !important`\n                  }\n                }\n              }\n            },\n\n            '&:active': {\n              backgroundColor:\n                theme.palette.type === 'light'\n                  ? hexToRgba(SFBlue[100], 0.4)\n                  : hexToRgba(SFBlue[200], 0.2)\n            }\n          }\n        }\n      },\n\n      '&.default:not(.hasError)': {\n        backgroundColor:\n          theme.palette.type === 'light' ? SFGrey[100] : SFGrey[500],\n        color: theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50],\n\n        '&.MuiChip-deletable': {\n          '& .MuiChip-deleteIcon': {\n            color: theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n          },\n\n          '&:hover, &:active': {\n            backgroundColor:\n              theme.palette.type === 'light'\n                ? hexToRgba(SFGrey[500], 0.2)\n                : hexToRgba(SFGrey[200], 0.3)\n          },\n\n          '& .MuiIconButton-label': {\n            '& svg': {\n              '& path': {\n                fill: `${\n                  theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n                } !important`\n              }\n            }\n          },\n\n          '&:hover': {\n            backgroundColor:\n              theme.palette.type === 'light' ? SFGrey[100] : SFGrey[500]\n          },\n\n          '&:active': {\n            backgroundColor:\n              theme.palette.type === 'light' ? SFGrey[200] : SFGrey[600]\n          }\n        },\n\n        '&.MuiChip-outlined': {\n          backgroundColor: 'transparent',\n          border: `1px solid ${\n            theme.palette.type === 'light' ? SFGrey[400] : SFGrey[500]\n          }`,\n\n          '&.MuiChip-deletable': {\n            '&:hover': {\n              backgroundColor: 'transparent'\n            },\n            '&:active': {\n              backgroundColor:\n                theme.palette.type === 'light'\n                  ? hexToRgba(SFGrey[200], 0.3)\n                  : hexToRgba(SFGrey[500], 0.3)\n            }\n          }\n        }\n      },\n\n      '&.hasError': {\n        backgroundColor:\n          theme.palette.type === 'light' ? SFRed[700] : SFRed[200],\n        color: theme.palette.type === 'light' ? SFSurfaceLight : SFGrey[900],\n\n        '&.MuiChip-deletable': {\n          '& .MuiChip-deleteIcon': {\n            color: `${\n              theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n            } !important`,\n\n            '& .MuiIconButton-label': {\n              '& svg': {\n                '& path': {\n                  fill: `${\n                    theme.palette.type === 'light'\n                      ? SFSurfaceLight\n                      : SFGrey[900]\n                  } !important`\n                }\n              }\n            },\n\n            '&:hover, &:active': {\n              '@media (hover: hover)': {\n                backgroundColor: `${\n                  theme.palette.type === 'light'\n                    ? hexToRgba(SFGrey[200], 0.3)\n                    : hexToRgba(SFGrey[500], 0.3)\n                } !important`\n              }\n            }\n          },\n\n          '&:active': {\n            backgroundColor: `${\n              theme.palette.type === 'light' ? SFRed[800] : SFRed[300]\n            } !important`\n          }\n        },\n\n        '&.MuiChip-outlined': {\n          backgroundColor: 'transparent',\n          border: `1px solid ${\n            theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n          } !important`,\n          color: `${\n            theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n          } !important`,\n\n          '&.MuiChip-deletable': {\n            '& .MuiChip-deleteIcon': {\n              color: `${\n                theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n              } !important`,\n\n              '& .MuiIconButton-label': {\n                '& svg': {\n                  '& path': {\n                    fill: `${\n                      theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n                    } !important`\n                  }\n                }\n              }\n            },\n\n            '&:active': {\n              backgroundColor: `${\n                theme.palette.type === 'light'\n                  ? hexToRgba(SFRed[100], 0.4)\n                  : hexToRgba(SFRed[200], 0.2)\n              } !important`\n            }\n          }\n        }\n      }\n    },\n\n    '&.Mui-disabled': {\n      backgroundColor:\n        theme.palette.type === 'light' ? SFGrey[100] : SFGrey[800],\n      color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600],\n      opacity: 1,\n\n      '&.MuiChip-outlined': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n        }  !important`,\n        color: `${theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600]} `,\n        backgroundColor: 'transparent'\n      },\n\n      '&.MuiChip-deletable': {\n        '& .MuiChip-deleteIcon': {\n          '& .MuiIconButton-label': {\n            '& svg': {\n              '& path': {\n                fill: `${\n                  theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600]\n                } !important`\n              }\n            }\n          }\n        }\n      }\n    },\n\n    '&.fullWidth': {\n      display: 'flex',\n      justifyContent: 'space-between',\n      width: '100%'\n    }\n  },\n  label: {\n    lineHeight: '24px'\n  },\n  labelSmall: {\n    lineHeight: '20px'\n  }\n}))(Chip);\n\nexport interface SFChipProps extends ChipProps {\n  sfColor: 'primary' | 'default';\n  deleteable?: boolean;\n  hasError?: boolean;\n  fullWidth?: boolean;\n}\n\nexport const SFChip = ({\n  sfColor = 'primary',\n  size = 'medium',\n  label,\n  disabled,\n  deleteable,\n  variant = 'default',\n  fullWidth,\n  hasError,\n  onDelete,\n  ...props\n}: SFChipProps): React.ReactElement<SFChipProps> => {\n  return (\n    <FormControl fullWidth={fullWidth}>\n      <StyledChip\n        {...props}\n        className={`${sfColor} ${fullWidth ? 'fullWidth' : ''} ${\n          hasError ? 'hasError' : ''\n        }`}\n        label={label}\n        size={size}\n        variant={variant}\n        disabled={disabled}\n        deleteIcon={<SFIconButton sfIcon='Close' sfSize='tiny' />}\n        onDelete={deleteable ? onDelete : undefined}\n      />\n    </FormControl>\n  );\n};\n","import * as React from 'react';\n\nimport { SFSpinner } from '../SFSpinner/SFSpinner';\nimport { SFPaper } from '../SFPaper/SFPaper';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { SFGrey } from '../../SFColors/SFColors';\n\nconst cardStyles = makeStyles({\n  root: {\n    position: 'relative',\n    padding: '30px',\n    borderRadius: '2px',\n    '& .loader': {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexDirection: 'column',\n      '&.top': {\n        flexDirection: 'row',\n        '& p': {\n          margin: '0px 15px'\n        }\n      }\n    }\n  }\n});\n\nconst usePaperStyles = makeStyles({\n  root: {\n    border: `1px solid ${SFGrey[100]}`,\n    borderRadius: '2px'\n  }\n});\n\nexport type sfElevations = 0 | 1 | 2 | 3 | 4 | 6 | 8 | 9 | 12 | 16 | 24;\n\nexport interface SFCardProps {\n  sfElevation?: sfElevations;\n  className?: string;\n  isLoading?: boolean;\n  loadingAtTop?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const SFCard = ({\n  sfElevation = 0,\n  className = '',\n  isLoading = false,\n  loadingAtTop = false,\n  children\n}: SFCardProps): React.ReactElement<SFCardProps> => {\n  const externalClass: string = className || '';\n  const customCardStyles: Record<'root', string> = cardStyles();\n  const styledPaper: Record<'root', string> = usePaperStyles();\n\n  return (\n    <SFPaper\n      elevation={sfElevation}\n      classes={sfElevation === 0 ? styledPaper : undefined}\n    >\n      <div className={`${customCardStyles.root} ${externalClass} `}>\n        {isLoading === true ? (\n          <div\n            className={`loader ${loadingAtTop === true ? 'top' : undefined}`}\n          >\n            <SFSpinner />\n            <p>Loading...</p>\n          </div>\n        ) : (\n          children\n        )}\n      </div>\n    </SFPaper>\n  );\n};\n","import React from 'react';\nimport { SFAlertDialog } from '../../SFAlertDialog/SFAlertDialog';\nimport { SFTextField } from '../../SFTextField/SFTextField';\nimport { ChipFieldValueType } from '../SFChipsListField';\n\nexport interface SFChipListModalProps {\n  value: ChipFieldValueType | undefined;\n  open: boolean;\n  isValid?: (value: string) => boolean;\n  onEdit: (\n    prevoiusValue: ChipFieldValueType,\n    value: ChipFieldValueType\n  ) => void;\n  onClose: () => void;\n}\n\nexport const SFChipListModal = ({\n  value,\n  open,\n  isValid,\n  onEdit,\n  onClose\n}: SFChipListModalProps): React.ReactElement<SFChipListModalProps> => {\n  const [editedValue, setEditedValue] = React.useState<string>(\n    value?.value || ''\n  );\n\n  const onInputChange = (input: React.ChangeEvent<HTMLInputElement>): void => {\n    setEditedValue(input.target.value);\n  };\n\n  const onFinishEdition = (): void => {\n    onEdit(value as ChipFieldValueType, {\n      value: editedValue,\n      isNew: value?.isNew,\n      isValid: isValid ? isValid(editedValue) : true,\n      hasChanged: true\n    });\n    onClose();\n  };\n\n  React.useEffect(() => {\n    setEditedValue(value ? value.value : '');\n  }, [value]);\n\n  return (\n    <SFAlertDialog\n      title='Edit item'\n      rightAction={{\n        label: 'Done',\n        buttonProps: {\n          disabled: value?.value === editedValue,\n          onClick: (): void => onFinishEdition()\n        }\n      }}\n      leftAction={{\n        label: 'Cancel',\n        buttonProps: {\n          onClick: (): void => onClose()\n        }\n      }}\n      open={open}\n      content='To edit this item, please enter the new one here.'\n    >\n      <SFTextField\n        label='Item'\n        value={editedValue}\n        onChange={(input: React.ChangeEvent<HTMLInputElement>): void =>\n          onInputChange(input)\n        }\n      />\n    </SFAlertDialog>\n  );\n};\n","import React, { Fragment } from 'react';\nimport { ChipFieldValueType } from '../SFChipsListField';\nimport { SFChip } from '../../SFChip/SFChip';\n\nexport interface SFChipListRenderProps {\n  values: ChipFieldValueType[];\n  isChipFullWidth: boolean;\n  chipSize: 'small' | 'medium';\n  disabled: boolean;\n  isValid?: (value: string) => boolean;\n  onDelete: (input: ChipFieldValueType) => void;\n  onEdit?: (value: ChipFieldValueType) => void;\n}\n\nexport const SFChipListRender = ({\n  values,\n  isChipFullWidth,\n  chipSize,\n  disabled,\n  isValid,\n  onDelete,\n  onEdit\n}: SFChipListRenderProps): React.ReactElement<SFChipListRenderProps> => {\n  return (\n    <Fragment>\n      {values.map((input: ChipFieldValueType, index: number) => (\n        <SFChip\n          key={`${input.value}-${index}`}\n          fullWidth={isChipFullWidth}\n          deleteable\n          clickable\n          sfColor='default'\n          variant='outlined'\n          size={input.isNew ? 'small' : chipSize}\n          label={input.value}\n          disabled={disabled}\n          hasError={input.isValid !== undefined && !input.isValid}\n          onDelete={(): void => onDelete(input)}\n          onClick={(): void => {\n            if (onEdit) {\n              onEdit({\n                value: input.value,\n                isNew: input.isNew ? input.isNew : false,\n                isValid: isValid ? isValid(input.value) : true\n              });\n            }\n          }}\n        />\n      ))}\n    </Fragment>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport {\n  Autocomplete,\n  AutocompleteRenderInputParams,\n  AutocompleteInputChangeReason,\n  AutocompleteChangeReason\n} from '@material-ui/lab';\nimport { SFTextField } from '../SFTextField/SFTextField';\nimport { SFChipListModal } from './SFChipFieldModal/SFChipFieldModal';\nimport { SFChipListRender } from './SFChipFieldRender/SFChipFieldRender';\nimport { hexToRgba } from '../../Helpers';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { withStyles, Theme, makeStyles } from '@material-ui/core/styles';\n\nconst StyledAutoComplete = withStyles((theme: Theme) => ({\n  root: {\n    '& .MuiAutocomplete-endAdornment': {\n      display: 'none'\n    }\n  },\n  listbox: {\n    padding: '13px 0'\n  },\n  paper: {\n    marginLeft: '4px',\n    marginRight: '-4px'\n  },\n  option: {\n    padding: '6px 24px',\n\n    '&[data-focus=\"true\"]': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.3)\n          : hexToRgba(SFGrey[500] as string, 0.3),\n      '&:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey.A100 as string, 0.5)\n            : hexToRgba(SFGrey[500] as string, 0.5)\n      }\n    },\n\n    '&[aria-selected=\"true\"]': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.5)\n          : hexToRgba(SFGrey[500] as string, 0.5)\n    }\n  }\n}))(Autocomplete);\n\nconst StyledTextField = withStyles({\n  root: {\n    '& .MuiInputBase-root': {\n      height: 'inherit',\n      minHeight: '56px',\n      gap: '6px',\n      padding: '28px 9px 9px !important',\n      '& .MuiAutocomplete-input': {\n        padding: '0'\n      },\n      '& .MuiFormControl-root .MuiChip-outlined': {\n        margin: '3px auto 2px'\n      }\n    }\n  }\n})(SFTextField);\n\nconst chipsDisplay = makeStyles({\n  chipDisplayInline: {\n    display: 'flex',\n    gap: '8px',\n    marginTop: '14px',\n    flexWrap: 'wrap',\n    flexDirection: 'row'\n  },\n  chipDisplayBlock: {\n    display: 'flex',\n    gap: '8px',\n    marginTop: '14px',\n    flexWrap: 'wrap',\n    flexDirection: 'column'\n  }\n});\n\nexport type ChipFieldValueType = {\n  value: string;\n  isNew?: boolean;\n  hasChanged?: boolean;\n  isValid?: boolean;\n};\n\nexport interface SFChipsListFieldProps {\n  chipSize?: 'small' | 'medium';\n  chipDisplay?: 'inline' | 'block';\n  emptyMessage?: string;\n  label: string;\n  helperText?: string;\n  options?: string[];\n  items?: ChipFieldValueType[];\n  delimiters?: string[];\n  freeSolo?: boolean;\n  disabled?: boolean;\n  required?: boolean;\n  isEditable?: boolean;\n  inputType?: string;\n  isValid?: (value: string) => boolean;\n  onChange: (newItems: ChipFieldValueType[]) => void;\n}\n\nexport const SFChipsListField = ({\n  chipSize = 'small',\n  chipDisplay = 'inline',\n  emptyMessage,\n  label,\n  helperText,\n  options = [],\n  items = [],\n  delimiters = [','],\n  freeSolo = false,\n  disabled = false,\n  isEditable = false,\n  inputType = 'text',\n  isValid,\n  onChange\n}: SFChipsListFieldProps): React.ReactElement<SFChipsListFieldProps> => {\n  const [isPopperOpen, setIsPopperOpen] = React.useState<boolean>(false);\n  const [isModalOpen, setIsModalOpen] = React.useState<boolean>(false);\n  const [editedValue, setEditedValue] = React.useState<ChipFieldValueType>();\n  const [inputValue, setInputValue] = React.useState<string>('');\n  const { chipDisplayInline, chipDisplayBlock } = chipsDisplay();\n\n  const isFreeSolo = (): boolean => {\n    return freeSolo || options.length === 0;\n  };\n\n  const savedValues: ChipFieldValueType[] = items.filter(\n    (item: ChipFieldValueType) => item.isNew !== true\n  );\n\n  const inputValues: ChipFieldValueType[] = items.filter(\n    (item: ChipFieldValueType) => item.isNew === true\n  );\n\n  const createNewValue = (value: string): ChipFieldValueType => {\n    return {\n      value: value,\n      isNew: true,\n      isValid: isValid ? isValid(value) : true\n    };\n  };\n\n  const addValue = (input: ChipFieldValueType[]): void => {\n    const values: ChipFieldValueType[] = [...items, ...input];\n    onChange(values);\n  };\n\n  const editValue = (\n    previousInput: ChipFieldValueType,\n    input: ChipFieldValueType\n  ): void => {\n    const index: number = items.findIndex(\n      (item) => item.value === previousInput.value\n    );\n    const values: ChipFieldValueType[] = [\n      ...items.slice(0, index),\n      input,\n      ...items.slice(index + 1)\n    ];\n    onChange(values);\n  };\n\n  const deleteValue = (input: ChipFieldValueType): void => {\n    const index: number = items.indexOf(input);\n    const values: ChipFieldValueType[] = [\n      ...items.slice(0, index),\n      ...items.slice(index + 1)\n    ];\n    onChange(values);\n  };\n\n  const onEdit = (value: ChipFieldValueType): void => {\n    if (isFreeSolo()) {\n      setEditedValue(value);\n      setIsModalOpen(true);\n    }\n  };\n\n  const filteredOptions = (options: string[]): string[] => {\n    if (savedValues.length !== 0) {\n      return options.filter(\n        (option: string) =>\n          !savedValues.find((item: ChipFieldValueType) => item.value === option)\n      );\n    } else {\n      return options;\n    }\n  };\n\n  const getValuesFromInputField = (value: string): string[] => {\n    const separatorRegExp = new RegExp(delimiters.join('|'), 'gi');\n    const inputValues: string[] = value.split(separatorRegExp);\n\n    return Array.from(new Set(inputValues));\n  };\n\n  const getValueFromOptions = (value: string): string | undefined => {\n    return options.find(\n      (option) => option.toLowerCase() === value.toLowerCase()\n    );\n  };\n\n  const isValueAlreadyAdded = (value: string): boolean => {\n    const matchValueItem: ChipFieldValueType | undefined = items.find(\n      (item) => item.value.toLowerCase() === value.toLowerCase()\n    );\n\n    return matchValueItem !== undefined;\n  };\n\n  const onInputChange = (\n    _event: ChangeEvent,\n    value: string,\n    reason: AutocompleteInputChangeReason\n  ): void => {\n    if (reason === 'reset') {\n      if (inputValue !== '') {\n        setInputValue(inputValue);\n      } else {\n        setIsPopperOpen(false);\n      }\n    } else {\n      setInputValue(value);\n      const nativeEvent: InputEvent = _event.nativeEvent as InputEvent;\n\n      if (nativeEvent.data && delimiters.includes(nativeEvent.data)) {\n        _event.preventDefault();\n        setIsPopperOpen(false);\n        const insertedValues: string[] = getValuesFromInputField(value);\n\n        let valuesToAdd: ChipFieldValueType[] = [];\n        insertedValues.forEach((insertedValue: string) => {\n          const valueTrim: string = insertedValue.trim();\n\n          if (valueTrim !== '' && !isValueAlreadyAdded(valueTrim)) {\n            const valueOption: string | undefined = getValueFromOptions(\n              valueTrim\n            );\n\n            if (valueOption) {\n              valuesToAdd = [...valuesToAdd, createNewValue(valueOption)];\n            } else {\n              if (isFreeSolo()) {\n                valuesToAdd = [...valuesToAdd, createNewValue(valueTrim)];\n              }\n            }\n          }\n        });\n        addValue(valuesToAdd);\n        setInputValue('');\n      } else {\n        setIsPopperOpen(true);\n      }\n    }\n  };\n\n  const onAutoCompleteChange = (\n    _event: ChangeEvent,\n    value: (ChipFieldValueType | string)[],\n    reason: AutocompleteChangeReason\n  ): void => {\n    if (reason === 'select-option' || reason === 'create-option') {\n      const lastItem = value[value.length - 1];\n\n      if (typeof lastItem === 'string') {\n        const values: string[] = getValuesFromInputField(lastItem as string);\n        let currentValues: ChipFieldValueType[] = [];\n\n        values.forEach((value: string) => {\n          const valueTrim: string = value.trim();\n\n          if (valueTrim !== '' && !isValueAlreadyAdded(valueTrim)) {\n            const matchValueOption: string | undefined = getValueFromOptions(\n              valueTrim\n            );\n\n            currentValues = [\n              ...currentValues,\n              createNewValue(matchValueOption || valueTrim)\n            ];\n          }\n        });\n        addValue(currentValues);\n      }\n      setIsPopperOpen(false);\n      setInputValue('');\n    }\n  };\n\n  const DisplayValues = (): JSX.Element => {\n    return (\n      <div\n        className={` ${\n          chipDisplay === 'block' ? chipDisplayBlock : chipDisplayInline\n        }`}\n      >\n        {savedValues.length !== 0 && (\n          <SFChipListRender\n            values={savedValues}\n            isChipFullWidth={chipDisplay === 'block'}\n            chipSize={chipSize}\n            disabled={disabled}\n            onDelete={deleteValue}\n            onEdit={isEditable ? onEdit : undefined}\n            isValid={isValid}\n          />\n        )}\n        {emptyMessage && (!savedValues || savedValues.length === 0) && (\n          <p>{emptyMessage}</p>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <FormControl fullWidth>\n      <SFChipListModal\n        value={editedValue}\n        open={isModalOpen}\n        isValid={isValid}\n        onEdit={editValue}\n        onClose={(): void => setIsModalOpen(false)}\n      />\n      <StyledAutoComplete\n        disabled={disabled}\n        options={filteredOptions(options)}\n        multiple\n        value={inputValues}\n        inputValue={inputValue}\n        onChange={onAutoCompleteChange}\n        onInputChange={onInputChange}\n        open={options.length > 0 ? isPopperOpen : false}\n        onClose={(): void => setIsPopperOpen(false)}\n        filterSelectedOptions\n        freeSolo={isFreeSolo()}\n        getOptionSelected={(\n          option: string,\n          value: ChipFieldValueType\n        ): boolean => option === value.value}\n        renderTags={(value: ChipFieldValueType[]): JSX.Element => (\n          <SFChipListRender\n            isChipFullWidth={false}\n            chipSize='small'\n            values={value}\n            disabled={disabled}\n            onDelete={deleteValue}\n            onEdit={isEditable ? onEdit : undefined}\n            isValid={isValid}\n          />\n        )}\n        renderInput={(params: AutocompleteRenderInputParams): JSX.Element => (\n          <StyledTextField\n            {...params}\n            type={inputType}\n            rows={1}\n            label={label}\n            helperText={helperText}\n          />\n        )}\n      />\n      <DisplayValues />\n    </FormControl>\n  );\n};\n","import * as React from 'react';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport FormControlLabel, {\n  FormControlLabelProps\n} from '@material-ui/core/FormControlLabel';\nimport { SFGrey } from '../../SFColors/SFColors';\n\nconst StyledFromControlLabel = withStyles((theme: Theme) => ({\n  root: {\n    color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`,\n    gap: '3px',\n    margin: '0px',\n    alignItems: 'flex-start',\n\n    '& .MuiTypography-root': {\n      paddingTop: '9px'\n    },\n\n    '&.Mui-disabled': {\n      color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`\n    }\n  },\n  label: {\n    lineHeight: ' 24px'\n  }\n}))(FormControlLabel);\n\nexport interface SFFormControlLabelProps extends FormControlLabelProps {}\n\nexport const SFFormControlBooleanLabel = (\n  props: SFFormControlLabelProps\n): React.ReactElement<SFFormControlLabelProps> => {\n  return <StyledFromControlLabel {...props} />;\n};\n","import * as React from 'react';\nimport { withStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { SFFormControlBooleanLabel } from '../SFFormControlBooleanLabel/SFFormControlBooleanLabel';\nimport { SFIcon } from '../SFIcon/SFIcon';\n\nconst StyledCheckbox = withStyles((theme: Theme) => ({\n  root: {\n    padding: '12px',\n    color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`,\n    alignItems: 'flex-start'\n  },\n  colorPrimary: {\n    '&:hover': {\n      '@media (hover: hover)': {\n        backgroundColor: `${\n          theme.palette.type === 'light'\n            ? 'rgba(204, 204, 204, 0.3)'\n            : 'rgba(128, 128, 128, 0.3)'\n        }`\n      }\n    },\n    '&:active': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 204, 204, 0.5)'\n          : 'rgba(128, 128, 128, 0.2)'\n      }`\n    },\n    '&.Mui-checked:hover': {\n      '@media (hover: hover)': {\n        backgroundColor: `${\n          theme.palette.type === 'light'\n            ? 'rgba(204, 235, 255, 0.4)'\n            : 'rgba(128, 198, 255, 0.2)'\n        }`\n      }\n    },\n    '&.Mui-checked:active': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 235, 255, 0.6)'\n          : 'rgba(128, 198, 255, 0.1)'\n      }`\n    },\n    '&.Mui-disabled': {\n      color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n    }\n  }\n}))(Checkbox);\n\nconst getIconUncheckedColor = (\n  theme: Theme,\n  disabled: boolean | undefined\n): string => {\n  if (disabled) {\n    return theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700];\n  }\n  return theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400];\n};\n\nconst getIconCheckedColor = (\n  theme: Theme,\n  disabled: boolean | undefined\n): string => {\n  if (disabled) {\n    return theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700];\n  }\n  return theme.palette.primary.main;\n};\n\nexport interface SFCheckboxProps extends CheckboxProps {\n  label?: React.ReactNode | undefined;\n}\n\nexport const SFCheckbox = ({\n  className = '',\n  disableRipple = true,\n  label,\n  ...props\n}: SFCheckboxProps): React.ReactElement<SFCheckboxProps> => {\n  const theme: Theme = useTheme();\n  const iconCheckedColor: string = getIconCheckedColor(theme, props.disabled);\n  const iconUncheckedColor: string = getIconUncheckedColor(\n    theme,\n    props.disabled\n  );\n\n  return (\n    <FormControl className={className}>\n      <SFFormControlBooleanLabel\n        control={\n          <StyledCheckbox\n            {...props}\n            color='primary'\n            disableRipple={disableRipple}\n            icon={\n              <SFIcon\n                icon='Checkbox-Unselected'\n                size={18}\n                color={iconUncheckedColor}\n              />\n            }\n            checkedIcon={\n              <SFIcon\n                icon='Checkbox-Selected'\n                size={18}\n                color={iconCheckedColor}\n              />\n            }\n          />\n        }\n        label={label}\n      />\n    </FormControl>\n  );\n};\n","import * as React from 'react';\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  withStyles\n} from '@material-ui/core/styles';\nimport MomentUtils from '@date-io/moment';\nimport { SFBlue, SFGrey, SFRed } from '../../SFColors/SFColors';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n  KeyboardDatePickerProps\n} from '@material-ui/pickers';\nimport { hexToRgba } from '../../Helpers';\n\nconst useButtonBackgrounds = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: `${\n        theme.palette.type !== 'light' ? SFGrey[800] : undefined\n      }`\n    }\n  })\n);\n\nconst usePopOverStyle = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      marginTop: '3px',\n      marginLeft: '-2px',\n      backgroundColor: `${\n        theme.palette.type !== 'light' ? SFGrey[800] : undefined\n      }`,\n      '& .MuiPickersDay-current': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        }`\n      },\n      '& .MuiIconButton-root:hover': {\n        backgroundColor: `${\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey[200], 0.3)\n            : hexToRgba(SFGrey[500], 0.3)\n        }`\n      },\n      '& .MuiPickersDay-daySelected:hover': {\n        backgroundColor: `${\n          theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        }`\n      }\n    }\n  })\n);\n\nconst StyledDatePicker = withStyles((theme: Theme) => ({\n  root: {\n    boxSizing: 'border-box',\n\n    '&.openCalendarStyle': {\n      '& .MuiFilledInput-root': {\n        border: `2px solid ${\n          theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        }`,\n\n        '& .MuiFilledInput-input': {\n          padding: '26px 10px 7px'\n        }\n      },\n      '& .MuiFilledInput-adornedEnd': {\n        paddingRight: '11px'\n      },\n      '& .MuiInputLabel-filled': {\n        '&.MuiInputLabel-shrink': {\n          color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        }\n      }\n    },\n\n    '& .MuiFilledInput-root': {\n      height: '56px',\n      backgroundColor: theme.palette.background.paper,\n      border: `1px solid ${\n        theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n      }`,\n      borderRadius: 2,\n      boxSizing: 'border-box',\n\n      '&:before': {\n        content: `none !important`\n      },\n\n      '&:after': {\n        content: `none !important`\n      },\n\n      '&:hover': {\n        '@media (hover: hover)': {\n          borderColor: `${\n            theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n          }`\n        }\n      },\n\n      '&.Mui-focused': {\n        border: `2px solid ${\n          theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        }`,\n\n        '& .MuiFilledInput-input': {\n          padding: '26px 10px 7px'\n        },\n        '& .MuiInputAdornment-root': {\n          marginRight: '-1px'\n        }\n      },\n\n      '&.Mui-error': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n        } !important`,\n\n        '& .MuiFilledInput-input': {\n          padding: '26px 11px 7px !important'\n        },\n\n        '&.MuiFilledInput-adornedEnd': {\n          paddingRight: '12px !important'\n        }\n      },\n\n      '&.Mui-disabled': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n        }`,\n\n        '& .MuiFilledInput-input': {\n          padding: '26px 11px 7px !important'\n        },\n\n        '&.MuiFilledInput-adornedEnd': {\n          paddingRight: '12px !important'\n        }\n      },\n\n      '& .MuiFilledInput-input': {\n        fontWeight: 400,\n        fontSize: '16px',\n        padding: '26px 11px 7px',\n\n        '&.Mui-disabled': {\n          color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n        },\n\n        '&.MuiFilledInput-adornedEnd': {\n          paddingRight: '12px'\n        }\n      },\n\n      '& .MuiIconButton-root': {\n        '@media (hover: hover)': {\n          '&:hover': {\n            backgroundColor: `${\n              theme.palette.type === 'light'\n                ? hexToRgba(SFGrey[200], 0.3)\n                : hexToRgba(SFGrey[500], 0.3)\n            }`\n          }\n        },\n\n        '&:active': {\n          backgroundColor: `${\n            theme.palette.type === 'light'\n              ? hexToRgba(SFGrey[200], 0.5)\n              : hexToRgba(SFGrey[500], 0.2)\n          }`\n        }\n      }\n    },\n\n    '& .MuiInputLabel-filled': {\n      fontSize: '16px',\n      lineHeight: '24px',\n      color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`,\n\n      '&.MuiInputLabel-shrink': {\n        fontSize: '14px',\n        lineHeight: '20px',\n        transform: `translate(12px, 6px)`,\n\n        '&.Mui-focused': {\n          color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        }\n      },\n\n      '&.Mui-error': {\n        color: `${\n          theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n        } !important`\n      },\n\n      '&.Mui-disabled': {\n        color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n      }\n    },\n\n    '& .MuiFormHelperText-root': {\n      backgroundColor: 'transparent',\n\n      '&.Mui-error': {\n        color: `${theme.palette.type === 'light' ? SFRed[700] : SFRed[200]}`\n      }\n    }\n  }\n}))(KeyboardDatePicker);\n\nexport interface SFDatePickerProps extends KeyboardDatePickerProps {}\n\nexport const SFDatePicker = ({\n  value = null,\n  label,\n  ...props\n}: SFDatePickerProps): React.ReactElement<KeyboardDatePickerProps> => {\n  const popOverStyle: Record<'paper', string> = usePopOverStyle();\n  const arrowStyle: Record<'root', string> = useButtonBackgrounds();\n  const [openCalendarStyle, setOpenCalendarStyle] = React.useState<boolean>(\n    false\n  );\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <StyledDatePicker\n        {...props}\n        fullWidth\n        disableToolbar\n        className={openCalendarStyle ? 'openCalendarStyle' : ''}\n        value={value}\n        variant='inline'\n        inputVariant='filled'\n        format='MM/DD/YYYY'\n        label={label}\n        onOpen={(): void => {\n          setOpenCalendarStyle(true);\n        }}\n        onClose={(): void => {\n          setOpenCalendarStyle(false);\n        }}\n        PopoverProps={{\n          classes: popOverStyle,\n          anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n          transformOrigin: { vertical: 'top', horizontal: 'left' }\n        }}\n        rightArrowButtonProps={{ classes: arrowStyle }}\n        rightArrowIcon={<SFIcon icon='Right-2' size='10' />}\n        leftArrowButtonProps={{ classes: arrowStyle }}\n        leftArrowIcon={<SFIcon icon='Left-2' size='10' />}\n        keyboardIcon={<SFIcon icon='Callendar' size='24' />}\n      />\n    </MuiPickersUtilsProvider>\n  );\n};\n","import React from 'react';\nimport { Drawer, DrawerProps } from '@material-ui/core';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { hexToRgba } from '../../Helpers';\n\nexport interface SFDrawerProps extends DrawerProps {}\n\nexport const StyledDrawer = withStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: `${\n      theme.palette.type === 'light'\n        ? 'rgba(0, 0, 0, 0.3)'\n        : hexToRgba(SFGrey.A400 as string, 0.8)\n    }`\n  }\n}))(Drawer);\n\nexport const SFDrawer = ({\n  transitionDuration = 360,\n  ...props\n}: SFDrawerProps): React.ReactElement<SFDrawerProps> => (\n  <StyledDrawer {...props} transitionDuration={transitionDuration} />\n);\n","import * as React from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport Link, { LinkProps } from '@material-ui/core/Link';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\n\ntype SFSize = 'small' | 'medium';\nconst StyledLink = withStyles((theme: Theme) => ({\n  root: {\n    '&.MuiTypography-colorInherit': {\n      color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`\n    },\n    '&.MuiLink-root': {\n      cursor: 'pointer',\n      fontWeight: 500\n    }\n  }\n}))(Link);\n\nconst getSizeStyle = (size?: SFSize): CSSProperties => {\n  switch (size) {\n    case 'small':\n      return {\n        fontSize: '14px',\n        lineHeight: '20px'\n      };\n    default:\n      return {\n        fontSize: '16px',\n        lineHeight: '24px'\n      };\n  }\n};\n\nexport interface SFLinkProps extends LinkProps {\n  sfSize: SFSize;\n}\n\nexport const SFLink = ({\n  sfSize = 'medium',\n  color,\n  ...props\n}: SFLinkProps): React.ReactElement<SFLinkProps> => {\n  const sfColor = color !== 'primary' ? 'inherit' : 'primary';\n  return <StyledLink {...props} style={getSizeStyle(sfSize)} color={sfColor} />;\n};\n","import { withStyles, Theme } from '@material-ui/core/styles';\nimport { MenuItem } from '@material-ui/core';\nimport { hexToRgba } from '../../Helpers';\nimport { SFGrey } from '../../SFColors/SFColors';\n\nexport const SFMenuItem = withStyles((theme: Theme) => ({\n  root: {\n    padding: '6px 24px',\n    height: 36,\n    '&:hover': {\n      '@media (hover: hover)': {\n        background:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey[200], 0.3)\n            : hexToRgba(SFGrey[500], 0.3)\n      }\n    },\n    '&:active': {\n      background:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey[200], 0.5)\n          : hexToRgba(SFGrey[500], 0.2)\n    },\n    '&.Mui-selected': {\n      background:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey[200], 0.5)\n          : hexToRgba(SFGrey[500], 0.2),\n      '&:hover': {\n        '@media (hover: hover)': {\n          background:\n            theme.palette.type === 'light'\n              ? hexToRgba(SFGrey[200], 0.3)\n              : hexToRgba(SFGrey[500], 0.3)\n        }\n      }\n    }\n  }\n}))(MenuItem);\n","import * as React from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport { SelectProps } from '@material-ui/core';\nimport { SFTextField } from '../SFTextField/SFTextField';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { SFCheckbox } from '../SFCheckbox/SFCheckbox';\nimport { SFMenuItem } from '../SFMenuItem/SFMenuItem';\nimport { SFMenuOption } from '../SFSelect/SFSelect';\n\nconst StyledSelect = withStyles(() => ({\n  root: {\n    '& svg': {\n      position: 'absolute',\n      right: 18,\n      pointerEvents: 'none',\n      top: 'auto'\n    }\n  }\n}))(SFTextField);\n\nconst StyledMenuItem = withStyles(() => ({\n  root: {\n    height: 52\n  }\n}))(SFMenuItem);\n\nconst useMenuStyles = makeStyles({\n  paper: {\n    marginTop: '8px'\n  }\n});\n\nexport interface SFMultiSelectProps extends SelectProps {\n  options: SFMenuOption[];\n  defaultValue?: string[];\n  value?: string[];\n  helperText?: React.ReactNode;\n}\n\nexport const SFMultiSelect = ({\n  options,\n  helperText,\n  label,\n  defaultValue,\n  value,\n  onChange,\n  ...props\n}: SFMultiSelectProps): React.ReactElement<SFMultiSelectProps> => {\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const menuClasses: Record<'paper', string> = useMenuStyles();\n\n  React.useEffect(() => {\n    const selectedValue = value || defaultValue;\n    setSelected(selectedValue || []);\n  }, [value, defaultValue]);\n\n  const handleChange = (\n    event: React.ChangeEvent<{\n      name?: string | undefined;\n      value: unknown;\n    }>,\n    child: React.ReactNode\n  ): void => {\n    if (!value) {\n      setSelected(event.target.value as string[]);\n    }\n\n    if (onChange) {\n      onChange(event, child);\n    }\n  };\n\n  const renderSelected = (selectedValues: string[]): string => {\n    return selectedValues ? selectedValues.join(', ') : '';\n  };\n\n  const isChecked = (\n    option: SFMenuOption,\n    selectedValues: string[]\n  ): boolean => {\n    return selectedValues && selectedValues.indexOf(option.value) > -1;\n  };\n\n  return (\n    <StyledSelect\n      select\n      fullWidth\n      label={label}\n      helperText={helperText}\n      error={props.error}\n      disabled={props.disabled}\n      SelectProps={{\n        ...props,\n        defaultValue,\n        multiple: true,\n        value: selected,\n        MenuProps: {\n          variant: 'menu',\n          autoFocus: false,\n          disableAutoFocusItem: true,\n          classes: menuClasses\n        },\n        onChange: handleChange,\n        renderValue: renderSelected,\n        IconComponent: (props): React.ReactElement => (\n          <SFIcon icon='Down-2' size='16' {...props} />\n        )\n      }}\n    >\n      {options.map((option) => (\n        <StyledMenuItem key={option.value} value={option.value}>\n          <SFCheckbox checked={isChecked(option, selected)} />\n          {option.label}\n        </StyledMenuItem>\n      ))}\n    </StyledSelect>\n  );\n};\n","import * as React from 'react';\nimport NumberFormat, { NumberFormatProps } from 'react-number-format';\nimport { SFTextField, SFTextFieldProps } from '../SFTextField/SFTextField';\n\ninterface NumberFormatCustomProps extends NumberFormatProps {\n  inputRef: (instance: NumberFormat | null) => void;\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  name: string;\n  allowDecimals: boolean;\n}\n\nfunction NumberFormatCustom(props: NumberFormatCustomProps): JSX.Element {\n  const { inputRef, onChange, allowDecimals, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      inputMode={allowDecimals ? 'decimal' : 'numeric'}\n      decimalScale={!allowDecimals ? 0 : props.decimalScale}\n      pattern={allowDecimals ? undefined : '[0-9]*'}\n      getInputRef={inputRef}\n      onValueChange={(values): void => {\n        onChange &&\n          onChange({\n            target: {\n              name: props.name || '',\n              value: values.value\n            }\n          });\n      }}\n    />\n  );\n}\n\nexport interface SFNumericFieldProps extends SFTextFieldProps {\n  numberFormatProps?: NumberFormatProps;\n  allowDecimals?: boolean;\n}\n\nexport const SFNumericField = ({\n  numberFormatProps,\n  allowDecimals = true,\n  ...props\n}: SFNumericFieldProps): React.ReactElement<SFNumericFieldProps> => {\n  return (\n    <SFTextField\n      {...props}\n      inputProps={{ ...numberFormatProps, allowDecimals }}\n      InputProps={{\n        inputComponent: NumberFormatCustom as any\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { SFDrawer, SFDrawerProps } from '../SFDrawer/SFDrawer';\nimport { SFButton, SFButtonProps } from '../SFButton/SFButton';\nimport { SFGrey } from '../../SFColors/SFColors';\n\nexport interface SFPanelAction {\n  label: string;\n  buttonProps?: SFButtonProps;\n}\n\nexport interface SFPanelProps extends SFDrawerProps {\n  title?: string;\n  maxWidth?: number;\n  leftAction?: SFPanelAction;\n  rightAction?: SFPanelAction;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      padding: '36px 36px 24px',\n      color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`,\n      fontSize: 24,\n      fontStyle: 'normal',\n      fontWeight: 500\n    },\n    content: {\n      maxWidth: (props: SFPanelProps): number | 'auto' =>\n        props.maxWidth || 'auto',\n      padding: '0 36px',\n      color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`,\n      fontSize: 16,\n      fontStyle: 'normal',\n      lineHeight: '24px'\n    },\n    actions: {\n      padding: '24px 36px 36px',\n      display: 'flex',\n      gap: '17px',\n      alignItems: 'center',\n      justifyContent: 'flex-end'\n    }\n  })\n);\n\nexport const SFPanel = ({\n  title,\n  leftAction,\n  rightAction,\n  children,\n  ...props\n}: SFPanelProps): React.ReactElement<SFPanelProps> => {\n  const classes = useStyles(props);\n\n  return (\n    <div>\n      <SFDrawer {...props}>\n        <div className={classes.title}>{title}</div>\n\n        <div className={classes.content}>{children}</div>\n\n        <div className={classes.actions}>\n          {leftAction && (\n            <SFButton sfColor='grey' variant='text' {...leftAction.buttonProps}>\n              {leftAction.label}\n            </SFButton>\n          )}\n\n          {rightAction && (\n            <SFButton sfColor='blue' {...rightAction.buttonProps}>\n              {rightAction.label}\n            </SFButton>\n          )}\n        </div>\n      </SFDrawer>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport Radio, { RadioProps } from '@material-ui/core/Radio';\nimport FormControl from '@material-ui/core/FormControl';\nimport { SFFormControlBooleanLabel } from '../../SFFormControlBooleanLabel/SFFormControlBooleanLabel';\nimport { SFGrey } from '../../../SFColors/SFColors';\n\nconst StyledRadio = withStyles((theme: Theme) => ({\n  root: {\n    color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`\n  },\n  colorPrimary: {\n    '&:hover': {\n      '@media (hover: hover)': {\n        backgroundColor: `${\n          theme.palette.type === 'light'\n            ? 'rgba(204, 204, 204, 0.3)'\n            : 'rgba(128, 128, 128, 0.3)'\n        }`\n      }\n    },\n    '&:active': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 204, 204, 0.5)'\n          : 'rgba(128, 128, 128, 0.2)'\n      }`\n    },\n    '&.Mui-checked:hover': {\n      '@media (hover: hover)': {\n        backgroundColor: `${\n          theme.palette.type === 'light'\n            ? 'rgba(204, 235, 255, 0.4)'\n            : 'rgba(128, 198, 255, 0.2)'\n        }`\n      }\n    },\n    '&.Mui-checked:active': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 235, 255, 0.6)'\n          : 'rgba(128, 198, 255, 0.1)'\n      }`\n    },\n    '&.Mui-disabled': {\n      color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n    }\n  }\n}))(Radio);\n\nexport interface SFRadioProps extends RadioProps {\n  label?: React.ReactNode;\n  isGroup?: boolean;\n}\n\nexport const SFRadio = ({\n  label,\n  isGroup = false,\n  ...props\n}: SFRadioProps): React.ReactElement<SFRadioProps> => {\n  if (isGroup) {\n    return <StyledRadio {...props} color='primary' disableRipple />;\n  }\n  return (\n    <FormControl>\n      <SFFormControlBooleanLabel\n        control={<StyledRadio {...props} color='primary' disableRipple />}\n        label={label}\n        disabled={props.disabled}\n      />\n    </FormControl>\n  );\n};\n","import * as React from 'react';\nimport RadioGroup, { RadioGroupProps } from '@material-ui/core/RadioGroup';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport { SFFormControlBooleanLabel } from '../SFFormControlBooleanLabel/SFFormControlBooleanLabel';\nimport { SFRadio } from './SFRadio/SFRadio';\n\nexport interface SFRadioOptionsProps {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\nexport interface SFRadioGroupProps extends RadioGroupProps {\n  label?: string;\n  color?: 'default' | 'primary' | 'secondary' | undefined;\n  options: SFRadioOptionsProps[];\n}\n\nconst StyledRadioGroup = withStyles({\n  root: {\n    '&.MuiFormGroup-row': {\n      gap: '20px'\n    }\n  }\n})(RadioGroup);\n\nexport const SFRadioGroup = ({\n  label,\n  options,\n  ...props\n}: SFRadioGroupProps): React.ReactElement<SFRadioGroupProps> => {\n  return (\n    <FormControl>\n      <label>{label}</label>\n      <StyledRadioGroup {...props} color='primary'>\n        {options.map((opt, i) => {\n          return (\n            <SFFormControlBooleanLabel\n              key={`${opt.value}${i}`}\n              value={opt.value}\n              control={<SFRadio isGroup />}\n              label={opt.label}\n              disabled={opt.disabled}\n            />\n          );\n        })}\n      </StyledRadioGroup>\n    </FormControl>\n  );\n};\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { hexToRgba } from '../../Helpers';\n\nconst SCROLL_BOX_MIN_HEIGHT = 20;\nconst SCROLL_BOX_MIN_WIDTH = 20;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: '100%',\n      position: 'relative'\n    },\n    withHorizontalScroll: {\n      paddingBottom: 12\n    },\n    container: {\n      height: '100%',\n      overflow: 'auto',\n      scrollbarWidth: 'none',\n      msOverflowStyle: 'none',\n\n      '&::-webkit-scrollbar': {\n        display: 'none'\n      }\n    },\n    vScrollBar: {\n      height: '100%',\n      width: '9px',\n      position: 'absolute',\n      right: 3,\n      top: 0,\n      bottom: 0,\n      '@media print': {\n        display: 'none'\n      }\n    },\n    vScrollThumb: {\n      marginLeft: '3px',\n      width: '6px',\n      position: 'absolute',\n      borderRadius: '3px',\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.3)\n          : hexToRgba(SFGrey[500], 0.3)\n    },\n    hScrollBar: {\n      position: 'absolute',\n      width: '100%',\n      height: '9px',\n      left: 0,\n      right: 0,\n      bottom: 0,\n      '@media print': {\n        display: 'none'\n      }\n    },\n    hScrollThumb: {\n      height: '6px',\n      position: 'absolute',\n      borderRadius: '3px',\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.3)\n          : hexToRgba(SFGrey[500], 0.3)\n    }\n  })\n);\n\nconst hasScrollVertical = (elem: HTMLDivElement): boolean =>\n  elem.scrollHeight > elem.clientHeight;\n\nconst hasScrollHorizontal = (elem: HTMLDivElement): boolean =>\n  elem.scrollWidth > elem.clientWidth;\n\nexport interface SFScrollData {\n  host: HTMLDivElement;\n  verticalScroll: number;\n  horizontalScroll: number;\n}\n\nexport interface SFScrollableRefHandler {\n  scrollToTop: () => void;\n}\n\nexport interface SFScrollableProps {\n  className?: string;\n  containerClassName?: string;\n  children: React.ReactNode;\n  onScroll?: (data: SFScrollData) => void;\n}\n\nexport const SFScrollable = React.forwardRef(\n  (\n    { className, containerClassName, children, onScroll }: SFScrollableProps,\n    ref: React.Ref<SFScrollableRefHandler>\n  ) => {\n    const classes = useStyles();\n\n    const scrollHostRef: React.RefObject<HTMLDivElement> = React.useRef<HTMLDivElement>(\n      null\n    );\n\n    React.useImperativeHandle(ref, () => ({\n      scrollToTop(): void {\n        if (scrollHostRef.current) {\n          scrollHostRef.current.scrollTo(0, 0);\n        }\n      }\n    }));\n\n    const [\n      hasHorizontalScroll,\n      setHasHorizontalScroll\n    ] = React.useState<boolean>(false);\n\n    const [\n      verticalScrollHeight,\n      setVerticalScrollHeight\n    ] = React.useState<number>(SCROLL_BOX_MIN_HEIGHT);\n\n    const [\n      horizontalScrollWidth,\n      setHorizontalScrollWidth\n    ] = React.useState<number>(SCROLL_BOX_MIN_WIDTH);\n\n    const [verticalScrollTop, setVerticalScrollTop] = React.useState<number>(0);\n\n    const [\n      horizontalScrollLeft,\n      setHorizontalScrollLeft\n    ] = React.useState<number>(0);\n\n    const [showVerticalScroll, setShowVerticalScroll] = React.useState<boolean>(\n      false\n    );\n\n    const [\n      showHorizontalScroll,\n      setShowHorizontalScroll\n    ] = React.useState<boolean>(false);\n\n    const [isVerticalDragging, setIsVerticalDragging] = React.useState<boolean>(\n      false\n    );\n\n    const [\n      isHorizontalDragging,\n      setIsHorizontalDragging\n    ] = React.useState<boolean>(false);\n\n    const [lastVerticalPos, setLastVerticalPos] = React.useState<number>(0);\n    const [lastHorizontalPos, setLastHorizontalPos] = React.useState<number>(0);\n\n    const updateScrollbar = (elem: HTMLDivElement): void => {\n      const { clientHeight, clientWidth, scrollHeight, scrollWidth } = elem;\n\n      if (hasScrollHorizontal(elem)) {\n        const scrollThumbWidth: number = Math.max(\n          (clientWidth / scrollWidth) * clientWidth,\n          SCROLL_BOX_MIN_WIDTH\n        );\n\n        if (scrollThumbWidth !== horizontalScrollWidth) {\n          setHorizontalScrollWidth(scrollThumbWidth);\n        }\n\n        if (!hasHorizontalScroll) {\n          setHasHorizontalScroll(true);\n        }\n      } else if (hasHorizontalScroll) {\n        setHasHorizontalScroll(false);\n      }\n\n      if (hasScrollVertical(elem)) {\n        const scrollThumbHeight: number = Math.max(\n          (clientHeight / scrollHeight) * clientHeight,\n          SCROLL_BOX_MIN_HEIGHT\n        );\n\n        if (verticalScrollHeight !== scrollThumbHeight) {\n          setVerticalScrollHeight(scrollThumbHeight);\n        }\n      }\n    };\n\n    React.useEffect(() => {\n      const elem: HTMLDivElement = scrollHostRef.current as HTMLDivElement;\n\n      const resizeObserver = new ResizeObserver(() => {\n        updateScrollbar(elem);\n      });\n\n      resizeObserver.observe(elem);\n\n      // cleanup\n      return (): void => {\n        resizeObserver.unobserve(elem);\n      };\n    }, []);\n\n    const onDocumentMouseMove = React.useCallback(\n      (e: MouseEvent) => {\n        if (scrollHostRef.current) {\n          if (isVerticalDragging) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            const {\n              scrollHeight,\n              offsetHeight,\n              offsetTop\n            } = scrollHostRef.current;\n            const deltaY = e.clientY - lastVerticalPos;\n            const percentage = deltaY * (scrollHeight / offsetHeight);\n\n            setLastVerticalPos(e.clientY);\n\n            setVerticalScrollTop(\n              Math.min(\n                Math.max(offsetTop, verticalScrollTop + deltaY),\n                offsetHeight - verticalScrollHeight + offsetTop\n              )\n            );\n\n            scrollHostRef.current.scrollTop = Math.min(\n              scrollHostRef.current.scrollTop + percentage,\n              scrollHeight - offsetHeight\n            );\n          } else if (isHorizontalDragging) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            const { scrollWidth, offsetWidth } = scrollHostRef.current;\n            const deltaX = e.clientX - lastHorizontalPos;\n            const percentage = deltaX * (scrollWidth / offsetWidth);\n\n            setLastHorizontalPos(e.clientX);\n            setHorizontalScrollLeft(\n              Math.min(\n                Math.max(0, horizontalScrollLeft + deltaX),\n                offsetWidth - horizontalScrollWidth\n              )\n            );\n\n            scrollHostRef.current.scrollLeft = Math.min(\n              scrollHostRef.current.scrollLeft + percentage,\n              scrollWidth - offsetWidth\n            );\n\n            if (onScroll) {\n              onScroll({\n                verticalScroll: verticalScrollTop,\n                horizontalScroll: horizontalScrollLeft,\n                host: scrollHostRef.current\n              });\n            }\n          }\n        }\n      },\n      [[isHorizontalDragging, isVerticalDragging]]\n    );\n\n    const onDocumentMouseUp = React.useCallback(\n      (e: MouseEvent) => {\n        if (isVerticalDragging) {\n          e.preventDefault();\n          setIsVerticalDragging(false);\n          setShowVerticalScroll(false);\n        } else if (isHorizontalDragging) {\n          e.preventDefault();\n          setIsHorizontalDragging(false);\n          setShowHorizontalScroll(false);\n        }\n      },\n      [[isHorizontalDragging, isVerticalDragging]]\n    );\n\n    React.useEffect(() => {\n      // handle scrollbar dragging\n      document.addEventListener('mousemove', onDocumentMouseMove);\n      document.addEventListener('mouseup', onDocumentMouseUp);\n      document.addEventListener('mouseleave', onDocumentMouseUp);\n\n      // cleanup\n      return (): void => {\n        document.removeEventListener('mousemove', onDocumentMouseMove);\n        document.removeEventListener('mouseup', onDocumentMouseUp);\n        document.removeEventListener('mouseleave', onDocumentMouseUp);\n      };\n    }, [onDocumentMouseMove, onDocumentMouseUp]);\n\n    React.useEffect(() => {\n      if (scrollHostRef.current) {\n        updateScrollbar(scrollHostRef.current as HTMLDivElement);\n      }\n    }, [children]);\n\n    const onMouseOver = (): void => {\n      if (scrollHostRef.current) {\n        if (hasScrollVertical(scrollHostRef.current) && !showVerticalScroll) {\n          setShowVerticalScroll(true);\n        }\n\n        if (\n          hasScrollHorizontal(scrollHostRef.current) &&\n          !showHorizontalScroll\n        ) {\n          setShowHorizontalScroll(true);\n        }\n      }\n    };\n\n    const onMouseOut = (): void => {\n      if (showHorizontalScroll && !isHorizontalDragging) {\n        setShowHorizontalScroll(false);\n      }\n\n      if (showVerticalScroll && !isVerticalDragging) {\n        setShowVerticalScroll(false);\n      }\n    };\n\n    const onVerticalScrollMouseDown: React.MouseEventHandler<HTMLDivElement> = (\n      e\n    ) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      setLastVerticalPos(e.clientY);\n      setIsVerticalDragging(true);\n    };\n\n    const onHorizontalScrollMouseDown: React.MouseEventHandler<HTMLDivElement> = (\n      e\n    ) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      setLastHorizontalPos(e.clientX);\n      setIsHorizontalDragging(true);\n    };\n\n    const onHostScroll = (): void => {\n      if (scrollHostRef.current) {\n        const {\n          scrollTop,\n          scrollHeight,\n          scrollLeft,\n          scrollWidth,\n          offsetHeight,\n          offsetWidth\n        } = scrollHostRef.current;\n\n        let newTop = (scrollTop / scrollHeight) * offsetHeight;\n        newTop = Math.min(newTop, offsetHeight - verticalScrollHeight);\n\n        let newLeft = (scrollLeft / scrollWidth) * offsetWidth;\n        newLeft = Math.min(newLeft, offsetWidth - horizontalScrollLeft);\n\n        if (newTop !== verticalScrollTop) {\n          setVerticalScrollTop(newTop);\n        }\n\n        if (newLeft !== horizontalScrollLeft) {\n          setHorizontalScrollLeft(newLeft);\n        }\n\n        if (onScroll) {\n          onScroll({\n            verticalScroll: newTop,\n            horizontalScroll: newLeft,\n            host: scrollHostRef.current\n          });\n        }\n      }\n    };\n\n    return (\n      <div\n        className={`${classes.root} ${\n          hasHorizontalScroll ? classes.withHorizontalScroll : ''\n        } ${className || ''}`}\n        onMouseOver={onMouseOver}\n        onTouchStart={onMouseOver}\n        onMouseOut={onMouseOut}\n        onTouchEnd={onMouseOut}\n      >\n        <div\n          className={`${classes.container} ${containerClassName || ''}`}\n          ref={scrollHostRef}\n          onScroll={onHostScroll}\n        >\n          {children}\n        </div>\n\n        <div\n          className={classes.vScrollBar}\n          style={{ opacity: showVerticalScroll ? 1 : 0 }}\n        >\n          <div\n            className={classes.vScrollThumb}\n            style={{ height: verticalScrollHeight, top: verticalScrollTop }}\n            onMouseDown={onVerticalScrollMouseDown}\n          />\n        </div>\n\n        <div\n          className={classes.hScrollBar}\n          style={{ opacity: showHorizontalScroll ? 1 : 0 }}\n        >\n          <div\n            className={classes.hScrollThumb}\n            style={{ width: horizontalScrollWidth, left: horizontalScrollLeft }}\n            onMouseDown={onHorizontalScrollMouseDown}\n          />\n        </div>\n      </div>\n    );\n  }\n);\n","import * as React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { SelectProps } from '@material-ui/core';\nimport { SFTextField } from '../SFTextField/SFTextField';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { SFMenuItem } from '../SFMenuItem/SFMenuItem';\n\nconst StyledSelect = withStyles(() => ({\n  root: {\n    '& svg': {\n      position: 'absolute',\n      right: 18,\n      pointerEvents: 'none',\n      top: 'auto'\n    }\n  }\n}))(SFTextField);\n\nexport interface SFMenuOption {\n  label: string;\n  value: string;\n}\n\nexport interface SFSelectProps extends SelectProps {\n  options: SFMenuOption[];\n  value?: string;\n  helperText?: React.ReactNode;\n}\n\nexport const SFSelect = ({\n  options,\n  helperText,\n  label,\n  value,\n  ...props\n}: SFSelectProps): React.ReactElement<SFSelectProps> => {\n  return (\n    <StyledSelect\n      select\n      fullWidth\n      label={label}\n      helperText={helperText}\n      error={props.error}\n      value={value}\n      disabled={props.disabled}\n      SelectProps={{\n        ...props,\n        IconComponent: (props): React.ReactElement => (\n          <SFIcon icon='Down-2' size='16' {...props} />\n        ),\n        MenuProps: {\n          variant: 'menu',\n          autoFocus: false,\n          disableAutoFocusItem: true\n        }\n      }}\n    >\n      {options.map((option: SFMenuOption, index: number) => (\n        <SFMenuItem key={`option-${index}`} value={option.value}>\n          {option.label}\n        </SFMenuItem>\n      ))}\n    </StyledSelect>\n  );\n};\n","import React from 'react';\nimport { Skeleton, SkeletonProps } from '@material-ui/lab';\n\nexport interface SFSkeletonProps extends SkeletonProps {}\n\nexport const SFSkeleton = (props: SFSkeletonProps) => {\n  return <Skeleton {...props} />;\n};\n","import * as React from 'react';\nimport { makeStyles, withStyles, Theme } from '@material-ui/core/styles';\nimport {\n  ButtonGroup,\n  Popper,\n  ClickAwayListener,\n  MenuList\n} from '@material-ui/core';\nimport { SFButton } from '../SFButton/SFButton';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { SFGrey, SFBlue, SFTextWhite } from '../../SFColors/SFColors';\nimport { SFPaper } from '../SFPaper/SFPaper';\nimport { SFMenuItem } from '../SFMenuItem/SFMenuItem';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  paper: {\n    borderRadius: 2\n  },\n  iconButton: {\n    '& svg': {\n      '& path': {\n        fill: (props: Partial<SFSplitButtonProps>): string => {\n          const isLight: boolean = theme.palette.type === 'light';\n          if (props.sfColor === 'grey') {\n            return `${isLight ? SFGrey[900] : SFGrey[50]} !important`;\n          } else {\n            if (props.variant === 'outlined') {\n              return `${isLight ? SFBlue[500] : SFBlue[200]} !important`;\n            }\n            return `${isLight ? SFTextWhite : SFGrey[900]} !important`;\n          }\n        }\n      }\n    },\n    '&:hover': {\n      '& svg': {\n        '& path': {\n          fill: (props: Partial<SFSplitButtonProps>): string => {\n            const isLight: boolean = theme.palette.type === 'light';\n            if (props.variant === 'outlined' && props.sfColor === 'blue') {\n              return `${isLight ? SFBlue[700] : SFBlue[300]} !important`;\n            }\n            return 'auto';\n          }\n        }\n      }\n    },\n    '&:active': {\n      '& svg': {\n        '& path': {\n          fill: (props: Partial<SFSplitButtonProps>): string => {\n            const isLight: boolean = theme.palette.type === 'light';\n            if (props.variant === 'outlined' && props.sfColor === 'blue') {\n              return `${isLight ? SFBlue[800] : SFBlue[400]} !important`;\n            }\n            return 'auto';\n          }\n        }\n      }\n    }\n  }\n}));\n\nconst StyledButtonGroup = withStyles((theme: Theme) => ({\n  root: {\n    boxShadow: 'none'\n  },\n  grouped: {\n    '&:last-child': {\n      padding: '0 !important'\n    }\n  },\n  groupedContainedHorizontal: {\n    '&:first-child': {\n      borderRight: `1px solid ${theme.palette.background.default}`\n    }\n  }\n}))(ButtonGroup);\n\nexport interface SFSplitButtonOption {\n  label: string;\n  disabled?: boolean;\n  onClick: () => void;\n}\n\nexport interface SFSplitButtonProps {\n  options: SFSplitButtonOption[];\n  defaultSelected?: number;\n  variant: 'outlined' | 'contained';\n  sfColor: 'blue' | 'grey';\n  size?: 'medium' | 'large';\n}\n\nexport const SFSplitButton = ({\n  options,\n  defaultSelected = 0,\n  variant = 'contained',\n  sfColor = 'blue',\n  size = 'medium'\n}: SFSplitButtonProps): React.ReactElement<SFSplitButtonProps> => {\n  const classes = useStyles({ variant, sfColor });\n\n  const [isMenuOpen, setIsMenuOpen] = React.useState<boolean>(false);\n  const [selectedItemIndex, setSelectedItemIndex] = React.useState<number>(\n    defaultSelected\n  );\n  const refMenu = React.useRef<HTMLDivElement>(null);\n\n  const onMenuItemClick = (index: number): void => {\n    setSelectedItemIndex(index);\n    setIsMenuOpen(false);\n  };\n\n  const onToggleMenu = (): void => {\n    setIsMenuOpen((prevOpen) => !prevOpen);\n  };\n\n  const onClickAway = (event: React.MouseEvent<Document, MouseEvent>): void => {\n    if (\n      refMenu.current &&\n      refMenu.current.contains(event.target as HTMLElement)\n    ) {\n      return;\n    }\n\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <div>\n      <StyledButtonGroup ref={refMenu} variant={variant} size='medium'>\n        <SFButton\n          sfColor={sfColor}\n          size={size}\n          onClick={options[selectedItemIndex].onClick}\n        >\n          {options[selectedItemIndex].label}\n        </SFButton>\n\n        <SFButton\n          sfColor={sfColor}\n          className={classes.iconButton}\n          size={size}\n          aria-controls={isMenuOpen ? 'split-button-menu' : undefined}\n          aria-expanded={isMenuOpen ? 'true' : undefined}\n          aria-haspopup='menu'\n          onClick={onToggleMenu}\n        >\n          <SFIcon icon='Down-2' size={13} />\n        </SFButton>\n      </StyledButtonGroup>\n\n      <Popper\n        style={{ zIndex: 1 }}\n        open={isMenuOpen}\n        anchorEl={refMenu.current}\n        placement='bottom-end'\n        disablePortal\n      >\n        <SFPaper className={classes.paper} elevation={8}>\n          <ClickAwayListener onClickAway={onClickAway}>\n            <MenuList id='split-button-menu'>\n              {options.map((option, index) => (\n                <SFMenuItem\n                  key={option.label}\n                  disabled={option.disabled}\n                  selected={index === selectedItemIndex}\n                  onClick={(): void => onMenuItemClick(index)}\n                >\n                  {option.label}\n                </SFMenuItem>\n              ))}\n            </MenuList>\n          </ClickAwayListener>\n        </SFPaper>\n      </Popper>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport Switch, { SwitchProps } from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport { SFSurfaceLight, SFSurfaceDark, SFGrey } from '../../SFColors/SFColors';\nimport { SFFormControlBooleanLabel } from '../SFFormControlBooleanLabel/SFFormControlBooleanLabel';\n\nconst StyledSwitch = withStyles((theme: Theme) => ({\n  root: {\n    display: 'flex',\n    width: 60,\n    height: 42,\n    padding: 11,\n\n    '& .MuiButtonBase-root': {\n      '& .MuiIconButton-label': {\n        '& .MuiSwitch-thumb': {\n          width: 12,\n          height: 12,\n          margin: '6px'\n        }\n      },\n\n      '&.Mui-checked': {\n        transform: 'translateX(17px)'\n      }\n    },\n\n    '& .MuiSwitch-track': {\n      height: '16px'\n    },\n\n    '&.MuiSwitch-sizeSmall': {\n      width: 49,\n      height: 34,\n      padding: 8,\n\n      '& .MuiButtonBase-root': {\n        '&.Mui-checked': {\n          transform: 'translateX(14px)'\n        },\n\n        '& .MuiIconButton-label': {\n          '& .MuiSwitch-thumb': {\n            width: 10,\n            height: 10,\n            margin: '8px'\n          }\n        }\n      },\n\n      '& .MuiSwitch-track': {\n        height: '14px'\n      },\n\n      '& + .MuiFormControlLabel-label': {\n        lineHeight: '20px'\n      }\n    }\n  },\n  switchBase: {\n    color: theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400],\n\n    '&:hover': {\n      '@media (hover: hover)': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? `rgba(204, 204, 204, 0.3)`\n            : `rgba(128, 128, 128, 0.3)`\n      }\n    },\n\n    '&:active': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? `rgba(204, 204, 204, 0.5)`\n          : `rgba(128, 128, 128, 0.2)`\n    },\n\n    '&.Mui-checked': {\n      color: theme.palette.type === 'light' ? SFSurfaceLight : SFSurfaceDark,\n\n      '& + $track': {\n        opacity: 1,\n        backgroundColor: theme.palette.primary.main,\n        borderColor: theme.palette.primary.main\n      },\n\n      '&:hover': {\n        '@media (hover: hover)': {\n          backgroundColor:\n            theme.palette.type === 'light'\n              ? `rgba(204, 235, 255, 0.4)`\n              : `rgba(128, 198, 255, 0.2)`\n        }\n      },\n\n      '&:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? `rgba(204, 235, 255, 0.6)`\n            : `rgba(128, 198, 255, 0.1)`\n      }\n    },\n\n    '&.Mui-disabled': {\n      color: theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700],\n\n      '& + $track': {\n        opacity: 1,\n        backgroundColor: 'transparent',\n        borderColor: theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n      },\n\n      '&.Mui-checked': {\n        color: theme.palette.type === 'light' ? SFSurfaceLight : SFSurfaceDark,\n\n        '& + $track': {\n          backgroundColor:\n            theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700],\n          borderColor:\n            theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n        }\n      }\n    }\n  },\n  thumb: {\n    boxShadow: 'none'\n  },\n  track: {\n    border: `2px solid ${theme.palette.grey[600]}`,\n    borderRadius: 10,\n    opacity: 1,\n    backgroundColor:\n      theme.palette.type === 'light' ? SFSurfaceLight : SFSurfaceDark\n  }\n}))(Switch);\n\nexport interface SFSwitchProps extends SwitchProps {\n  label?: React.ReactNode;\n  sfColor?: 'primary' | 'default';\n}\n\nexport const SFSwitch = ({\n  sfColor = 'primary',\n  label,\n  size = 'medium',\n  ...props\n}: SFSwitchProps): React.ReactElement<SFSwitchProps> => {\n  return (\n    <FormControl>\n      <SFFormControlBooleanLabel\n        control={\n          <StyledSwitch\n            {...props}\n            color={sfColor}\n            disableRipple\n            disableTouchRipple\n            disableFocusRipple\n            size={size}\n          />\n        }\n        label={label}\n      />\n    </FormControl>\n  );\n};\n","import React, { forwardRef } from 'react';\nimport {\n  withStyles,\n  Theme,\n  makeStyles,\n  createStyles,\n  useTheme\n} from '@material-ui/core/styles';\nimport { Paper, CheckboxProps } from '@material-ui/core';\nimport MaterialTable, {\n  MTableBodyRow,\n  MaterialTableProps,\n  Column,\n  Options,\n  Icons\n} from 'material-table';\nimport { SFBlue, SFGrey } from '../../SFColors/SFColors';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { hexToRgba } from '../../Helpers';\n\nconst StyledRow = withStyles((theme: Theme) => ({\n  root: {\n    '&.MuiTableRow-hover:hover, &:hover': {\n      '@media (hover: hover)': {\n        backgroundColor: `${\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey[200], 0.3)\n            : hexToRgba(SFGrey[500], 0.3)\n        } !important`\n      }\n    }\n  }\n}))(MTableBodyRow);\n\nconst StyledContainer = withStyles({\n  root: {\n    padding: '24px 24px 34px 24px',\n    width: 'auto',\n    '& th:not(.MuiTableCell-paddingNone)': {\n      padding: 20\n    }\n  }\n})(Paper);\n\nconst useSelectionStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`\n    },\n    colorSecondary: {\n      '&.Mui-checked': {\n        color: `${theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]}`\n      },\n      '&:hover': {\n        '@media (hover: hover)': {\n          backgroundColor:\n            theme.palette.type === 'light'\n              ? hexToRgba(SFGrey[200], 0.3)\n              : hexToRgba(SFGrey[500], 0.3)\n        }\n      },\n      '&:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey[200], 0.5)\n            : hexToRgba(SFGrey[500], 0.2)\n      },\n      '&.Mui-checked:hover': {\n        '@media (hover: hover)': {\n          backgroundColor:\n            theme.palette.type === 'light'\n              ? hexToRgba(SFBlue[100], 0.4)\n              : hexToRgba(SFBlue[200], 0.2)\n        }\n      },\n      '&.Mui-checked:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFBlue[100], 0.6)\n            : hexToRgba(SFBlue[200], 0.1)\n      },\n      '&.Mui-disabled': {\n        color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n      }\n    }\n  })\n);\n\nconst iconSize = 16;\n\nconst tableIcons: Icons = {\n  Add: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Add' {...props} {...ref} size={iconSize} />\n  )),\n  Check: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Check-2' {...props} {...ref} size={iconSize} />\n  )),\n  Clear: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Close' {...props} {...ref} size={iconSize} />\n  )),\n  Delete: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Trash' {...props} {...ref} size={iconSize} />\n  )),\n  Edit: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Pencil' {...props} {...ref} size={iconSize} />\n  )),\n  Export: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Download' {...props} {...ref} size={iconSize} />\n  )),\n  Filter: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Filter' {...props} {...ref} size={iconSize} />\n  )),\n  FirstPage: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Left-3' {...props} {...ref} size={iconSize} />\n  )),\n  LastPage: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Right-3' {...props} {...ref} size={iconSize} />\n  )),\n  NextPage: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Right-2' {...props} {...ref} size={iconSize} />\n  )),\n  PreviousPage: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Left-2' {...props} {...ref} size={iconSize} />\n  )),\n  ResetSearch: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Close' {...props} {...ref} size={iconSize} />\n  )),\n  Search: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Search' {...props} {...ref} size={iconSize} />\n  )),\n  SortArrow: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Up-7' {...props} {...ref} size={iconSize} />\n  )),\n  ThirdStateCheck: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Remove' {...props} {...ref} size={iconSize} />\n  )),\n  ViewColumn: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Eye' {...props} {...ref} size={iconSize} />\n  ))\n};\n\ninterface RowTableData {\n  id: number;\n  checked: boolean;\n}\n\nconst defaultOptions = {\n  sorting: false,\n  search: false,\n  toolbar: false,\n  showTitle: false,\n  paging: false,\n  draggable: false,\n  selection: false\n};\n\nexport type RowData = {\n  [key: string]: number | string | boolean | undefined;\n} & { tableData?: RowTableData };\n\nexport interface SFTableColumn extends Column<RowData> {}\nexport interface SFTableOptions extends Options<RowData> {}\nexport interface SFTableProps extends MaterialTableProps<RowData> {\n  className?: string;\n  elevation?: number;\n  columns: SFTableColumn[];\n  options?: SFTableOptions;\n}\n\nexport const SFTable = ({\n  className = '',\n  elevation = 2,\n  columns,\n  options,\n  ...props\n}: SFTableProps): React.ReactElement<SFTableProps> => {\n  options = { ...defaultOptions, ...options };\n  const theme = useTheme();\n  const iconCheckedColor: string = theme.palette.primary.main;\n  const iconUncheckedColor: string =\n    theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400];\n\n  const selectionProps: CheckboxProps = {\n    classes: useSelectionStyles(props),\n    checkedIcon: (\n      <SFIcon icon='Checkbox-Selected' size={18} color={iconCheckedColor} />\n    ),\n    icon: (\n      <SFIcon icon='Checkbox-Unselected' size={18} color={iconUncheckedColor} />\n    )\n  };\n\n  const customColumns: SFTableColumn[] = columns.map(\n    (column: SFTableColumn) => {\n      return {\n        ...column,\n        cellStyle: {\n          padding: 20,\n          borderBottom: `1px solid  ${\n            theme.palette.type === 'light' ? SFGrey[100] : SFGrey[700]\n          }`,\n          color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`,\n          fontWeight: 400,\n          fontSize: 14\n        }\n      };\n    }\n  );\n\n  const customOptions: SFTableOptions = {\n    ...options,\n    headerStyle: {\n      borderBottom: `2px solid  ${\n        theme.palette.type === 'light' ? SFGrey[100] : SFGrey[700]\n      }`,\n      fontWeight: 500,\n      color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`,\n      fontSize: 14\n    },\n    rowStyle: (rowData: RowData): React.CSSProperties => {\n      if (rowData?.tableData?.checked) {\n        return {\n          backgroundColor:\n            theme.palette.type === 'light'\n              ? hexToRgba(SFGrey[200], 0.5)\n              : hexToRgba(SFGrey[500], 0.2)\n        };\n      }\n      return {};\n    },\n    selectionProps: {\n      ...selectionProps\n    },\n    headerSelectionProps: {\n      indeterminate: false,\n      ...selectionProps\n    }\n  };\n\n  return (\n    <MaterialTable\n      {...props}\n      icons={tableIcons}\n      columns={customColumns}\n      options={customOptions}\n      components={{\n        // eslint-disable-next-line\n        Container: (props: any): JSX.Element => (\n          <StyledContainer\n            {...props}\n            className={className}\n            elevation={elevation}\n          />\n        ),\n        // eslint-disable-next-line\n        Row: (props: any): JSX.Element => <StyledRow {...props} />\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport MomentUtils from '@date-io/moment';\n\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardTimePickerProps\n} from '@material-ui/pickers';\n\nimport { SFBlue, SFGrey, SFRed } from '../../SFColors/SFColors';\n\nconst StyledTimePicker = withStyles((theme: Theme) => ({\n  root: {\n    boxSizing: 'border-box',\n\n    '& .MuiFilledInput-root': {\n      height: '56px',\n      backgroundColor: theme.palette.background.paper,\n      border: `1px solid ${\n        theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n      }`,\n      borderRadius: 2,\n      boxSizing: 'border-box',\n\n      '&:before': {\n        content: `none !important`\n      },\n\n      '&:after': {\n        content: `none !important`\n      },\n\n      '&:hover': {\n        '@media (hover: hover)': {\n          borderColor: `${\n            theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n          }`\n        }\n      },\n\n      '&.Mui-focused': {\n        border: `2px solid ${\n          theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        }`,\n\n        '& .MuiFilledInput-input': {\n          padding: '26px 10px 7px'\n        }\n      },\n\n      '&.Mui-error': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n        } !important`,\n\n        '& .MuiFilledInput-input': {\n          padding: '26px 11px 7px !important'\n        }\n      },\n\n      '&.Mui-disabled': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n        }`\n      },\n\n      '& .MuiFilledInput-input': {\n        fontWeight: 400,\n        fontSize: '16px',\n        padding: '26px 11px 7px',\n\n        '&.Mui-disabled': {\n          color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n        }\n      }\n    },\n\n    '& .MuiInputLabel-filled': {\n      fontSize: '16px',\n      lineHeight: '24px',\n      color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`,\n\n      '&.MuiInputLabel-shrink': {\n        fontSize: '14px',\n        lineHeight: '20px',\n        transform: `translate(12px, 6px)`\n      },\n\n      '&.Mui-focused': {\n        color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n      },\n\n      '&.Mui-error': {\n        color: `${theme.palette.type === 'light' ? SFRed[700] : SFRed[200]}`\n      },\n\n      '&.Mui-disabled': {\n        color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n      }\n    },\n\n    '& .MuiFormHelperText-root': {\n      backgroundColor: 'transparent',\n\n      '&.Mui-error': {\n        color: `${theme.palette.type === 'light' ? SFRed[700] : SFRed[200]}`\n      }\n    }\n  }\n}))(KeyboardTimePicker);\n\nexport interface SFTimeFieldProps extends KeyboardTimePickerProps {}\n\nexport const SFTimeField = ({\n  placeholder = '08:00 AM',\n  ...props\n}: SFTimeFieldProps): React.ReactElement<SFTimeFieldProps> => {\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <StyledTimePicker\n        {...props}\n        fullWidth\n        variant='inline'\n        inputVariant='filled'\n        disableToolbar\n        mask='__:__ _M'\n        keyboardIcon={null}\n      />\n    </MuiPickersUtilsProvider>\n  );\n};\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { Tooltip, TooltipProps } from '@material-ui/core';\nimport { SFGrey, SFRed } from '../../SFColors/SFColors';\n\nconst getBackgroundColor = (\n  props: Partial<SFTooltipProps>,\n  isLight: boolean\n): string => {\n  if (props.sfColor === 'red') {\n    return isLight ? SFRed[700] : SFRed[200];\n  } else {\n    return isLight ? SFGrey[800] : (SFGrey.A100 as string);\n  }\n};\n\nconst getTitleColor = (\n  props: Partial<SFTooltipProps>,\n  isLight: boolean\n): string => {\n  if (props.sfColor === 'red') {\n    return isLight ? SFRed[50] : SFRed[900];\n  } else {\n    return isLight ? SFGrey[50] : SFGrey[900];\n  }\n};\n\nconst getContentColor = (\n  props: Partial<SFTooltipProps>,\n  isLight: boolean\n): string => {\n  if (props.sfColor === 'red') {\n    return isLight ? SFRed[100] : SFRed[800];\n  } else {\n    return isLight ? (SFGrey.A200 as string) : SFGrey[700];\n  }\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  tooltip: {\n    padding: '5px 12px',\n    backgroundColor: (props: Partial<SFTooltipProps>): string =>\n      getBackgroundColor(props, theme.palette.type === 'light')\n  },\n  arrow: {\n    color: (props: Partial<SFTooltipProps>): string =>\n      getBackgroundColor(props, theme.palette.type === 'light')\n  },\n  title: {\n    fontWeight: 500,\n    fontSize: '13px',\n    lineHeight: '22px',\n    color: (props: Partial<SFTooltipProps>): string =>\n      getTitleColor(props, theme.palette.type === 'light')\n  },\n  content: {\n    fontSize: '12px',\n    lineHeight: '18px',\n    color: (props: Partial<SFTooltipProps>): string =>\n      getContentColor(props, theme.palette.type === 'light')\n  }\n}));\n\nexport interface SFTooltipProps extends TooltipProps {\n  title: string;\n  content?: React.ReactNode;\n  sfColor?: 'default' | 'red';\n}\n\nexport const SFTooltip = ({\n  title,\n  content,\n  sfColor = 'default',\n  arrow = true,\n  ...props\n}: SFTooltipProps): React.ReactElement<SFTooltipProps> => {\n  const classes = useStyles({ sfColor });\n\n  const tooltipTitle: React.ReactNode = (\n    <React.Fragment>\n      <span className={classes.title}>{title}</span>\n      {content && <div className={classes.content}>{content}</div>}\n    </React.Fragment>\n  );\n\n  return (\n    <Tooltip\n      classes={{ tooltip: classes.tooltip, arrow: classes.arrow }}\n      arrow={arrow}\n      title={tooltipTitle}\n      {...props}\n    />\n  );\n};\n","import * as React from 'react';\n\nimport {\n  Timeline,\n  TimelineConnector,\n  TimelineContent,\n  TimelineDot,\n  TimelineItem,\n  TimelineSeparator\n} from '@material-ui/lab';\n\nimport { makeStyles, Theme, withStyles } from '@material-ui/core';\nimport { SFBlue, SFGrey } from '../../SFColors/SFColors';\nimport { hexToRgba } from '../../Helpers';\n\nconst StyledTimelineDot = withStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200],\n    margin: '0px',\n    padding: '2px',\n    boxShadow: 'none'\n  }\n}))(TimelineDot);\n\nconst StyledTimelineContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: '12px',\n    marginTop: '-16px',\n    marginBottom: '16px',\n\n    '&:hover': {\n      '@media (hover: hover)': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFBlue[100], 0.4)\n            : hexToRgba(SFBlue[200], 0.2)\n      }\n    }\n  }\n}))(TimelineContent);\n\nconst StyledTimelineItem = withStyles(() => ({\n  root: {\n    gap: '3px',\n\n    '&:hover': {\n      '@media (hover: hover)': {\n        cursor: 'pointer'\n      }\n    },\n\n    '&::before': {\n      content: 'none'\n    }\n  }\n}))(TimelineItem);\n\nconst StyledTimelineConnector = withStyles((theme: Theme) => ({\n  root: {\n    width: '0px',\n    backgroundColor: 'transparent',\n    borderLeft: `1px dashed ${\n      theme.palette.type === 'light' ? SFGrey[200] : SFGrey[500]\n    }`\n  }\n}))(TimelineConnector);\n\nconst StyledTimeline = withStyles(() => ({\n  root: {\n    margin: '16px 0 0',\n    padding: 0\n  }\n}))(Timeline);\n\nexport interface SFTimelineItem {\n  title: string;\n  subtitle: string;\n}\n\nexport interface SFTimelineProps {\n  className?: string;\n  items: SFTimelineItem[];\n  size?: 'medium' | 'large';\n  selectedIndex?: number;\n  onItemClick?: (item: SFTimelineItem) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  text: {\n    fontSize: ({ size }: Partial<SFTimelineProps>): string =>\n      size === 'large' ? '16px' : '14px',\n    lineHeight: ({ size }: Partial<SFTimelineProps>): string =>\n      size === 'large' ? '24px' : '20px'\n  },\n  title: {\n    fontWeight: 500\n  },\n  subtitle: {\n    color: theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]\n  },\n  isSelected: {\n    backgroundColor:\n      theme.palette.type === 'light'\n        ? hexToRgba(SFBlue[100], 0.6)\n        : hexToRgba(SFBlue[200], 0.1)\n  },\n  lastItem: {\n    marginBottom: '0px'\n  }\n}));\n\nexport const SFTimeline = ({\n  className = '',\n  items,\n  selectedIndex = 0,\n  size = 'medium',\n  onItemClick\n}: SFTimelineProps): React.ReactElement<SFTimelineProps> => {\n  const classes = useStyles({ size });\n  const itemsLength: number = items.length;\n\n  return (\n    <StyledTimeline align='left' className={className}>\n      {items.map((item: SFTimelineItem, index: number) => {\n        const hasConnector: boolean =\n          (index > 0 && index < itemsLength - 1) ||\n          (index === 0 && itemsLength > 1);\n\n        return (\n          <div\n            key={`timeline-item-${index}`}\n            onClick={(): void => onItemClick && onItemClick(item)}\n          >\n            <StyledTimelineItem>\n              <TimelineSeparator>\n                <StyledTimelineDot />\n                {hasConnector && <StyledTimelineConnector />}\n              </TimelineSeparator>\n              <StyledTimelineContent\n                className={`${classes.text} ${\n                  selectedIndex === index ? classes.isSelected : ''\n                } ${index === itemsLength - 1 ? classes.lastItem : ''}`}\n              >\n                <span className={classes.title}>{item.title}</span>\n                <br />\n                <span className={classes.subtitle}>{item.subtitle}</span>\n              </StyledTimelineContent>\n            </StyledTimelineItem>\n          </div>\n        );\n      })}\n    </StyledTimeline>\n  );\n};\n","import { SFThemeOptions } from './SFTheme';\n\nconst CommonThemeOptions: SFThemeOptions = {\n  props: {\n    MuiButtonBase: {\n      disableRipple: true\n    },\n    MuiDrawer: {\n      elevation: 24\n    }\n  },\n  shape: {\n    borderRadius: 2\n  },\n  overrides: {\n    MuiFormControlLabel: {\n      root: {\n        marginRight: 0\n      }\n    },\n    MuiIconButton: {\n      colorPrimary: {\n        '&:hover': {\n          borderRadius: '50%'\n        },\n        '&:active': {\n          borderRadius: '50%'\n        }\n      }\n    },\n    MuiButton: {\n      root: {\n        // Needed for color transitions between enabled and disabled (Safari)\n        transition: 'color .01s',\n        '&.Mui-disabled span': { transition: '.01s' },\n        padding: '4px 10px',\n        height: '30px',\n        boxSizing: 'border-box'\n      },\n      label: {\n        textTransform: 'none'\n      }\n    },\n    MuiPaper: {\n      elevation1: {\n        boxShadow:\n          '0px 2px 1px -1px rgba(0,0,0,0.02), 0px 1px 1px rgba(0,0,0,0.14), 0px 1px 3px rgba(0,0,0,0.12)'\n      },\n      elevation2: {\n        boxShadow:\n          '0px 3px 1px -2px rgba(0, 0, 0, 0.02), 0px 2px 2px rgba(0, 0, 0, 0.14), 0px 1px 5px rgba(0, 0, 0, 0.12)'\n      },\n      elevation3: {\n        boxShadow:\n          '0px 3px 3px -2px rgba(0, 0, 0, 0.02), 0px 3px 4px rgba(0, 0, 0, 0.14), 0px 1px 8px rgba(0, 0, 0, 0.12)'\n      },\n      elevation4: {\n        boxShadow:\n          '0px 2px 4px -1px rgba(0, 0, 0, 0.02), 0px 4px 5px rgba(0, 0, 0, 0.14), 0px 1px 10px rgba(0, 0, 0, 0.12)'\n      },\n      elevation6: {\n        boxShadow:\n          '0px 3px 5px -1px rgba(0, 0, 0, 0.02), 0px 6px 10px rgba(0, 0, 0, 0.14), 0px 1px 18px rgba(0, 0, 0, 0.12)'\n      },\n      elevation8: {\n        boxShadow:\n          '0px 5px 5px -3px rgba(0, 0, 0, 0.02), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12)'\n      },\n      elevation9: {\n        boxShadow:\n          '0px 5px 6px -3px rgba(0, 0, 0, 0.02), 0px 9px 12px 1px rgba(0, 0, 0, 0.14), 0px 3px 16px 2px rgba(0, 0, 0, 0.12)'\n      },\n      elevation12: {\n        boxShadow:\n          '0px 7px 8px -4px rgba(0, 0, 0, 0.02), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12)'\n      },\n      elevation16: {\n        boxShadow:\n          '0px 8px 10px -5px rgba(0, 0, 0, 0.02), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12)'\n      },\n      elevation24: {\n        boxShadow:\n          '0px 11px 15px -7px rgba(0, 0, 0, 0.02), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12)'\n      }\n    }\n  }\n};\n\nexport { CommonThemeOptions };\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { CommonThemeOptions } from './CommonThemeOptions';\n\nimport {\n  SFGrey,\n  SFBlue,\n  SFBlueMainDark,\n  SFRedMainDark,\n  SFBackgroundDark,\n  SFSurfaceDark,\n  SFTextWhite\n} from '../SFColors/SFColors';\n\nCommonThemeOptions.palette = {\n  type: 'dark',\n  text: {\n    primary: SFTextWhite\n  },\n  primary: {\n    main: SFBlueMainDark\n  },\n  secondary: {\n    main: SFRedMainDark\n  },\n  background: {\n    default: SFBackgroundDark,\n    paper: SFSurfaceDark\n  },\n  grey: SFGrey,\n  // TODO - action prop is work in progress\n  action: {\n    active: SFGrey[500],\n    activatedOpacity: 0.3,\n    hover: SFBlue[200],\n    hoverOpacity: 0.3,\n    selected: SFBlue[200],\n    selectedOpacity: 0.1,\n    disabled: SFGrey[600],\n    disabledBackground: SFGrey[800],\n    disabledOpacity: 0.38,\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12\n  }\n};\n\nconst NightTheme = createMuiTheme(CommonThemeOptions);\n\nexport { NightTheme };\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { CommonThemeOptions } from './CommonThemeOptions';\nimport {\n  SFGrey,\n  SFBlue,\n  SFBlueMainLight,\n  SFRedMainLight,\n  SFBackgroundLight,\n  SFSurfaceLight,\n  SFTextBlack\n} from '../SFColors/SFColors';\n\nCommonThemeOptions.palette = {\n  type: 'light',\n  text: {\n    primary: SFTextBlack\n  },\n  primary: {\n    main: SFBlueMainLight\n  },\n  secondary: {\n    main: SFRedMainLight\n  },\n  background: {\n    default: SFBackgroundLight,\n    paper: SFSurfaceLight\n  },\n  grey: SFGrey,\n  // TODO - action prop is work in progress\n  action: {\n    active: SFGrey[200],\n    activatedOpacity: 0.3,\n    hover: SFBlue[100],\n    hoverOpacity: 0.04,\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    disabledOpacity: 0.38,\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12\n  }\n};\n\nconst DayTheme = createMuiTheme(CommonThemeOptions);\n\nexport { DayTheme };\n","/**\n * Hypertext Transfer Protocol (HTTP) response status codes.\n * @see {@link https://datatracker.ietf.org/doc/html/rfc7231#section-6}\n */\n\nexport enum HttpStatusCode {\n  /**\n   * The server has received the request headers and the client should proceed to send the request body\n   * (in the case of a request for which a body needs to be sent; for example, a POST request).\n   * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\n   * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\n   * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\n   */\n  CONTINUE = 100,\n\n  /**\n   * The requester has asked the server to switch protocols and the server has agreed to do so.\n   */\n  SWITCHING_PROTOCOLS = 101,\n\n  /**\n   * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\n   * This code indicates that the server has received and is processing the request, but no response is available yet.\n   * This prevents the client from timing out and assuming the request was lost.\n   */\n  PROCESSING = 102,\n\n  /**\n   * Standard response for successful HTTP requests.\n   * The actual response will depend on the request method used.\n   * In a GET request, the response will contain an entity corresponding to the requested resource.\n   * In a POST request, the response will contain an entity describing or containing the result of the action.\n   */\n  OK = 200,\n\n  /**\n   * The request has been fulfilled, resulting in the creation of a new resource.\n   */\n  CREATED = 201,\n\n  /**\n   * The request has been accepted for processing, but the processing has not been completed.\n   * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\n   */\n  ACCEPTED = 202,\n\n  /**\n   * SINCE HTTP/1.1\n   * The server is a transforming proxy that received a 200 OK from its origin,\n   * but is returning a modified version of the origin's response.\n   */\n  NON_AUTHORITATIVE_INFORMATION = 203,\n\n  /**\n   * The server successfully processed the request and is not returning any content.\n   */\n  NO_CONTENT = 204,\n\n  /**\n   * The server successfully processed the request, but is not returning any content.\n   * Unlike a 204 response, this response requires that the requester reset the document view.\n   */\n  RESET_CONTENT = 205,\n\n  /**\n   * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\n   * The range header is used by HTTP clients to enable resuming of interrupted downloads,\n   * or split a download into multiple simultaneous streams.\n   */\n  PARTIAL_CONTENT = 206,\n\n  /**\n   * The message body that follows is an XML message and can contain a number of separate response codes,\n   * depending on how many sub-requests were made.\n   */\n  MULTI_STATUS = 207,\n\n  /**\n   * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\n   * and are not being included again.\n   */\n  ALREADY_REPORTED = 208,\n\n  /**\n   * The server has fulfilled a request for the resource,\n   * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n   */\n  IM_USED = 226,\n\n  /**\n   * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\n   * For example, this code could be used to present multiple video format options,\n   * to list files with different filename extensions, or to suggest word-sense disambiguation.\n   */\n  MULTIPLE_CHOICES = 300,\n\n  /**\n   * This and all future requests should be directed to the given URI.\n   */\n  MOVED_PERMANENTLY = 301,\n\n  /**\n   * This is an example of industry practice contradicting the standard.\n   * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\n   * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\n   * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\n   * to distinguish between the two behaviours. However, some Web applications and frameworks\n   * use the 302 status code as if it were the 303.\n   */\n  FOUND = 302,\n\n  /**\n   * SINCE HTTP/1.1\n   * The response to the request can be found under another URI using a GET method.\n   * When received in response to a POST (or PUT/DELETE), the client should presume that\n   * the server has received the data and should issue a redirect with a separate GET message.\n   */\n  SEE_OTHER = 303,\n\n  /**\n   * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\n   * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\n   */\n  NOT_MODIFIED = 304,\n\n  /**\n   * SINCE HTTP/1.1\n   * The requested resource is available only through a proxy, the address for which is provided in the response.\n   * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\n   */\n  USE_PROXY = 305,\n\n  /**\n   * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\n   */\n  SWITCH_PROXY = 306,\n\n  /**\n   * SINCE HTTP/1.1\n   * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\n   * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\n   * For example, a POST request should be repeated using another POST request.\n   */\n  TEMPORARY_REDIRECT = 307,\n\n  /**\n   * The request and all future requests should be repeated using another URI.\n   * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\n   * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\n   */\n  PERMANENT_REDIRECT = 308,\n\n  /**\n   * The server cannot or will not process the request due to an apparent client error\n   * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\n   */\n  BAD_REQUEST = 400,\n\n  /**\n   * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\n   * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\n   * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\n   * \"unauthenticated\",i.e. the user does not have the necessary credentials.\n   */\n  UNAUTHORIZED = 401,\n\n  /**\n   * Reserved for future use. The original intention was that this code might be used as part of some form of digital\n   * cash or micro payment scheme, but that has not happened, and this code is not usually used.\n   * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\n   */\n  PAYMENT_REQUIRED = 402,\n\n  /**\n   * The request was valid, but the server is refusing action.\n   * The user might not have the necessary permissions for a resource.\n   */\n  FORBIDDEN = 403,\n\n  /**\n   * The requested resource could not be found but may be available in the future.\n   * Subsequent requests by the client are permissible.\n   */\n  NOT_FOUND = 404,\n\n  /**\n   * A request method is not supported for the requested resource;\n   * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\n   */\n  METHOD_NOT_ALLOWED = 405,\n\n  /**\n   * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\n   */\n  NOT_ACCEPTABLE = 406,\n\n  /**\n   * The client must first authenticate itself with the proxy.\n   */\n  PROXY_AUTHENTICATION_REQUIRED = 407,\n\n  /**\n   * The server timed out waiting for the request.\n   * According to HTTP specifications:\n   * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\n   */\n  REQUEST_TIMEOUT = 408,\n\n  /**\n   * Indicates that the request could not be processed because of conflict in the request,\n   * such as an edit conflict between multiple simultaneous updates.\n   */\n  CONFLICT = 409,\n\n  /**\n   * Indicates that the resource requested is no longer available and will not be available again.\n   * This should be used when a resource has been intentionally removed and the resource should be purged.\n   * Upon receiving a 410 status code, the client should not request the resource in the future.\n   * Clients such as search engines should remove the resource from their indices.\n   * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\n   */\n  GONE = 410,\n\n  /**\n   * The request did not specify the length of its content, which is required by the requested resource.\n   */\n  LENGTH_REQUIRED = 411,\n\n  /**\n   * The server does not meet one of the preconditions that the requester put on the request.\n   */\n  PRECONDITION_FAILED = 412,\n\n  /**\n   * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\n   */\n  PAYLOAD_TOO_LARGE = 413,\n\n  /**\n   * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\n   * in which case it should be converted to a POST request.\n   * Called \"Request-URI Too Long\" previously.\n   */\n  URI_TOO_LONG = 414,\n\n  /**\n   * The request entity has a media type which the server or resource does not support.\n   * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\n   */\n  UNSUPPORTED_MEDIA_TYPE = 415,\n\n  /**\n   * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\n   * For example, if the client asked for a part of the file that lies beyond the end of the file.\n   * Called \"Requested Range Not Satisfiable\" previously.\n   */\n  RANGE_NOT_SATISFIABLE = 416,\n\n  /**\n   * The server cannot meet the requirements of the Expect request-header field.\n   */\n  EXPECTATION_FAILED = 417,\n\n  /**\n   * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\n   */\n  MISDIRECTED_REQUEST = 421,\n\n  /**\n   * The request was well-formed but was unable to be followed due to semantic errors.\n   */\n  UNPROCESSABLE_ENTITY = 422,\n\n  /**\n   * The resource that is being accessed is locked.\n   */\n  LOCKED = 423,\n\n  /**\n   * The request failed due to failure of a previous request (e.g., a PROPPATCH).\n   */\n  FAILED_DEPENDENCY = 424,\n\n  TOO_EARLY = 425,\n\n  /**\n   * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\n   */\n  UPGRADE_REQUIRED = 426,\n\n  /**\n   * The origin server requires the request to be conditional.\n   * Intended to prevent \"the 'lost update' problem, where a client\n   * GETs a resource's state, modifies it, and PUTs it back to the server,\n   * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\n   */\n  PRECONDITION_REQUIRED = 428,\n\n  /**\n   * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\n   */\n  TOO_MANY_REQUESTS = 429,\n\n  /**\n   * The server is unwilling to process the request because either an individual header field,\n   * or all the header fields collectively, are too large.\n   */\n  REQUEST_HEADER_FIELDS_TOO_LARGE = 431,\n\n  /**\n   * A server operator has received a legal demand to deny access to a resource or to a set of resources\n   * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\n   */\n  UNAVAILABLE_FOR_LEGAL_REASONS = 451,\n\n  /**\n   * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n   */\n  INTERNAL_SERVER_ERROR = 500,\n\n  /**\n   * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\n   * Usually this implies future availability (e.g., a new feature of a web-service API).\n   */\n  NOT_IMPLEMENTED = 501,\n\n  /**\n   * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\n   */\n  BAD_GATEWAY = 502,\n\n  /**\n   * The server is currently unavailable (because it is overloaded or down for maintenance).\n   * Generally, this is a temporary state.\n   */\n  SERVICE_UNAVAILABLE = 503,\n\n  /**\n   * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\n   */\n  GATEWAY_TIMEOUT = 504,\n\n  /**\n   * The server does not support the HTTP protocol version used in the request\n   */\n  HTTP_VERSION_NOT_SUPPORTED = 505,\n\n  /**\n   * Transparent content negotiation for the request results in a circular reference.\n   */\n  VARIANT_ALSO_NEGOTIATES = 506,\n\n  /**\n   * The server is unable to store the representation needed to complete the request.\n   */\n  INSUFFICIENT_STORAGE = 507,\n\n  /**\n   * The server detected an infinite loop while processing the request.\n   */\n  LOOP_DETECTED = 508,\n\n  /**\n   * Further extensions to the request are required for the server to fulfill it.\n   */\n  NOT_EXTENDED = 510,\n\n  /**\n   * The client needs to authenticate to gain network access.\n   * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\n   * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\n   */\n  NETWORK_AUTHENTICATION_REQUIRED = 511\n}\n","export enum SFMedia {\n  XS_WIDTH = 375,\n  XS_HEIGHT = 667,\n\n  SM_WIDTH = 768,\n  SM_HEIGHT = 1024,\n\n  MD_WIDTH = 1024,\n  MD_HEIGHT = 768,\n\n  LG_WIDTH = 1280,\n  LG_HEIGHT = 720,\n\n  XL_WIDTH = 1600,\n  XL_HEIGHT = 900,\n\n  XXL_WIDTH = 1920,\n  XXL_HEIGHT = 1080\n}\n","import {\n  Theme,\n  ThemeOptions,\n  ThemeProvider as SFThemeProvider\n} from '@material-ui/core/styles';\n\nimport { NightTheme } from './NightTheme';\nimport { DayTheme } from './DayTheme';\n\ninterface SFTheme extends Theme {}\ninterface SFThemeOptions extends ThemeOptions {}\n\nexport { SFThemeProvider, SFTheme, SFThemeOptions };\n\nexport type SFThemeType = 'day' | 'night';\n\nexport function createSFTheme(type: SFThemeType): SFTheme {\n  return type === 'day' ? DayTheme : NightTheme;\n}\n"],"sourceRoot":""}