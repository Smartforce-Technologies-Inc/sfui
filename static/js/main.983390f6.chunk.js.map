{"version":3,"sources":["App/AutocompleteView/AutocompleteView.tsx","App/AutocompleteLocationView/AutocompleteLocationView.tsx","App/AutocompleteChipsView/AutocompleteChipsView.tsx","App/ButtonsView/ButtonsView.tsx","App/CheckboxesView/CheckboxesView.tsx","App/ChipView/ChipView.tsx","App/ChipsFieldView/ChipsFieldView.tsx","App/DatePickerView/DatePickerView.tsx","App/DialogsView/DialogsView.tsx","App/DrawersView/DrawersView.tsx","App/IconButtonView/IconButtonView.tsx","App/LinksView/LinksView.tsx","App/MultiSelectView/MultiSelectView.tsx","App/RadioView/RadioView.tsx","App/RadioGroupView/RadioGroupView.tsx","App/SpinnerView/SpinnerView.tsx","App/SplitButtonView/SplitButtonView.tsx","App/SelectView/SelectView.tsx","App/SkeletonView/SkeletonView.tsx","App/TimeInputView/TimeInputView.tsx","App/SwitchesView/SwitchesView.tsx","App/TextFieldsView/TextFieldsView.tsx","App/TextFieldsMultilineView/TextFieldsMultilineView.tsx","App/TableView/TableView.tsx","App/Pages/ComponentsPage.tsx","App/FormView/FormView.tsx","App/Pages/DemosPage.tsx","App/App.tsx","index.tsx","../../src/SFColors/SFColors.tsx","../../src/Helpers/index.ts","../../src/Components/SFDialog/SFDialog.tsx","../../src/Components/SFButton/CustomButtons/ButtonMixin.tsx","../../src/Components/SFButton/CustomButtons/BlueButton.tsx","../../src/Components/SFButton/CustomButtons/RedButton.tsx","../../src/Components/SFButton/CustomButtons/GreyButton.tsx","../../src/Components/SFButton/SFButton.tsx","../../src/Components/SFAlert/SFAlert.tsx","../../src/Components/SFTextField/SFTextField.tsx","../../node_modules/icomoon-react/build/src/IcomoonReact/IcomoonReact.js","../../node_modules/icomoon-react/build/src/index.js","../../src/Components/SFIcon/SFIcon.tsx","../../src/Components/SFAutocomplete/SFAutocomplete.tsx","../../src/Components/SFAutocompleteLocation/SFAutocompleteLocation.tsx","../../src/Components/SFSpinner/SFSpinner.tsx","../../src/Components/SFPaper/SFPaper.tsx","../../src/Components/SFIconButton/SFIconButton.tsx","../../src/Components/SFCard/SFCard.tsx","../../src/Components/SFChip/SFChip.tsx","../../src/Components/SFChipsListField/SFChipFieldModal/SFChipFieldModal.tsx","../../src/Components/SFChipsListField/SFChipFieldRender/SFChipFieldRender.tsx","../../src/Components/SFChipsListField/SFChipsListField.tsx","../../src/Components/SFFormControlLabel/SFFormControlLabel.tsx","../../src/Components/SFCheckbox/SFCheckbox.tsx","../../src/Components/SFDatePicker/SFDatePicker.tsx","../../src/Components/SFDrawer/SFDrawer.tsx","../../src/Components/SFLink/SFLink.tsx","../../src/Components/SFMenuItem/SFMenuItem.tsx","../../src/Components/SFMultiSelect/SFMultiSelect.tsx","../../src/Components/SFNumericField/SFNumericField.tsx","../../src/Components/SFPanel/SFPanel.tsx","../../src/Components/SFRadioGroup/SFRadio/SFRadio.tsx","../../src/Components/SFRadioGroup/SFRadioGroup.tsx","../../src/Components/SFScrollable/SFScrollable.tsx","../../src/Components/SFSelect/SFSelect.tsx","../../src/Components/SFSkeleton/SFSkeleton.tsx","../../src/Components/SFSplitButton/SFSplitButton.tsx","../../src/Components/SFSwitch/SFSwitch.tsx","../../src/Components/SFTable/SFTable.tsx","../../src/Components/SFTimeField/SFTimeField.tsx","../../src/SFTheme/CommonThemeOptions.tsx","../../src/SFTheme/NightTheme.tsx","../../src/SFTheme/DayTheme.tsx","../../src/SFHttpStatusCode/SFHttpStatusCode.ts","../../src/SFMedia/SFMedia.ts","../../src/SFTheme/SFTheme.tsx"],"names":["SFAutocompleteView","React","useState","autocompleteValue","setAutocompleteValue","autocompleteValue1","setAutocompleteValue1","autocompleteValue2","setAutocompleteValue2","className","label","options","value","onChange","disabled","SFAutoCompleteLocationView","text","autcompleteValue","autcompleteValue1","autcompleteValue2","SFAutocompleteChipsView","ChipsListOptions","chipFieldValue","setChipFieldValue","isNew","chipFieldValue1","setChipFieldValue1","chipFieldValue2","setChipFieldValue2","chipFieldValue3","setChipFieldValue3","items","chipDisplay","renderButtonsColumn","size","sfColor","style","textTransform","variant","SFButtonsView","SFCheckboxesView","checked","SFChipsView","deleteable","onDelete","console","log","SFChipsFieldView","SFDatePickerView","undefined","firstPickerDate","setFirstPickerDate","Date","now","secondPickerDate","setSecondPickerDate","thirdPickerDate","setThirdPickerDate","fourthPickerDate","setFourthPickerDate","fifthPickerDate","setFifthPickerDate","dateLabel","helperText","error","SFDialogsView","setDisabled","alertTextOpen","setAlertTextOpen","alertFormOpen","setAlertFormOpen","onClick","leftAction","buttonProps","rightAction","title","content","open","marginTop","placeholder","event","target","length","SFDrawersView","drawerTextOpen","setDrawerTextOpen","drawerInputOpen","setDrawerInputOpen","drawerText","anchor","onClose","SFIconButtonView","sfIcon","sfSize","SFLinksView","alignItems","color","SFMultiSelectView","SFRadioView","SFRadioGroupView","defaultValue","SFSpinnerView","SFSplitButtonView","splitButtonOptions","defaultSelected","SFSelectView","selectValue","setSelectValue","selectValue1","setSelectValue1","selectValue2","setSelectValue2","selectValue3","setSelectValue3","selectValue4","setSelectValue4","SFSkeletonView","height","width","SFTimeFieldView","toISOString","SFSwitchesView","SFTextFieldsView","SFTextFieldsMultilineView","innerText","multiline","SFTableView","toolbar","paging","sorting","search","draggable","selection","columns","field","data","one","two","three","four","five","six","showTitle","ComponentsPage","FormView","initialData","date","streetAdress","incidentNumber","incidentTime","description","injured","propertyDamage","witnessess","supervisor","officers","incidentEvents","placeOfOcurrence","incidentTests","policeDepartment","response","setResponse","formData","setFormData","openResponsePanel","setOpenResponsePanel","isLoading","setIsLoading","isSent","setIsSent","useEffect","setTimeout","name","row","autoComplete","delimiter","href","PaperProps","maxWidth","fullWidth","Object","keys","JSON","stringify","DemosPage","setThemeType","theme","localStorage","setItem","App","prefersDarkMode","useSFMediaQuery","nightMode","setNightMode","showDemo","setShowDemo","switchLabel","createSFTheme","getLocalStorageThemeType","getItem","injectFirst","backgroundColor","palette","background","default","primary","main","ReactDOM","render","document","getElementById","SFBlue","SFRed","SFGrey","A100","A200","A400","A700","50","100","200","300","400","500","600","700","800","900","SFBlueMainLight","SFBlueMainDark","SFRedMainLight","SFRedMainDark","SFSurfaceLight","SFSurfaceDark","SFTextWhite","hexToRgba","hex","opacity","result","exec","parseInt","SFDialogTitle","root","padding","fontSize","fontStyle","fontWeight","lineHeight","SFDialogContent","SFDialogContentText","SFDialogActions","display","gap","SFDialog","ButtonMixin","sfButtonConfig","backgroundColorHover","backgroundColorActive","outlined","borderColor","border","BlueButton","contained","light","backgroundColorDisabled","dark","colorHover","colorActive","borderColorHover","borderColorActive","RedButton","GreyButton","SFButton","props","ButtonInnerProps","getButtonInnerProps","ButtonInnerStyle","ButtonComponent","grey","blue","red","disableElevation","disableRipple","SFAlert","children","StyledTextField","boxSizing","borderRadius","transition","transform","margin","SFTextField","rows","__assign","this","assign","t","s","i","n","arguments","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__importDefault","mod","__esModule","defineProperty","exports","iconList","react_1","require$$0","iconSet","list","icons","forEach","icon","push","properties","split","_a","_b","_c","rest","styles","iconObj","currentIcon","find","iconEl","includes","createElement","svg","viewBox","xmlns","paths","map","path","index","attrs","key","d","warn","getSvg","verticalAlign","fill","IcomoonReact","displayName","IcomoonReact_2","IcomoonReact_1","enumerable","get","getRotationDeg","rotation","SFIcon","forwardRef","rotate","colorDefault","useTheme","customStyle","IconSet","ref","StyledAutocomplete","inputRoot","paddingTop","right","endAdornment","listbox","option","useStyles","makeStyles","SFAutocomplete","hasPopupIcon","classes","isOpen","setIsOpen","inputValue","setInputValue","openOnFocus","reason","onInputChange","onOpen","getOptionSelected","getOptionLabel","renderInput","params","popupIcon","closeIcon","popupIndicator","clearIndicator","menu","gridTemplateColumns","itemText","textHighlight","itemSecondaryText","SFAutocompleteLocation","currentLocation","currentLocationType","autocompleteService","geocoderService","apiLoaded","setApiLoaded","selectedOption","setSelectedOption","setOptions","getPredictions","throttle","fetchOptions","input","results","window","navigator","google","pos","latlng","lat","lng","longitude","location","status","locationType","place_id","placeId","freeSolo","newValue","renderOption","matches","parts","parse","match","part","SFSpinner","StyledPaper","SFPaper","elevation","StyledIconButton","position","justifyContent","flexDirection","SFIconButton","isThemeLight","disabledColor","colorPicked","iconButtonInnerProps","getIconButtonInnerProps","StyledChip","labelSmall","SFChip","deleteIcon","SFChipListModal","onEdit","editedValue","setEditedValue","hasChanged","SFChipListRender","values","isChipFullWidth","chipSize","clickable","StyledAutoComplete","paper","marginLeft","marginRight","minHeight","chipsDisplay","chipDisplayInline","flexWrap","chipDisplayBlock","SFChipsListField","emptyMessage","isPopperOpen","setIsPopperOpen","isModalOpen","setIsModalOpen","savedValues","item","inputValues","addValue","deleteValue","previousInput","filteredOptions","multiple","currentValue","currentValues","matchValue","_event","insertedValues","valuesToAdd","insertedValue","valueOption","isValueInOptions","filterSelectedOptions","renderTags","StyledFromControlLabel","SFFormControlLabel","StyledCheckbox","colorPrimary","SFCheckbox","iconCheckedColor","getIconCheckedColor","iconUncheckedColor","getIconUncheckedColor","control","checkedIcon","useButtonBackgrounds","createStyles","usePopOverStyle","StyledDatePicker","paddingRight","SFDatePicker","popOverStyle","arrowStyle","openCalendarStyle","setOpenCalendarStyle","utils","MomentUtils","disableToolbar","inputVariant","format","PopoverProps","anchorOrigin","vertical","horizontal","transformOrigin","rightArrowButtonProps","rightArrowIcon","leftArrowButtonProps","leftArrowIcon","keyboardIcon","SFDrawer","StyledLink","cursor","getSizeStyle","SFLink","SFMenuItem","StyledSelect","pointerEvents","top","StyledMenuItem","useMenuStyles","SFMultiSelect","selected","setSelected","menuClasses","isChecked","selectedValues","select","SelectProps","MenuProps","autoFocus","disableAutoFocusItem","renderValue","IconComponent","NumberFormatCustom","inputRef","allowDecimals","other","inputMode","decimalScale","pattern","getInputRef","onValueChange","SFNumericField","numberFormatProps","inputProps","InputProps","inputComponent","actions","SFPanel","StyledRadio","SFRadio","isGroup","StyledRadioGroup","SFRadioGroup","opt","withHorizontalScroll","paddingBottom","container","overflow","scrollbarWidth","msOverflowStyle","vScrollBar","bottom","vScrollThumb","hScrollBar","left","hScrollThumb","hasScrollVertical","elem","hasScrollHorizontal","SFScrollable","containerClassName","onScroll","scrollHostRef","scrollToTop","hasHorizontalScroll","setHasHorizontalScroll","verticalScrollHeight","setVerticalScrollHeight","horizontalScrollWidth","setHorizontalScrollWidth","verticalScrollTop","setVerticalScrollTop","horizontalScrollLeft","setHorizontalScrollLeft","showVerticalScroll","setShowVerticalScroll","showHorizontalScroll","setShowHorizontalScroll","isVerticalDragging","setIsVerticalDragging","isHorizontalDragging","setIsHorizontalDragging","lastVerticalPos","setLastVerticalPos","lastHorizontalPos","setLastHorizontalPos","updateScrollbar","clientHeight","clientWidth","scrollHeight","scrollWidth","scrollThumbWidth","Math","scrollThumbHeight","resizeObserver","ResizeObserver","onDocumentMouseMove","offsetHeight","offsetTop","deltaY","percentage","offsetWidth","deltaX","verticalScroll","horizontalScroll","host","current","onDocumentMouseUp","onMouseOver","onMouseOut","onTouchStart","onTouchEnd","scrollTop","scrollLeft","newTop","newLeft","onMouseDown","SFSelect","SFSkeleton","iconButton","isLight","StyledButtonGroup","boxShadow","grouped","groupedContainedHorizontal","borderRight","SFSplitButton","isMenuOpen","setIsMenuOpen","selectedItemIndex","setSelectedItemIndex","refMenu","zIndex","anchorEl","placement","disablePortal","onClickAway","id","onMenuItemClick","StyledSwitch","switchBase","thumb","track","SFSwitch","disableTouchRipple","disableFocusRipple","StyledRow","StyledContainer","useSelectionStyles","colorSecondary","iconSize","tableIcons","Add","Check","Clear","Delete","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","SFTable","selectionProps","customColumns","cellStyle","borderBottom","customOptions","headerStyle","rowStyle","rowData","headerSelectionProps","indeterminate","components","Container","Row","getDateFromString","moment","StyledTimePicker","SFTimeField","setDate","mask","CommonThemeOptions","MuiButtonBase","MuiDrawer","shape","overrides","MuiFormControlLabel","MuiIconButton","MuiButton","MuiPaper","elevation1","elevation2","elevation3","elevation4","elevation6","elevation8","elevation9","elevation12","elevation16","elevation24","type","secondary","action","active","activatedOpacity","hover","hoverOpacity","selectedOpacity","disabledBackground","disabledOpacity","focus","focusOpacity","NightTheme","createMuiTheme","DayTheme","HttpStatusCode","SFMedia"],"mappings":"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","file":"static/js/main.983390f6.chunk.js","sourcesContent":["import React from 'react';\n\nimport { SFAutocomplete, SFMenuOption } from 'sfui';\n\nexport const SFAutocompleteView = (): JSX.Element => {\n  const getOptions = (): SFMenuOption[] => {\n    return [\n      {\n        label: 'Bagel number one',\n        value: 'Bagel number one'\n      },\n      {\n        label: 'Bagel number two',\n        value: 'Bagel number two'\n      },\n      {\n        label: 'Bagel number three',\n        value: 'Bagel number three'\n      }\n    ];\n  };\n\n  const [autocompleteValue, setAutocompleteValue] = React.useState<string>('');\n  const [autocompleteValue1, setAutocompleteValue1] = React.useState<string>(\n    getOptions()[1].value\n  );\n  const [autocompleteValue2, setAutocompleteValue2] = React.useState<string>(\n    getOptions()[1].value\n  );\n\n  return (\n    <div className='column'>\n      <SFAutocomplete\n        label='Bagel'\n        options={getOptions()}\n        value={autocompleteValue}\n        onChange={(value: string): void => setAutocompleteValue(value)}\n      />\n      <SFAutocomplete\n        label='Bagel'\n        value={autocompleteValue1}\n        options={getOptions()}\n        onChange={(value: string): void => setAutocompleteValue1(value)}\n      />\n      <SFAutocomplete\n        label='Bagel'\n        disabled\n        value={autocompleteValue2}\n        options={getOptions()}\n        onChange={(value: string): void => setAutocompleteValue2(value)}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFAutocompleteLocation, SFAutocompleteLocationResult } from 'sfui';\n\nexport const SFAutoCompleteLocationView = (): JSX.Element => {\n  const [\n    autcompleteValue,\n    setAutocompleteValue\n  ] = React.useState<SFAutocompleteLocationResult>({\n    text: ''\n  });\n  const [\n    autcompleteValue1,\n    setAutocompleteValue1\n  ] = React.useState<SFAutocompleteLocationResult>({\n    text:\n      '6400 S. Fiddlers Green Circle, Suite 250, Greenwood Village, CO 80111'\n  });\n  const [\n    autcompleteValue2,\n    setAutocompleteValue2\n  ] = React.useState<SFAutocompleteLocationResult>({\n    text:\n      '6400 S. Fiddlers Green Circle, Suite 250, Greenwood Village, CO 80111'\n  });\n  return (\n    <div className='column'>\n      <SFAutocompleteLocation\n        label='Bagel'\n        value={autcompleteValue}\n        onChange={(value: SFAutocompleteLocationResult): void =>\n          setAutocompleteValue(value)\n        }\n      />\n      <SFAutocompleteLocation\n        label='Bagel'\n        value={autcompleteValue1}\n        onChange={(value: SFAutocompleteLocationResult): void =>\n          setAutocompleteValue1(value)\n        }\n      />\n      <SFAutocompleteLocation\n        label='Bagel'\n        value={autcompleteValue2}\n        disabled\n        onChange={(value: SFAutocompleteLocationResult): void =>\n          setAutocompleteValue2(value)\n        }\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFChipsListField, ChipFieldValueType } from 'sfui';\n\nexport const SFAutocompleteChipsView = (): JSX.Element => {\n  const ChipsListOptions: string[] = [\n    'Bagel1',\n    'Bagel2',\n    'Bagel3',\n    'Bagel4',\n    'Bagel5',\n    'Bagel6',\n    'Bagel7',\n    'Bagel8',\n    'Bagel9',\n    'Bagel10',\n    'Bagel11',\n    'Bagel12'\n  ];\n\n  const [chipFieldValue, setChipFieldValue] = React.useState<\n    ChipFieldValueType[]\n  >();\n  const [chipFieldValue1, setChipFieldValue1] = React.useState<\n    ChipFieldValueType[]\n  >([{ value: 'Bagel1', isNew: true }]);\n  const [chipFieldValue2, setChipFieldValue2] = React.useState<\n    ChipFieldValueType[]\n  >([{ value: 'Bagel1', isNew: true }]);\n  const [chipFieldValue3, setChipFieldValue3] = React.useState<\n    ChipFieldValueType[]\n  >([\n    { value: 'Bagel1', isNew: true },\n    { value: 'Bagel2', isNew: true },\n    { value: 'Bagel3', isNew: true },\n    { value: 'Bagel4', isNew: true },\n    { value: 'Bagel5', isNew: true },\n    { value: 'Bagel6', isNew: true },\n    { value: 'Bagel7' },\n    { value: 'Bagel8' },\n    { value: 'Bagel9' },\n    { value: 'Bagel10' },\n    { value: 'Bagel11' },\n    { value: 'Bagel12' }\n  ]);\n\n  return (\n    <div className='column'>\n      <SFChipsListField\n        items={chipFieldValue}\n        label='Bagel'\n        options={ChipsListOptions}\n        chipDisplay='block'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue(value)\n        }\n      />\n      <SFChipsListField\n        items={chipFieldValue1}\n        label='Bagel'\n        options={ChipsListOptions}\n        chipDisplay='block'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue1(value)\n        }\n      />\n      <SFChipsListField\n        items={chipFieldValue2}\n        label='Bagel'\n        disabled\n        options={ChipsListOptions}\n        chipDisplay='block'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue2(value)\n        }\n      />\n      <SFChipsListField\n        items={chipFieldValue3}\n        label='Bagel'\n        options={ChipsListOptions}\n        chipDisplay='block'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue3(value)\n        }\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFButton } from 'sfui';\n\nconst renderButtonsColumn = (\n  size: 'small' | 'medium' | 'large' | undefined\n): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFButton sfColor='blue' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='blue' variant='outlined' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='blue' variant='text' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n      </div>\n\n      <div className='row'>\n        <SFButton sfColor='grey' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='grey' variant='outlined' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='grey' variant='text' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n      </div>\n      <div className='row'>\n        <SFButton sfColor='red' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='red' variant='outlined' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='red' variant='text' size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n      </div>\n      <div className='row'>\n        <SFButton sfColor='blue' disabled size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='blue' variant='outlined' disabled size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n        <SFButton sfColor='blue' variant='text' disabled size={size}>\n          <span style={{ textTransform: 'capitalize' }}>{size}</span>\n        </SFButton>\n      </div>\n    </div>\n  );\n};\n\nconst SFButtonsView = (): JSX.Element => {\n  return (\n    <div className='row spaced'>\n      {renderButtonsColumn('small')}\n      {renderButtonsColumn('medium')}\n      {renderButtonsColumn('large')}\n    </div>\n  );\n};\n\nexport { SFButtonsView };\n","import React from 'react';\nimport { SFCheckbox } from 'sfui';\n\nconst SFCheckboxesView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFCheckbox />\n        <SFCheckbox label='Bagel' />\n      </div>\n      <div className='row'>\n        <SFCheckbox disabled />\n        <SFCheckbox label='Bagel' disabled />\n      </div>\n      <div className='row'>\n        <SFCheckbox checked />\n        <SFCheckbox label='Bagel' checked />\n      </div>\n      <div className='row'>\n        <SFCheckbox checked disabled />\n        <SFCheckbox label='Bagel' checked disabled />\n      </div>\n    </div>\n  );\n};\n\nexport { SFCheckboxesView };\n","import React from 'react';\n\nimport { SFChip } from 'sfui';\n\nexport const SFChipsView = (): JSX.Element => {\n  return (\n    <div className='row spaced'>\n      <div className='column'>\n        <div className='row'>\n          <SFChip label='Small' size='small' sfColor='primary' />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='primary'\n            variant='outlined'\n          />\n        </div>\n        <div className='row'>\n          <SFChip label='Small' size='small' sfColor='primary' disabled />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='primary'\n            disabled\n            variant='outlined'\n          />\n        </div>\n        <div className='row'>\n          <SFChip label='Small' size='small' sfColor='default' />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='default'\n            variant='outlined'\n          />\n        </div>\n        <div className='row'>\n          <SFChip label='Small' size='small' sfColor='default' disabled />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='default'\n            disabled\n            variant='outlined'\n          />\n        </div>\n      </div>\n      <div className='column'>\n        <div className='row'>\n          <SFChip label='Medium' sfColor='primary' />\n          <SFChip label='Medium' sfColor='primary' variant='outlined' />\n        </div>\n        <div className='row'>\n          <SFChip label='Medium' sfColor='primary' disabled />\n          <SFChip\n            label='Medium'\n            sfColor='primary'\n            disabled\n            variant='outlined'\n          />\n        </div>\n        <div className='row'>\n          <SFChip label='Medium' sfColor='default' />\n          <SFChip label='Medium' sfColor='default' variant='outlined' />\n        </div>\n        <div className='row'>\n          <SFChip label='Medium' sfColor='default' disabled />\n          <SFChip\n            label='Medium'\n            sfColor='default'\n            disabled\n            variant='outlined'\n          />\n        </div>\n      </div>\n      <div className='column'>\n        <div className='row'>\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='primary'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='primary'\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n        <div className='row'>\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='primary'\n            disabled\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='primary'\n            disabled\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n        <div className='row'>\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='default'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='default'\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n        <div className='row'>\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='default'\n            disabled\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Small'\n            size='small'\n            sfColor='default'\n            disabled\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n      </div>\n      <div className='column'>\n        <div className='row'>\n          <SFChip\n            label='Medium'\n            sfColor='primary'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Medium'\n            sfColor='primary'\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n        <div className='row'>\n          <SFChip\n            label='Medium'\n            sfColor='primary'\n            disabled\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Medium'\n            sfColor='primary'\n            disabled\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n        <div className='row'>\n          {' '}\n          <SFChip\n            label='Medium'\n            sfColor='default'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Medium'\n            sfColor='default'\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n        <div className='row'>\n          <SFChip\n            label='Medium'\n            sfColor='default'\n            disabled\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n          <SFChip\n            label='Medium'\n            sfColor='default'\n            disabled\n            variant='outlined'\n            deleteable\n            onDelete={(): void => console.log('Deleted!')}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFChipsListField, ChipFieldValueType } from 'sfui';\n\nexport const SFChipsFieldView = (): JSX.Element => {\n  const [chipFieldValue, setChipFieldValue] = React.useState<\n    ChipFieldValueType[]\n  >();\n  const [chipFieldValue1, setChipFieldValue1] = React.useState<\n    ChipFieldValueType[]\n  >([{ value: 'Bagel1', isNew: true }]);\n  const [chipFieldValue2, setChipFieldValue2] = React.useState<\n    ChipFieldValueType[]\n  >([{ value: 'Bagel1', isNew: true }]);\n  const [chipFieldValue3, setChipFieldValue3] = React.useState<\n    ChipFieldValueType[]\n  >([\n    { value: 'Bagel1', isNew: true },\n    { value: 'Bagel2', isNew: true },\n    { value: 'Bagel3', isNew: true },\n    { value: 'Bagel4', isNew: true },\n    { value: 'Bagel5', isNew: true },\n    { value: 'Bagel6', isNew: true },\n    { value: 'Bagel7' },\n    { value: 'Bagel8' },\n    { value: 'Bagel9' },\n    { value: 'Bagel10' },\n    { value: 'Bagel11' },\n    { value: 'Bagel12' }\n  ]);\n\n  return (\n    <div className='column'>\n      <SFChipsListField\n        items={chipFieldValue}\n        label='Bagel'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue(value)\n        }\n      />\n      <SFChipsListField\n        items={chipFieldValue1}\n        label='Bagel'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue1(value)\n        }\n      />\n      <SFChipsListField\n        items={chipFieldValue2}\n        label='Bagel'\n        disabled\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue2(value)\n        }\n      />\n      <SFChipsListField\n        items={chipFieldValue3}\n        label='Bagel'\n        onChange={(value: ChipFieldValueType[]): void =>\n          setChipFieldValue3(value)\n        }\n      />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { SFDatePicker } from 'sfui';\n\nconst SFDatePickerView = (): JSX.Element => {\n  const [firstPickerDate, setFirstPickerDate] = useState(undefined);\n  const [secondPickerDate, setSecondPickerDate] = useState(Date.now());\n  const [thirdPickerDate, setThirdPickerDate] = useState(Date.now());\n  const [fourthPickerDate, setFourthPickerDate] = useState(Date.now());\n  const [fifthPickerDate, setFifthPickerDate] = useState(Date.now());\n  const dateLabel = 'mm/dd/yyyy';\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFDatePicker\n          label={dateLabel}\n          onChange={(value): void => setFirstPickerDate(value)}\n          value={firstPickerDate}\n        />\n      </div>\n      <div className='row'>\n        <SFDatePicker\n          label={dateLabel}\n          onChange={(value): void => setSecondPickerDate(value)}\n          value={secondPickerDate}\n        />\n      </div>\n      <div className='row'>\n        <SFDatePicker\n          label={dateLabel}\n          onChange={(value): void => setThirdPickerDate(value)}\n          value={thirdPickerDate}\n          disabled\n        />\n      </div>\n      <div className='row'>\n        <SFDatePicker\n          label={dateLabel}\n          onChange={(value): void => setFourthPickerDate(value)}\n          helperText='Error message'\n          value={fourthPickerDate}\n          error\n        />\n      </div>\n      <div className='row'>\n        <SFDatePicker\n          label={dateLabel}\n          value={fifthPickerDate}\n          onChange={(value): void => setFifthPickerDate(value)}\n          helperText='Helper message'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { SFDatePickerView };\n","import * as React from 'react';\n\nimport { SFAlert, SFTextField, SFButton } from 'sfui';\n\nconst SFDialogsView = (): JSX.Element => {\n  const [disabled, setDisabled] = React.useState<boolean>(true);\n  const [alertTextOpen, setAlertTextOpen] = React.useState<boolean>(false);\n  const [alertFormOpen, setAlertFormOpen] = React.useState<boolean>(false);\n\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFButton\n          sfColor='blue'\n          onClick={(): void => setAlertTextOpen(!alertTextOpen)}\n        >\n          Open Alert\n        </SFButton>\n      </div>\n      <div className='row'>\n        <SFButton\n          sfColor='red'\n          onClick={(): void => {\n            setAlertFormOpen(!alertFormOpen);\n          }}\n        >\n          Open Alert Form\n        </SFButton>\n      </div>\n      <SFAlert\n        leftAction={{\n          label: 'Medium',\n          buttonProps: { onClick: (): void => setAlertTextOpen(!alertTextOpen) }\n        }}\n        rightAction={{\n          label: 'Medium',\n          buttonProps: { onClick: (): void => setAlertTextOpen(!alertTextOpen) }\n        }}\n        title='Alert dialog title'\n        content={`Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n      Mauris lobortis a erat eu mattis.`}\n        open={alertTextOpen}\n      />\n      <SFAlert\n        content={`Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n    Mauris lobortis a erat eu mattis.`}\n        open={alertFormOpen}\n        title='Form dialog title'\n        leftAction={{\n          label: 'Medium',\n          buttonProps: { onClick: (): void => setAlertFormOpen(!alertFormOpen) }\n        }}\n        rightAction={{ label: 'Medium', buttonProps: { disabled } }}\n      >\n        <SFTextField\n          style={{ marginTop: 20 }}\n          label='Bagel'\n          placeholder='Please write something to enable button'\n          onChange={(event): void =>\n            setDisabled(event.target.value.length === 0)\n          }\n        />\n      </SFAlert>\n    </div>\n  );\n};\n\nexport { SFDialogsView };\n","import React, { useState } from 'react';\n\nimport { SFButton, SFPanel, SFTextField } from 'sfui';\n\nexport const SFDrawersView = (): JSX.Element => {\n  const [drawerTextOpen, setDrawerTextOpen] = useState<boolean>(false);\n  const [drawerInputOpen, setDrawerInputOpen] = useState<boolean>(false);\n  const drawerText =\n    'Lorem ipsum dolor sit amet consectetur adipisicing elit. Amet doloribus eius asperiores incidunt voluptates.';\n\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFButton\n          sfColor='blue'\n          onClick={(): void => setDrawerTextOpen(!drawerTextOpen)}\n        >\n          Open Panel\n        </SFButton>\n      </div>\n      <div className='row'>\n        <SFButton\n          sfColor='red'\n          onClick={(): void => setDrawerInputOpen(!drawerInputOpen)}\n        >\n          Open Custom Drawer\n        </SFButton>\n      </div>\n\n      <SFPanel\n        open={drawerTextOpen}\n        anchor='right'\n        title='Drawer Title'\n        rightAction={{\n          label: 'Medium',\n          buttonProps: {\n            onClick: (): void => setDrawerTextOpen(!drawerTextOpen)\n          }\n        }}\n        leftAction={{\n          label: 'Medium',\n          buttonProps: {\n            onClick: (): void => setDrawerTextOpen(!drawerTextOpen)\n          }\n        }}\n        onClose={(): void => setDrawerTextOpen(!drawerTextOpen)}\n      >\n        <p>\n          {drawerText}\n          <br />\n          {drawerText}\n          <br />\n          {drawerText}\n          <br />\n          {drawerText}\n        </p>\n      </SFPanel>\n      <SFPanel\n        open={drawerInputOpen}\n        anchor='right'\n        title='Drawer title'\n        leftAction={{\n          label: 'Medium',\n          buttonProps: {\n            onClick: (): void => setDrawerInputOpen(!drawerInputOpen)\n          }\n        }}\n        rightAction={{\n          label: 'Medium',\n          buttonProps: {\n            onClick: (): void => setDrawerInputOpen(!drawerInputOpen)\n          }\n        }}\n        onClose={(): void => setDrawerInputOpen(!drawerInputOpen)}\n      >\n        <p>{drawerText}</p>\n        <SFTextField style={{ marginTop: 24 }} label='Bagel' />\n        <SFTextField style={{ marginTop: 12 }} label='Bagel' />\n        <SFTextField style={{ marginTop: 12 }} label='Bagel' />\n        <SFTextField style={{ marginTop: 12 }} label='Bagel' />\n      </SFPanel>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFIconButton } from 'sfui';\n\nconst SFIconButtonView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row align-baseline'>\n        <SFIconButton sfIcon='Callendar' sfSize='tiny' />\n        <SFIconButton sfIcon='Callendar' sfSize='small' />\n        <SFIconButton sfIcon='Callendar' sfSize='medium' />\n        <SFIconButton sfIcon='Callendar' sfSize='large' />\n      </div>\n      <div className='row align-baseline'>\n        <SFIconButton sfIcon='Callendar' sfSize='tiny' disabled />\n        <SFIconButton sfIcon='Callendar' sfSize='small' disabled />\n        <SFIconButton sfIcon='Callendar' sfSize='medium' disabled />\n        <SFIconButton sfIcon='Callendar' sfSize='large' disabled />\n      </div>\n    </div>\n  );\n};\nexport { SFIconButtonView };\n","import React from 'react';\nimport { SFLink } from 'sfui';\n\nconst SFLinksView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row  no-space' style={{ alignItems: 'flex-end' }}>\n        <SFLink sfSize='medium' color='primary'>\n          I am a link example\n        </SFLink>\n        <SFLink sfSize='small' color='primary'>\n          I am a link example\n        </SFLink>\n      </div>\n      <div className='row  no-space' style={{ alignItems: 'flex-end' }}>\n        <SFLink sfSize='medium'>I am a link example</SFLink>\n        <SFLink sfSize='small'>I am a link example</SFLink>\n      </div>\n    </div>\n  );\n};\nexport { SFLinksView };\n","import React from 'react';\nimport { SFMultiSelect, SFMenuOption } from 'sfui';\nconst getOptions = (): SFMenuOption[] => {\n  return [\n    {\n      label: 'Bagel number one',\n      value: 'Bagel number one'\n    },\n    {\n      label: 'Bagel number two',\n      value: 'Bagel number two'\n    },\n    {\n      label: 'Bagel number three',\n      value: 'Bagel number three'\n    }\n  ];\n};\n\nconst SFMultiSelectView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFMultiSelect label='Bagel' options={getOptions()} />\n      </div>\n      <div className='row'>\n        <SFMultiSelect\n          label='Bagel'\n          options={getOptions()}\n          value={['Bagel number one']}\n        />\n      </div>\n      <div className='row'>\n        <SFMultiSelect\n          label='Bagel'\n          options={getOptions()}\n          value={['Bagel number one']}\n          disabled\n        />\n      </div>\n      <div className='row'>\n        <SFMultiSelect\n          label='Bagel'\n          options={getOptions()}\n          value={['Bagel number one']}\n          error\n          helperText='Error message'\n        />\n      </div>\n      <div className='row'>\n        <SFMultiSelect\n          label='Bagel'\n          options={getOptions()}\n          value={['Bagel number one']}\n          helperText='Helper message'\n        />\n      </div>\n    </div>\n  );\n};\nexport { SFMultiSelectView };\n","import React from 'react';\n\nimport { SFRadio } from 'sfui';\n\nconst SFRadioView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFRadio />\n        <SFRadio label='Bagel' />\n      </div>\n      <div className='row'>\n        <SFRadio disabled />\n        <SFRadio label='Bagel' disabled />\n      </div>\n      <div className='row'>\n        <SFRadio checked />\n        <SFRadio label='Bagel' checked />\n      </div>\n      <div className='row'>\n        <SFRadio checked disabled />\n        <SFRadio label='Bagel' checked disabled />\n      </div>\n    </div>\n  );\n};\n\nexport { SFRadioView };\n","import React from 'react';\n\nimport { SFRadioGroup, SFRadioOptionsProps } from 'sfui';\n\nconst SFRadioGroupView = (): JSX.Element => {\n  const options: SFRadioOptionsProps[] = [\n    { value: 'male', label: 'Male', disabled: false },\n    { value: 'female', label: 'Female', disabled: false },\n    { value: 'others', label: 'Others', disabled: false }\n  ];\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFRadioGroup label='Genders' defaultValue='male' options={options} />\n      </div>\n    </div>\n  );\n};\n\nexport { SFRadioGroupView };\n","import React from 'react';\nimport { SFSpinner } from 'sfui';\n\nconst SFSpinnerView = (): JSX.Element => {\n  return (\n    <div className='links'>\n      <div className='row'>\n        <SFSpinner />\n      </div>\n    </div>\n  );\n};\nexport { SFSpinnerView };\n","import React from 'react';\n\nimport { SFSplitButton, SFSplitButtonOption } from 'sfui';\n\nexport const SFSplitButtonView = (): JSX.Element => {\n  const splitButtonOptions: SFSplitButtonOption[] = [\n    {\n      onClick: (): void => console.log('Clicked Small option!'),\n      label: 'Small'\n    },\n    {\n      onClick: (): void => console.log('Clicked Medium option!'),\n      label: 'Medium'\n    },\n    {\n      onClick: (): void => console.log('Clicked Large option!'),\n      label: 'Large'\n    }\n  ];\n\n  return (\n    <div className='row'>\n      <div className='column'>\n        <SFSplitButton\n          sfColor='blue'\n          variant='contained'\n          defaultSelected={1}\n          options={splitButtonOptions}\n        />\n        <SFSplitButton\n          sfColor='blue'\n          variant='outlined'\n          defaultSelected={1}\n          options={splitButtonOptions}\n        />\n        <SFSplitButton\n          sfColor='grey'\n          variant='contained'\n          defaultSelected={1}\n          options={splitButtonOptions}\n        />\n        <SFSplitButton\n          sfColor='grey'\n          variant='outlined'\n          defaultSelected={1}\n          options={splitButtonOptions}\n        />\n      </div>\n      <div className='column'>\n        <SFSplitButton\n          sfColor='blue'\n          variant='contained'\n          defaultSelected={2}\n          size='large'\n          options={splitButtonOptions}\n        />\n        <SFSplitButton\n          sfColor='blue'\n          variant='outlined'\n          defaultSelected={2}\n          size='large'\n          options={splitButtonOptions}\n        />\n        <SFSplitButton\n          sfColor='grey'\n          variant='contained'\n          defaultSelected={2}\n          size='large'\n          options={splitButtonOptions}\n        />\n        <SFSplitButton\n          sfColor='grey'\n          variant='outlined'\n          defaultSelected={2}\n          size='large'\n          options={splitButtonOptions}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFSelect, SFMenuOption } from 'sfui';\n\nconst getOptions = (): SFMenuOption[] => {\n  return [\n    {\n      label: 'Bagel number one',\n      value: 'Bagel number one'\n    },\n    {\n      label: 'Bagel number two',\n      value: 'Bagel number two'\n    },\n    {\n      label: 'Bagel number three',\n      value: 'Bagel number three'\n    }\n  ];\n};\n\nconst SFSelectView = (): JSX.Element => {\n  const [selectValue, setSelectValue] = React.useState<string>('');\n  const [selectValue1, setSelectValue1] = React.useState<string>(\n    'Bagel number one'\n  );\n  const [selectValue2, setSelectValue2] = React.useState<string>(\n    'Bagel number one'\n  );\n  const [selectValue3, setSelectValue3] = React.useState<string>('');\n  const [selectValue4, setSelectValue4] = React.useState<string>('');\n\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFSelect\n          label='Bagel'\n          options={getOptions()}\n          value={selectValue}\n          onChange={(\n            event: React.ChangeEvent<{\n              name?: string | undefined;\n              value: unknown;\n            }>\n          ) => setSelectValue(event.target.value as string)}\n        />\n      </div>\n      <div className='row'>\n        <SFSelect\n          label='Bagel'\n          options={getOptions()}\n          value={selectValue1}\n          onChange={(event): void =>\n            setSelectValue1(event.target.value as string)\n          }\n        />\n      </div>\n      <div className='row'>\n        <SFSelect\n          label='Bagel'\n          options={getOptions()}\n          value={selectValue2}\n          onChange={(event): void =>\n            setSelectValue2(event.target.value as string)\n          }\n          disabled\n        />\n      </div>\n      <div className='row'>\n        <SFSelect\n          label='Bagel'\n          options={getOptions()}\n          value={selectValue3}\n          onChange={(event): void =>\n            setSelectValue3(event.target.value as string)\n          }\n          error\n          helperText='Error message'\n        />\n      </div>\n      <div className='row'>\n        <SFSelect\n          label='Bagel'\n          options={getOptions()}\n          value={selectValue4}\n          onChange={(event): void =>\n            setSelectValue4(event.target.value as string)\n          }\n          helperText='Helper message'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { SFSelectView };\n","import React from 'react';\n\nimport { SFSkeleton } from 'sfui';\n\nexport const SFSkeletonView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFSkeleton variant='circle' height={50} width={50} />\n        <SFSkeleton variant='rect' height={50} width='90%' />\n      </div>\n      <SFSkeleton variant='text' height={30} />\n      <SFSkeleton variant='text' height={30} />\n      <SFSkeleton variant='text' height={30} />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFTimeField } from 'sfui';\n\nexport const SFTimeFieldView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <SFTimeField\n        label='Bagel'\n        value=''\n        onChange={(): void => console.log('Time Selected')}\n      />\n      <SFTimeField\n        label='Bagel'\n        value={new Date().toISOString()}\n        onChange={(): void => console.log('Time Selected')}\n      />\n      <SFTimeField\n        label='Bagel'\n        value={new Date().toISOString()}\n        disabled\n        onChange={(): void => console.log('Time Selected')}\n      />\n      <SFTimeField\n        label='Bagel'\n        value={new Date().toISOString()}\n        error\n        helperText='Error message'\n        onChange={(): void => console.log('Time Selected')}\n      />\n      <SFTimeField\n        label='Bagel'\n        value={new Date().toISOString()}\n        helperText='Helper message'\n        onChange={(): void => console.log('Time Selected')}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SFSwitch } from 'sfui';\n\nconst SFSwitchesView = (): JSX.Element => {\n  return (\n    <div className='row extra-space'>\n      <div className='row'>\n        <div className='column'>\n          <SFSwitch size='small' />\n          <SFSwitch size='small' disabled />\n          <SFSwitch size='small' checked />\n          <SFSwitch size='small' checked disabled />\n        </div>\n        <div className='column'>\n          <SFSwitch size='small' label='Bagel' />\n          <SFSwitch size='small' label='Bagel' disabled />\n          <SFSwitch size='small' label='Bagel' checked />\n          <SFSwitch size='small' checked label='Bagel' disabled />\n        </div>\n      </div>\n      <div className='row'>\n        <div className='column'>\n          <SFSwitch />\n          <SFSwitch disabled />\n          <SFSwitch checked />\n          <SFSwitch checked disabled />\n        </div>\n        <div className='column'>\n          <SFSwitch label='Bagel' />\n          <SFSwitch label='Bagel' disabled />\n          <SFSwitch label='Bagel' checked />\n          <SFSwitch checked label='Bagel' disabled />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { SFSwitchesView };\n","import React from 'react';\n\nimport { SFTextField } from 'sfui';\n\nconst SFTextFieldsView = (): JSX.Element => {\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFTextField label='Bagel' />\n      </div>\n      <div className='row'>\n        <SFTextField label='Bagel' value='This is a bagel' />\n      </div>\n      <div className='row'>\n        <SFTextField label='Bagel' value='This is a bagel' disabled />\n      </div>\n      <div className='row'>\n        <SFTextField\n          label='Bagel'\n          value='This is a bagel'\n          error\n          helperText='Error message'\n        />\n      </div>\n      <div className='row'>\n        <SFTextField\n          label='Bagel'\n          value='This is a bagel'\n          helperText='Helper Message'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { SFTextFieldsView };\n","import React from 'react';\nimport { SFTextField } from 'sfui';\n\nconst SFTextFieldsMultilineView = (): JSX.Element => {\n  const innerText = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris lobortis a erat eu mattis. \n  Donec fringilla molestie justo pulvinar dignissim. Pellentesque sit amet ex a velit maximus aliquet sit amet id justo.\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris lobortis a erat eu mattis.\n   Donec fringilla molestie justo pulvinar dignissim. Pellentesque sit amet ex a velit maximus aliquet sit amet id justo.`;\n  return (\n    <div className='column'>\n      <div className='row'>\n        <SFTextField multiline label='Bagel' />\n      </div>\n      <div className='row'>\n        <SFTextField multiline label='Bagel' value={innerText} />\n      </div>\n      <div className='row'>\n        <SFTextField multiline label='Bagel' value={innerText} disabled />\n      </div>\n      <div className='row'>\n        <SFTextField\n          multiline\n          label='Bagel'\n          value={innerText}\n          error\n          helperText='Error message'\n        />\n      </div>\n      <div className='row'>\n        <SFTextField\n          multiline\n          label='Bagel'\n          value={innerText}\n          helperText='Helper Message'\n        />\n      </div>\n    </div>\n  );\n};\nexport { SFTextFieldsMultilineView };\n","import React from 'react';\n\nimport { SFTable, SFTableColumn, RowData } from 'sfui';\n\nconst SFTableView = (): JSX.Element => {\n  const getColumns = (): SFTableColumn[] => {\n    return [\n      { title: 'Head title one', field: 'one' },\n      { title: 'Head title two', field: 'two' },\n      { title: 'Head title three', field: 'three' },\n      { title: 'Head title four', field: 'four' },\n      { title: 'Head title five', field: 'five' },\n      { title: 'Head title six', field: 'six' }\n    ];\n  };\n\n  const getRows = (): RowData[] => {\n    return [\n      {\n        one: 'Body row one',\n        two: 'Body row one',\n        three: 'Body row one',\n        four: 'Body row one',\n        five: 'Body row one',\n        six: 'Body row one'\n      },\n      {\n        one: 'Body row two',\n        two: 'Body row two',\n        three: 'Body row two',\n        four: 'Body row two',\n        five: 'Body row two',\n        six: 'Body row two'\n      },\n      {\n        one: 'Body row three',\n        two: 'Body row three',\n        three: 'Body row three',\n        four: 'Body row three',\n        five: 'Body row three',\n        six: 'Body row three'\n      },\n      {\n        one: 'Body row four',\n        two: 'Body row four',\n        three: 'Body row four',\n        four: 'Body row four',\n        five: 'Body row four',\n        six: 'Body row four'\n      },\n      {\n        one: 'Body row five',\n        two: 'Body row five',\n        three: 'Body row five',\n        four: 'Body row five',\n        five: 'Body row five',\n        six: 'Body row five'\n      },\n      {\n        one: 'Body row six',\n        two: 'Body row six',\n        three: 'Body row six',\n        four: 'Body row six',\n        five: 'Body row six',\n        six: 'Body row six'\n      }\n    ];\n  };\n\n  return (\n    <div className='custom-grid'>\n      <div className='row'>\n        <SFTable\n          options={{\n            toolbar: false,\n            paging: false,\n            sorting: false,\n            search: false,\n            draggable: false,\n            selection: false\n          }}\n          columns={getColumns()}\n          data={getRows()}\n        />\n        <SFTable\n          options={{\n            search: true,\n            toolbar: true,\n            showTitle: false,\n            paging: false,\n            sorting: false,\n            draggable: false,\n            selection: false\n          }}\n          columns={getColumns()}\n          data={getRows()}\n        />\n      </div>\n      <div className='row'>\n        <SFTable\n          options={{\n            toolbar: false,\n            paging: false,\n            sorting: false,\n            search: false,\n            draggable: false,\n            selection: true\n          }}\n          columns={getColumns()}\n          data={getRows()}\n        />\n        <SFTable\n          options={{\n            toolbar: false,\n            paging: true,\n            sorting: false,\n            search: false,\n            draggable: false,\n            selection: false\n          }}\n          columns={getColumns()}\n          data={getRows()}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { SFTableView };\n","import React from 'react';\n\nimport { SFAutocompleteView } from '../AutocompleteView/AutocompleteView';\nimport { SFAutoCompleteLocationView } from '../AutocompleteLocationView/AutocompleteLocationView';\nimport { SFAutocompleteChipsView } from '../AutocompleteChipsView/AutocompleteChipsView';\nimport { SFButtonsView } from '../ButtonsView/ButtonsView';\nimport { SFCheckboxesView } from '../CheckboxesView/CheckboxesView';\nimport { SFChipsView } from '../ChipView/ChipView';\nimport { SFChipsFieldView } from '../ChipsFieldView/ChipsFieldView';\nimport { SFDatePickerView } from '../DatePickerView/DatePickerView';\nimport { SFDialogsView } from '../DialogsView/DialogsView';\nimport { SFDrawersView } from '../DrawersView/DrawersView';\nimport { SFIconButtonView } from '../IconButtonView/IconButtonView';\nimport { SFLinksView } from '../LinksView/LinksView';\nimport { SFMultiSelectView } from '../MultiSelectView/MultiSelectView';\nimport { SFRadioView } from '../RadioView/RadioView';\nimport { SFRadioGroupView } from '../RadioGroupView/RadioGroupView';\nimport { SFScrollable } from 'sfui';\nimport { SFSpinnerView } from '../SpinnerView/SpinnerView';\nimport { SFSplitButtonView } from '../SplitButtonView/SplitButtonView';\nimport { SFSelectView } from '../SelectView/SelectView';\nimport { SFSkeletonView } from '../SkeletonView/SkeletonView';\nimport { SFTimeFieldView } from '../TimeInputView/TimeInputView';\nimport { SFSwitchesView } from '../SwitchesView/SwitchesView';\nimport { SFTextFieldsView } from '../TextFieldsView/TextFieldsView';\nimport { SFTextFieldsMultilineView } from '../TextFieldsMultilineView/TextFieldsMultilineView';\nimport { SFTableView } from '../TableView/TableView';\n\nexport const ComponentsPage = (): JSX.Element => {\n  return (\n    <div className='componentsPage'>\n      <SFScrollable>\n        <div className='pagesLayout'>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Buttons</h4>\n              <SFButtonsView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Icon Button</h4>\n              <SFIconButtonView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Split Button</h4>\n              <SFSplitButtonView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Links</h4>\n              <SFLinksView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Progress Circular Indeterminate</h4>\n              <SFSpinnerView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Chips</h4>\n              <SFChipsView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Checkbox</h4>\n              <SFCheckboxesView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Radio Button</h4>\n              <SFRadioView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Radio Group Button</h4>\n              <SFRadioGroupView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Switch</h4>\n              <SFSwitchesView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Dialog and Drawer</h4>\n              <div className='row'>\n                <SFDialogsView />\n                <SFDrawersView />\n              </div>\n            </div>\n            <div className='section'>\n              <h4 className='title'>Skeleton</h4>\n              <SFSkeletonView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Time Picker</h4>\n              <SFTimeFieldView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Date Picker</h4>\n              <SFDatePickerView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Text Field</h4>\n              <SFTextFieldsView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Text Field Multiline</h4>\n              <SFTextFieldsMultilineView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Chips Field</h4>\n              <SFChipsFieldView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Autocomplete Chips</h4>\n              <SFAutocompleteChipsView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Autocomplete Text</h4>\n              <SFAutocompleteView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Autocomplete Location</h4>\n              <SFAutoCompleteLocationView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section'>\n              <h4 className='title'>Simple Select</h4>\n              <SFSelectView />\n            </div>\n            <div className='section'>\n              <h4 className='title'>Multiline Select</h4>\n              <SFMultiSelectView />\n            </div>\n          </div>\n          <div className='content'>\n            <div className='section fitContent'>\n              <h4 className='title'>Tables</h4>\n              <SFTableView />\n            </div>\n          </div>\n        </div>\n      </SFScrollable>\n    </div>\n  );\n};\n","import React, { ChangeEvent, useEffect, useState } from 'react';\n\nimport {\n  SFTextField,\n  SFRadioGroup,\n  SFRadioOptionsProps,\n  SFCheckbox,\n  SFSwitch,\n  SFDatePicker,\n  SFSelect,\n  SFMenuOption,\n  SFAlert,\n  SFNumericField,\n  SFAutocompleteLocation,\n  SFAutocompleteLocationResult,\n  SFTimeField,\n  SFLink,\n  SFSkeleton,\n  SFSpinner,\n  SFChipsListField,\n  ChipFieldValueType,\n  SFAutocomplete,\n  SFMultiSelect,\n  SFButton,\n  SFScrollable\n} from 'sfui';\n\nexport const FormView = (): JSX.Element => {\n  type formInformation = {\n    date: string | undefined;\n    streetAdress: SFAutocompleteLocationResult;\n    incidentNumber: string;\n    incidentTime: string;\n    description: string;\n    injured: boolean;\n    propertyDamage: boolean;\n    witnessess: string;\n    supervisor: string;\n    officers: ChipFieldValueType[];\n    incidentEvents: ChipFieldValueType[];\n    placeOfOcurrence: string | undefined;\n    incidentTests: string[] | undefined;\n    policeDepartment: string;\n  };\n\n  const initialData: formInformation = {\n    date: undefined,\n    streetAdress: { text: '' },\n    incidentNumber: '',\n    incidentTime: '',\n    description: '',\n    injured: false,\n    propertyDamage: false,\n    witnessess: '',\n    supervisor: '',\n    officers: [],\n    incidentEvents: [],\n    placeOfOcurrence: undefined,\n    incidentTests: [],\n    policeDepartment: ''\n  };\n\n  const [response, setResponse] = useState<formInformation>({ ...initialData });\n  const [formData, setFormData] = useState({ ...initialData });\n  const [openResponsePanel, setOpenResponsePanel] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSent, setIsSent] = useState(false);\n\n  const cleanOutput = (): void => {\n    console.log(formData);\n    setFormData({ ...initialData });\n  };\n\n  const handleFormResponse = (): void => {\n    setIsSent(true);\n    setTimeout(() => {\n      setIsSent(false);\n    }, 1000);\n    setResponse(formData);\n  };\n\n  const radioGroupOptions: SFRadioOptionsProps[] = [\n    { value: 'None', label: 'None', disabled: false },\n    { value: 'Around 10', label: 'Few', disabled: false },\n    { value: 'Around 25 ', label: 'Some', disabled: false },\n    { value: 'More Than 30', label: 'Many', disabled: false }\n  ];\n\n  const selectOptions: SFMenuOption[] = [\n    { value: 'Henry McKane', label: 'Henry McKane' },\n    { value: 'Donald McDonald', label: 'Donald McDonald' },\n    { value: 'Andrew Snippets', label: 'Andrew Snippets' },\n    { value: 'John Cenna', label: 'John Cenna' }\n  ];\n\n  const ChipsListOptions: string[] = [\n    'Verbal',\n    'Fight',\n    'Escape',\n    'Hand Weapon Usage',\n    'Pursuit',\n    'Firegun Usage',\n    'Standup Stabilization',\n    'Ground Stabilization'\n  ];\n\n  const autoCompleteOptions: SFMenuOption[] = [\n    { label: 'School', value: 'School' },\n    { label: 'Gym', value: 'Gym' },\n    { label: 'Hospital', value: 'Hospital' },\n    { label: 'Store', value: 'Store' },\n    { label: 'Parking Lot', value: 'Parking Lot' },\n    { label: 'Playground', value: 'Playground' },\n    { label: 'Street', value: 'Street' },\n    { label: 'House', value: 'House' },\n    { label: 'Train Station', value: 'Train Station' }\n  ];\n\n  const multiSelectOptions: SFMenuOption[] = [\n    { label: 'Alcohol Test', value: 'Alcohol Test' },\n    { label: 'Drugs Test', value: 'Drugs Test' },\n    { label: 'First Aid', value: 'First Aid' }\n  ];\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 2000);\n  }, []);\n\n  return (\n    <div className='demoItem'>\n      <h4 className='demoTitle'>Form Demo</h4>\n      <div className='demoBody'>\n        {isLoading && (\n          <div className='grid-column skeleton'>\n            <div className='row'>\n              <SFSkeleton variant='circle' width={60} height={60} />\n              <SFSkeleton variant='rect' width='94%' height={60} />\n            </div>\n            <SFSkeleton variant='text' />\n            <SFSkeleton variant='text' />\n            <SFSkeleton variant='text' />\n          </div>\n        )}\n        {!isLoading && (\n          <form className='demoTest'>\n            <div className='column'>\n              <h4 className='title'>Incident Information</h4>\n              <SFAutocomplete\n                label='Place of Ocurrence'\n                options={autoCompleteOptions}\n                value={formData.placeOfOcurrence}\n                onChange={(value): void =>\n                  setFormData({ ...formData, placeOfOcurrence: value })\n                }\n              />\n              <div className='grid-row'>\n                <div className='column'>\n                  <SFDatePicker\n                    label='Incident Date'\n                    name='date'\n                    value={formData.date}\n                    onChange={(value): void =>\n                      setFormData({\n                        ...formData,\n                        date: value\n                      })\n                    }\n                  />\n                  <SFAutocompleteLocation\n                    label='Street you were in'\n                    value={formData.streetAdress}\n                    onChange={(value: SFAutocompleteLocationResult): void =>\n                      setFormData({\n                        ...formData,\n                        streetAdress: {\n                          text: value.text\n                        }\n                      })\n                    }\n                  />\n                </div>\n                <div className='column'>\n                  <SFNumericField\n                    label='Incident #'\n                    value={formData.incidentNumber}\n                    onChange={(event: ChangeEvent<HTMLInputElement>): void =>\n                      setFormData({\n                        ...formData,\n                        incidentNumber: event.target.value\n                      })\n                    }\n                  />\n                  <SFTimeField\n                    label='Time of Incident'\n                    name='incidentTime'\n                    value={formData.incidentTime}\n                    onChange={(value: string): void =>\n                      setFormData({ ...formData, incidentTime: value })\n                    }\n                  />\n                </div>\n              </div>\n              <SFTextField\n                multiline\n                label='Incident description'\n                name='description'\n                value={formData.description}\n                onChange={(event): void =>\n                  setFormData({ ...formData, description: event.target.value })\n                }\n              />\n            </div>\n            <div className='column'>\n              <h4 className='title'>Additional Information</h4>\n            </div>\n            <div className='grid-row'>\n              <div className='column'>\n                <SFSwitch\n                  label='Property Damage'\n                  name='propertyDamage'\n                  checked={formData.propertyDamage}\n                  onChange={(event): void =>\n                    setFormData({\n                      ...formData,\n                      propertyDamage: event.target.checked\n                    })\n                  }\n                />\n                <SFCheckbox\n                  label='Officer Injured'\n                  name='injured'\n                  checked={formData.injured}\n                  onChange={(event): void =>\n                    setFormData({ ...formData, injured: event.target.checked })\n                  }\n                />\n              </div>\n              <SFRadioGroup\n                row\n                label='Witnessess'\n                name='witnessess'\n                value={formData.witnessess}\n                options={radioGroupOptions}\n                onChange={(event): void =>\n                  setFormData({ ...formData, witnessess: event.target.value })\n                }\n              />\n            </div>\n            <SFChipsListField\n              label='Incident Events'\n              options={ChipsListOptions}\n              items={formData.incidentEvents}\n              onChange={(value): void =>\n                setFormData({ ...formData, incidentEvents: value })\n              }\n            />\n            <SFMultiSelect\n              label='Incident Tests'\n              value={formData.incidentTests}\n              options={multiSelectOptions}\n              onChange={(event): void =>\n                setFormData({\n                  ...formData,\n                  incidentTests: event.target.value as string[]\n                })\n              }\n            />\n            <div className='column'>\n              <h4 className='title'>Employees Assigned</h4>\n              <SFTextField\n                label='Police Department Name'\n                name='police department'\n                autoComplete='off'\n                value={formData.policeDepartment}\n                onChange={(event): void =>\n                  setFormData({\n                    ...formData,\n                    policeDepartment: event.target.value\n                  })\n                }\n              />\n              <div className='grid-row'>\n                <SFChipsListField\n                  label='Officers Involved'\n                  items={formData.officers}\n                  delimiter=','\n                  onChange={(value): void =>\n                    setFormData({ ...formData, officers: value })\n                  }\n                />\n\n                <SFSelect\n                  label='Supervisor'\n                  name='supervisor'\n                  options={selectOptions}\n                  value={formData.supervisor}\n                  onChange={(event): void =>\n                    setFormData({\n                      ...formData,\n                      supervisor: event.target.value\n                        ? (event.target.value as string)\n                        : ''\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className='send'>\n              <SFButton\n                variant='outlined'\n                sfColor='grey'\n                onClick={(): void => cleanOutput()}\n              >\n                Clear Input\n              </SFButton>\n              <SFButton\n                variant='contained'\n                sfColor='blue'\n                onClick={(): void => {\n                  handleFormResponse();\n                  setOpenResponsePanel(true);\n                }}\n              >\n                Send Information\n              </SFButton>\n            </div>\n          </form>\n        )}\n      </div>\n      <footer className='brand'>\n        <span>Powered by</span>\n        <br />\n        <SFLink\n          sfSize='medium'\n          color='primary'\n          href='https://smartforce.app'\n          target='_blank'\n        >\n          SmartForce Technologies, Inc.\n        </SFLink>\n      </footer>\n      {isSent && (\n        <div className='loadingScreen'>\n          <SFSpinner size='60px' />\n        </div>\n      )}\n      <SFAlert\n        title='Form Output'\n        PaperProps={{ className: 'demoResponse' }}\n        maxWidth='sm'\n        fullWidth\n        open={openResponsePanel}\n        content=''\n        rightAction={{\n          label: 'Close',\n          buttonProps: {\n            onClick: (): void => setOpenResponsePanel(false)\n          }\n        }}\n      >\n        {!isSent && (\n          <div className='response'>\n            <SFScrollable>\n              <code>\n                <pre>\n                  {response && Object.keys(response).length === 0\n                    ? ''\n                    : JSON.stringify(response, null, 2)}\n                </pre>\n              </code>\n            </SFScrollable>\n          </div>\n        )}\n      </SFAlert>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { FormView } from '../FormView/FormView';\nimport { SFScrollable } from 'sfui';\n\nexport const DemosPage = (): JSX.Element => {\n  return (\n    <div className='demoPage'>\n      <SFScrollable>\n        <FormView />\n      </SFScrollable>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport {\n  SFThemeProvider,\n  createSFTheme,\n  SFTheme,\n  SFThemeType,\n  SFPaper,\n  SFSwitch,\n  useSFMediaQuery,\n  SFStylesProvider,\n  SFButton\n} from 'sfui';\n\nimport { ComponentsPage } from './Pages/ComponentsPage';\nimport { DemosPage } from './Pages/DemosPage';\n\nconst setThemeType = (theme: SFThemeType): void => {\n  localStorage.setItem('Smartforce.SFuiExample.ThemeType', theme);\n};\n\nconst getThemeType = (): SFThemeType | undefined => {\n  return localStorage.getItem('Smartforce.SFuiExample.ThemeType') as\n    | SFThemeType\n    | undefined;\n};\n\nconst App = (): JSX.Element => {\n  const prefersDarkMode: boolean = useSFMediaQuery(\n    '(prefers-color-scheme: dark)'\n  );\n\n  const [nightMode, setNightMode] = useState(prefersDarkMode);\n  const [showDemo, setShowDemo] = useState(false);\n\n  const switchLabel = nightMode === true ? 'Night' : 'Day';\n\n  const theme: SFTheme = createSFTheme(nightMode ? 'night' : 'day');\n  const toggleSwitch = (): void => {\n    setThemeType(nightMode ? 'day' : 'night');\n    setNightMode((value) => !value);\n  };\n\n  React.useEffect(() => {\n    const getLocalStorageThemeType: SFThemeType | undefined = getThemeType();\n    if (getLocalStorageThemeType) {\n      setNightMode(getLocalStorageThemeType === 'night');\n    } else {\n      setThemeType(prefersDarkMode ? 'night' : 'day');\n      setNightMode(prefersDarkMode);\n    }\n  }, []);\n\n  return (\n    <SFThemeProvider theme={theme}>\n      <SFStylesProvider injectFirst>\n        <SFPaper\n          style={{\n            backgroundColor: theme.palette.background.default\n          }}\n          className={`${nightMode ? 'night' : 'day'}`}\n        >\n          <div className='bodyContent'>\n            <h1 className='textHeader'>\n              <span>\n                SFUI <span className='libText'>Library </span>\n                <span\n                  className='textBrand'\n                  style={{ color: theme.palette.primary.main }}\n                >\n                  by Smartforce\n                </span>\n              </span>\n              <SFSwitch\n                label={switchLabel}\n                checked={nightMode}\n                onChange={toggleSwitch}\n              />\n            </h1>\n            <div className='row topBar'>\n              <SFButton\n                size='medium'\n                sfColor='blue'\n                variant='text'\n                onClick={(): void => setShowDemo(false)}\n              >\n                Components\n              </SFButton>\n              <SFButton\n                size='medium'\n                sfColor='blue'\n                variant='text'\n                onClick={(): void => setShowDemo(true)}\n              >\n                Demos\n              </SFButton>\n            </div>\n            {showDemo === false ? <ComponentsPage /> : <DemosPage />}\n          </div>\n        </SFPaper>\n      </SFStylesProvider>\n    </SFThemeProvider>\n  );\n};\n\nexport default App;\n","import './index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","export interface SFColorProps {\n  A100?: string;\n  A200?: string;\n  A400?: string;\n  A700?: string;\n  50: string;\n  100: string;\n  200: string;\n  300: string;\n  400: string;\n  500: string;\n  600: string;\n  700: string;\n  800: string;\n  900: string;\n}\n\nconst SFBlue: SFColorProps = {\n  50: '#E5F6FF',\n  100: '#CCEBFF',\n  200: '#80C6FF',\n  300: '#5CADFF',\n  400: '#338FFF',\n  500: '#0066FF',\n  600: '#0050E6',\n  700: '#003DCC',\n  800: '#002699',\n  900: '#001466'\n};\n\nconst SFRed: SFColorProps = {\n  50: '#FCEEEF',\n  100: '#F9DCDE',\n  200: '#F0A8AD',\n  300: '#EB8E95',\n  400: '#E7747C',\n  500: '#DB343E',\n  600: '#C7232E',\n  700: '#AD1F29',\n  800: '#821724',\n  900: '#5F111E'\n};\n\nconst SFGrey: SFColorProps = {\n  A100: '#CCCCCC',\n  A200: '#B2B2B2',\n  A400: '#333333',\n  A700: '#666666',\n  50: '#F2F2F2',\n  100: '#E5E5E5',\n  200: '#CCCCCC',\n  300: '#B2B2B2',\n  400: '#999999',\n  500: '#808080',\n  600: '#666666',\n  700: '#4D4D4D',\n  800: '#333333',\n  900: '#1A1A1A'\n};\n\nconst SFBlueMainLight = SFBlue[500];\nconst SFBlueMainDark = SFBlue[200];\n\nconst SFRedMainLight = SFRed[700];\nconst SFRedMainDark = SFRed[200];\n\nconst SFGreyMainLight = SFGrey[600];\nconst SFGreyMainDark = SFGrey[400];\n\nconst SFBackgroundLight = '#FAFAFA';\nconst SFBackgroundDark = '#121212';\n\nconst SFSurfaceLight = '#FFFFFF';\nconst SFSurfaceDark = '#1F1F1F';\n\nconst SFTextWhite = '#F2F2F2';\nconst SFTextBlack = '#1A1A1A';\n\nconst SFCommonWhite = '#FFFFFF';\nconst SFCommonBlack = '#000000';\n\nexport {\n  SFBlue,\n  SFBlueMainLight,\n  SFBlueMainDark,\n  SFRed,\n  SFRedMainLight,\n  SFRedMainDark,\n  SFGrey,\n  SFGreyMainLight,\n  SFGreyMainDark,\n  SFBackgroundLight,\n  SFBackgroundDark,\n  SFSurfaceLight,\n  SFSurfaceDark,\n  SFTextWhite,\n  SFTextBlack,\n  SFCommonWhite,\n  SFCommonBlack\n};\n","export function hexToRgba(hex: string, opacity: number): string | undefined {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n  return result\n    ? `rgba(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(\n        result[3],\n        16\n      )}, ${opacity})`\n    : undefined;\n}\n","import {\n  Dialog,\n  DialogProps,\n  DialogTitle,\n  DialogTitleProps,\n  DialogContent,\n  DialogContentProps,\n  DialogContentText,\n  DialogContentTextProps,\n  DialogActions,\n  DialogActionsProps\n} from '@material-ui/core';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { hexToRgba } from '../../Helpers';\n\nexport interface SFDialogTitleProps extends DialogTitleProps {}\nexport interface SFDialogContentProps extends DialogContentProps {}\nexport interface SFDialogContentTextProps extends DialogContentTextProps {}\nexport interface SFDialogActionsProps extends DialogActionsProps {}\nexport interface SFDialogProps extends DialogProps {}\n\nexport const SFDialogTitle = withStyles((theme: Theme) => ({\n  root: {\n    padding: '36px 36px 24px',\n    '& h2': {\n      color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`,\n      fontSize: 24,\n      fontStyle: 'normal',\n      fontWeight: 500,\n      lineHeight: '28px'\n    }\n  }\n}))(DialogTitle);\n\nexport const SFDialogContent = withStyles(() => ({\n  root: {\n    padding: '0 36px'\n  }\n}))(DialogContent);\n\nexport const SFDialogContentText = withStyles((theme: Theme) => ({\n  root: {\n    color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`,\n    fontSize: 16,\n    fontStyle: 'normal',\n    fontWeight: 400,\n    lineHeight: '24px'\n  }\n}))(DialogContentText);\n\nexport const SFDialogActions = withStyles(() => ({\n  root: {\n    padding: '24px 36px 36px',\n    display: 'flex',\n    gap: '17px'\n  }\n}))(DialogActions);\n\nexport const SFDialog = withStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: `${\n      theme.palette.type === 'light'\n        ? 'rgba(0, 0, 0, 0.3)'\n        : hexToRgba(SFGrey.A400 as string, 0.8)\n    }`\n  }\n}))(Dialog);\n","import { withStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { SFGrey } from '../../../SFColors/SFColors';\n\nexport interface ButtonMixinProps {\n  contained: {\n    light: {\n      color: string;\n      backgroundColor: string;\n      backgroundColorHover: string;\n      backgroundColorActive: string;\n      backgroundColorDisabled: string;\n    };\n    dark: {\n      color: string;\n      backgroundColor: string;\n      backgroundColorHover: string;\n      backgroundColorActive: string;\n      backgroundColorDisabled: string;\n    };\n  };\n  outlined: {\n    light: {\n      color: string;\n      colorHover: string;\n      colorActive: string;\n      backgroundColor: string;\n      backgroundColorHover: string;\n      backgroundColorActive: string;\n      backgroundColorDisabled: string;\n      borderColor: string;\n      borderColorHover: string;\n      borderColorActive: string;\n    };\n    dark: {\n      color: string;\n      colorHover: string;\n      colorActive: string;\n      backgroundColor: string;\n      backgroundColorHover: string;\n      backgroundColorActive: string;\n      backgroundColorDisabled: string;\n      borderColor: string;\n      borderColorHover: string;\n      borderColorActive: string;\n    };\n  };\n  text: {\n    light: {\n      color: string;\n      colorHover: string;\n      colorActive: string;\n      backgroundColor: string;\n      backgroundColorHover: string;\n      backgroundColorActive: string;\n      backgroundColorDisabled: string;\n    };\n    dark: {\n      color: string;\n      colorHover: string;\n      colorActive: string;\n      backgroundColor: string;\n      backgroundColorHover: string;\n      backgroundColorActive: string;\n      backgroundColorDisabled: string;\n    };\n  };\n}\n\n// TODO: Fix this 'any' return type\nexport default function ButtonMixin(sfButtonConfig: ButtonMixinProps): any {\n  return withStyles((theme: Theme) => ({\n    root: {\n      color: sfButtonConfig.contained[theme.palette.type].color,\n      backgroundColor:\n        sfButtonConfig.contained[theme.palette.type].backgroundColor,\n      '&:hover': {\n        backgroundColor:\n          sfButtonConfig.contained[theme.palette.type].backgroundColorHover\n      },\n      '&:active': {\n        backgroundColor:\n          sfButtonConfig.contained[theme.palette.type].backgroundColorActive\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600],\n        backgroundColor:\n          theme.palette.type === 'light' ? SFGrey[100] : SFGrey[800]\n      }\n    },\n    disabled: {\n      color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600],\n      backgroundColor:\n        theme.palette.type === 'light' ? SFGrey[100] : SFGrey[800]\n    },\n    outlined: {\n      color: sfButtonConfig.outlined[theme.palette.type].color,\n      borderColor: sfButtonConfig.outlined[theme.palette.type].borderColor,\n      backgroundColor:\n        sfButtonConfig.outlined[theme.palette.type].backgroundColor,\n      '&:hover': {\n        color: sfButtonConfig.outlined[theme.palette.type].colorHover,\n        borderColor:\n          sfButtonConfig.outlined[theme.palette.type].borderColorHover,\n        backgroundColor:\n          sfButtonConfig.outlined[theme.palette.type].backgroundColorHover\n      },\n      '&:active': {\n        color: sfButtonConfig.outlined[theme.palette.type].colorActive,\n        borderColor:\n          sfButtonConfig.outlined[theme.palette.type].borderColorActive,\n        backgroundColor:\n          sfButtonConfig.outlined[theme.palette.type].backgroundColorActive\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600],\n        backgroundColor: 'transparent',\n        borderColor: theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n      }\n    },\n    text: {\n      color: sfButtonConfig.text[theme.palette.type].color,\n      backgroundColor: sfButtonConfig.text[theme.palette.type].backgroundColor,\n      border: 'none',\n      '&:hover': {\n        color: sfButtonConfig.text[theme.palette.type].colorHover,\n        backgroundColor:\n          sfButtonConfig.text[theme.palette.type].backgroundColorHover,\n        border: 'none'\n      },\n      '&:active': {\n        color: sfButtonConfig.text[theme.palette.type].colorActive,\n        backgroundColor:\n          sfButtonConfig.text[theme.palette.type].backgroundColorActive,\n        border: 'none'\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600],\n        backgroundColor: 'transparent',\n        borderColor: 'none'\n      }\n    }\n  }))(Button);\n}\n","import ButtonMixin, { ButtonMixinProps } from './ButtonMixin';\nimport { SFBlue, SFGrey } from '../../../SFColors/SFColors';\n\nconst sfButtonConfig: ButtonMixinProps = {\n  contained: {\n    light: {\n      color: '#FFFFFF',\n      backgroundColor: SFBlue[500],\n      backgroundColorHover: SFBlue[700],\n      backgroundColorActive: SFBlue[800],\n      backgroundColorDisabled: SFGrey[100]\n    },\n    dark: {\n      color: '#1A1A1A',\n      backgroundColor: SFBlue[200],\n      backgroundColorHover: SFBlue[300],\n      backgroundColorActive: SFBlue[400],\n      backgroundColorDisabled: SFGrey[800]\n    }\n  },\n  outlined: {\n    light: {\n      color: SFBlue[500],\n      colorHover: SFBlue[700],\n      colorActive: SFBlue[800],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(204, 235, 255, 0.4)',\n      backgroundColorActive: 'rgba(204, 235, 255, 0.6)',\n      backgroundColorDisabled: SFGrey[100],\n      borderColor: SFBlue[500],\n      borderColorHover: SFBlue[700],\n      borderColorActive: SFBlue[800]\n    },\n    dark: {\n      color: SFBlue[200],\n      colorHover: SFBlue[300],\n      colorActive: SFBlue[400],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(128, 198, 255, 0.2)',\n      backgroundColorActive: 'rgba(128, 198, 255, 0.1)',\n      backgroundColorDisabled: SFGrey[800],\n      borderColor: SFBlue[200],\n      borderColorHover: SFBlue[300],\n      borderColorActive: SFBlue[400]\n    }\n  },\n  text: {\n    light: {\n      color: SFBlue[500],\n      colorHover: SFBlue[700],\n      colorActive: SFBlue[800],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(204, 235, 255, 0.4)',\n      backgroundColorActive: 'rgba(204, 235, 255, 0.6)',\n      backgroundColorDisabled: SFGrey[100]\n    },\n    dark: {\n      color: SFBlue[200],\n      colorHover: SFBlue[300],\n      colorActive: SFBlue[400],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(128, 198, 255, 0.2)',\n      backgroundColorActive: 'rgba(128, 198, 255, 0.1)',\n      backgroundColorDisabled: SFGrey[800]\n    }\n  }\n};\n\nconst BlueButton = ButtonMixin(sfButtonConfig);\n\nexport default BlueButton;\n","import ButtonMixin, { ButtonMixinProps } from './ButtonMixin';\nimport { SFRed, SFGrey } from '../../../SFColors/SFColors';\n\nconst sfButtonConfig: ButtonMixinProps = {\n  contained: {\n    light: {\n      color: '#FFFFFF',\n      backgroundColor: SFRed[700],\n      backgroundColorHover: SFRed[800],\n      backgroundColorActive: SFRed[900],\n      backgroundColorDisabled: SFGrey[100]\n    },\n    dark: {\n      color: '#1A1A1A',\n      backgroundColor: SFRed[200],\n      backgroundColorHover: SFRed[300],\n      backgroundColorActive: SFRed[400],\n      backgroundColorDisabled: SFGrey[800]\n    }\n  },\n  outlined: {\n    light: {\n      color: SFRed[700],\n      colorHover: SFRed[800],\n      colorActive: SFRed[900],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(249, 220, 222, 0.4)',\n      backgroundColorActive: 'rgba(249, 220, 222, 0.7)',\n      backgroundColorDisabled: SFGrey[100],\n      borderColor: SFRed[700],\n      borderColorHover: SFRed[800],\n      borderColorActive: SFRed[900]\n    },\n    dark: {\n      color: SFRed[200],\n      colorHover: SFRed[300],\n      colorActive: SFRed[400],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(240, 168, 173, 0.2)',\n      backgroundColorActive: 'rgba(240, 168, 173, 0.1)',\n      backgroundColorDisabled: SFGrey[800],\n      borderColor: SFRed[200],\n      borderColorHover: SFRed[300],\n      borderColorActive: SFRed[400]\n    }\n  },\n  text: {\n    light: {\n      color: SFRed[700],\n      colorHover: SFRed[800],\n      colorActive: SFRed[900],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(249, 220, 222, 0.4)',\n      backgroundColorActive: 'rgba(249, 220, 222, 0.7)',\n      backgroundColorDisabled: SFGrey[100]\n    },\n    dark: {\n      color: SFRed[200],\n      colorHover: SFRed[300],\n      colorActive: SFRed[400],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(240, 168, 173, 0.2)',\n      backgroundColorActive: 'rgba(240, 168, 173, 0.1)',\n      backgroundColorDisabled: SFGrey[800]\n    }\n  }\n};\n\nconst RedButton = ButtonMixin(sfButtonConfig);\n\nexport default RedButton;\n","import ButtonMixin, { ButtonMixinProps } from './ButtonMixin';\nimport { SFGrey } from '../../../SFColors/SFColors';\n\nconst sfButtonConfig: ButtonMixinProps = {\n  contained: {\n    light: {\n      color: '#1A1A1A',\n      backgroundColor: SFGrey[100],\n      backgroundColorHover: SFGrey[200],\n      backgroundColorActive: SFGrey[300],\n      backgroundColorDisabled: SFGrey[100]\n    },\n    dark: {\n      color: '#F2F2F2',\n      backgroundColor: SFGrey[500],\n      backgroundColorHover: SFGrey[600],\n      backgroundColorActive: SFGrey[700],\n      backgroundColorDisabled: SFGrey[800]\n    }\n  },\n  outlined: {\n    light: {\n      color: '#1A1A1A',\n      colorHover: SFGrey[900],\n      colorActive: SFGrey[900],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(204, 204, 204, 0.3)',\n      backgroundColorActive: 'rgba(204, 204, 204, 0.5)',\n      backgroundColorDisabled: SFGrey[100],\n      borderColor: SFGrey[400],\n      borderColorHover: SFGrey[600],\n      borderColorActive: SFGrey[800]\n    },\n    dark: {\n      color: '#F2F2F2',\n      colorHover: SFGrey[50],\n      colorActive: SFGrey[50],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(128, 128, 128, 0.3)',\n      backgroundColorActive: 'rgba(128, 128, 128, 0.2)',\n      backgroundColorDisabled: SFGrey[800],\n      borderColor: SFGrey[500],\n      borderColorHover: SFGrey[600],\n      borderColorActive: SFGrey[700]\n    }\n  },\n  text: {\n    light: {\n      color: '#1A1A1A',\n      colorHover: SFGrey[900],\n      colorActive: SFGrey[900],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(204, 204, 204, 0.3)',\n      backgroundColorActive: 'rgba(204, 204, 204, 0.5)',\n      backgroundColorDisabled: SFGrey[100]\n    },\n    dark: {\n      color: '#F2F2F2',\n      colorHover: SFGrey[50],\n      colorActive: SFGrey[50],\n      backgroundColor: 'transparent',\n      backgroundColorHover: 'rgba(128, 128, 128, 0.3)',\n      backgroundColorActive: 'rgba(128, 128, 128, 0.2)',\n      backgroundColorDisabled: SFGrey[800]\n    }\n  }\n};\n\nconst GreyButton = ButtonMixin(sfButtonConfig);\n\nexport default GreyButton;\n","import * as React from 'react';\nimport { ButtonProps } from '@material-ui/core/Button';\n\nimport BlueButton from './CustomButtons/BlueButton';\nimport RedButton from './CustomButtons/RedButton';\nimport GreyButton from './CustomButtons/GreyButton';\n\ninterface ButtonInnerProps {\n  padding?: string;\n  size?: string;\n  lineHeight?: string;\n  height?: string;\n}\n\nconst getButtonInnerProps = (size?: string): ButtonInnerProps => {\n  const result: ButtonInnerProps = {};\n  switch (size) {\n    case 'small':\n      result.padding = '4px 10px';\n      result.size = '13px';\n      result.lineHeight = '22px';\n      result.height = '30px';\n      break;\n    case 'large':\n      result.padding = '8px 22px';\n      result.size = '15px';\n      result.lineHeight = '26px';\n      result.height = '42px';\n      break;\n    default:\n      result.padding = '6px 16px';\n      result.size = '14px';\n      result.lineHeight = '24px';\n      result.height = '36px';\n      break;\n  }\n  return result;\n};\n\nexport interface SFButtonProps extends ButtonProps {\n  sfColor?: 'blue' | 'red' | 'grey';\n}\n\nexport const SFButton = ({\n  variant = 'contained',\n  color,\n  size = 'medium',\n  sfColor = 'blue',\n  ...props\n}: SFButtonProps): React.ReactElement<SFButtonProps> => {\n  const ButtonInnerProps: ButtonInnerProps = getButtonInnerProps(size);\n  const ButtonInnerStyle = {\n    padding: ButtonInnerProps.padding,\n    fontSize: ButtonInnerProps.size,\n    lineHeight: ButtonInnerProps.lineHeight,\n    height: ButtonInnerProps.height\n  };\n\n  const Buttons = {\n    grey: GreyButton,\n    blue: BlueButton,\n    red: RedButton\n  };\n\n  const ButtonComponent = Buttons[sfColor];\n\n  return (\n    <ButtonComponent\n      {...props}\n      variant={variant}\n      disableElevation\n      disableRipple\n      style={ButtonInnerStyle}\n    />\n  );\n};\n","import React from 'react';\nimport {\n  SFDialog,\n  SFDialogProps,\n  SFDialogActions,\n  SFDialogContent,\n  SFDialogContentText,\n  SFDialogTitle\n} from '../SFDialog/SFDialog';\nimport { SFButton, SFButtonProps } from '../SFButton/SFButton';\n\nexport interface SFAlertProps extends SFDialogProps {\n  title: string;\n  content: string;\n  leftAction?: SFAlertAction;\n  rightAction?: SFAlertAction;\n}\n\nexport interface SFAlertAction {\n  label: string;\n  buttonProps?: SFButtonProps;\n}\n\nexport const SFAlert = ({\n  title,\n  content,\n  leftAction,\n  rightAction,\n  children,\n  ...props\n}: SFAlertProps): React.ReactElement<SFAlertProps> => {\n  return (\n    <div>\n      <SFDialog {...props}>\n        <SFDialogTitle>{title}</SFDialogTitle>\n\n        <SFDialogContent>\n          <SFDialogContentText>{content}</SFDialogContentText>\n\n          {children}\n        </SFDialogContent>\n\n        <SFDialogActions>\n          {leftAction && (\n            <SFButton sfColor='grey' variant='text' {...leftAction.buttonProps}>\n              {leftAction.label}\n            </SFButton>\n          )}\n\n          {rightAction && (\n            <SFButton sfColor='blue' {...rightAction.buttonProps}>\n              {rightAction.label}\n            </SFButton>\n          )}\n        </SFDialogActions>\n      </SFDialog>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport TextField, { OutlinedTextFieldProps } from '@material-ui/core/TextField';\nimport { SFGrey, SFRed, SFBlue } from '../../SFColors/SFColors';\n\nconst StyledTextField = withStyles((theme: Theme) => ({\n  root: {\n    '& .MuiInputBase-root': {\n      backgroundColor: theme.palette.background.paper,\n      height: '56px',\n      boxSizing: 'border-box',\n\n      '&.Mui-focused': {\n        '& .MuiOutlinedInput-notchedOutline': {\n          border: `2px solid ${theme.palette.primary.main}`\n        },\n\n        '&.Mui-error': {\n          '& .MuiOutlinedInput-notchedOutline': {\n            border: `1px solid ${\n              theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n            }`\n          }\n        }\n      },\n\n      '&.Mui-error': {\n        '& .MuiOutlinedInput-notchedOutline': {\n          border: `1px solid ${\n            theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n          }`\n        }\n      },\n\n      '&.Mui-disabled': {\n        '& .MuiInputBase-input': {\n          color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600]\n        }\n      },\n\n      '&:hover': {\n        '& .MuiOutlinedInput-notchedOutline': {\n          border: `1px solid ${\n            theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n          }`\n        },\n\n        '&.Mui-disabled': {\n          '& .MuiOutlinedInput-notchedOutline': {\n            border: `1px solid ${\n              theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n            }`\n          }\n        }\n      },\n\n      '& .MuiInputBase-input': {\n        padding: '27px 13px 5px',\n        color: theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50],\n\n        '&:focus': {\n          backgroundColor: 'transparent'\n        }\n      },\n\n      '& .MuiInputBase-inputMultiline': {\n        padding: '30px 13px 3px'\n      },\n\n      '&.MuiOutlinedInput-root': {\n        '&:after, &:before': {\n          content: 'none !important'\n        }\n      },\n\n      '&.MuiOutlinedInput-multiline': {\n        padding: '30px 12px 8px',\n        height: 'auto',\n\n        '& .MuiInputBase-inputMultiline': {\n          padding: '0'\n        }\n      },\n\n      '& .MuiOutlinedInput-notchedOutline': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n        }`,\n        borderRadius: 2,\n\n        '& > legend': {\n          transition: 'none',\n          maxWidth: '0px'\n        }\n      }\n    },\n\n    '& .MuiInputLabel-outlined': {\n      fontSize: '16px',\n      lineHeight: '24px',\n      color: theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400],\n\n      '&.MuiInputLabel-shrink': {\n        fontSize: '14px',\n        lineHeight: '20px',\n        transform: `translate(12px, 6px)`\n      },\n\n      '&.Mui-focused': {\n        color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n      },\n\n      '&.Mui-error': {\n        color: theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n      },\n\n      '&.Mui-disabled': {\n        color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600]\n      }\n    },\n\n    '& .MuiFormHelperText-root': {\n      margin: '5px 13px 0px',\n      lineHeight: '12px',\n      fontSize: '10px',\n\n      '&.Mui-error': {\n        color: theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n      }\n    }\n  }\n}))(TextField);\n\nexport interface SFTextFieldProps extends Partial<OutlinedTextFieldProps> {}\n\nexport const SFTextField = ({\n  variant,\n  autoComplete = 'off',\n  rows = 4,\n  color,\n  ...props\n}: SFTextFieldProps): React.ReactElement<SFTextFieldProps> => {\n  return (\n    <StyledTextField\n      {...props}\n      fullWidth\n      color='primary'\n      variant='outlined'\n      rows={props.multiline ? rows : 1}\n      autoComplete={autoComplete}\n    />\n  );\n};\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IcomoonReact = exports.iconList = void 0;\nvar react_1 = __importDefault(require(\"react\"));\nexports.iconList = function (iconSet) {\n    var list = [];\n    iconSet.icons.forEach(function (icon) {\n        list.push(icon.properties.name.split(\", \")[0]);\n    });\n    return list;\n};\nfunction getSvg(icon, iconSet, styles, size, className, rest) {\n    var find = function (iconEl) { return iconEl.properties.name.split(\", \").includes(icon); };\n    var currentIcon = iconSet.icons.find(find);\n    var renderPath = function (iconObj) { return function (path, index) {\n        var attrs = (iconObj.attrs && iconObj.attrs[index]) || {};\n        return react_1.default.createElement(\"path\", __assign({ style: styles.path, key: index, d: path }, attrs));\n    }; };\n    if (currentIcon) {\n        return (react_1.default.createElement(\"svg\", __assign({ className: className, style: styles.svg, width: size, height: size, viewBox: \"0 0 \" + (currentIcon.icon.width || \"1024\") + \" 1024\", xmlns: \"http://www.w3.org/2000/svg\" }, rest), currentIcon.icon.paths.map(renderPath(currentIcon.icon))));\n    }\n    console.warn(\"icon \" + icon + \" does not exist.\");\n    return null;\n}\nexports.IcomoonReact = function (props) {\n    var color = props.color, _a = props.size, size = _a === void 0 ? \"100%\" : _a, icon = props.icon, iconSet = props.iconSet, _b = props.className, className = _b === void 0 ? \"\" : _b, _c = props.style, style = _c === void 0 ? {} : _c, rest = __rest(props, [\"color\", \"size\", \"icon\", \"iconSet\", \"className\", \"style\"]);\n    var styles = {\n        svg: __assign({ display: \"inline-block\", verticalAlign: \"middle\" }, style),\n        path: {\n            fill: color\n        }\n    };\n    return getSvg(icon, iconSet, styles, size, className, rest);\n};\nexports.IcomoonReact.displayName = \"IcomoonReact\";\nexports.default = exports.IcomoonReact;\n//# sourceMappingURL=IcomoonReact.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IcomoonReact_1 = require(\"./IcomoonReact/IcomoonReact\");\nvar IcomoonReact_2 = require(\"./IcomoonReact/IcomoonReact\");\nObject.defineProperty(exports, \"iconList\", { enumerable: true, get: function () { return IcomoonReact_2.iconList; } });\nexports.default = IcomoonReact_1.IcomoonReact;\n//# sourceMappingURL=index.js.map","import React, { forwardRef } from 'react';\nimport { useTheme, Theme } from '@material-ui/core/styles';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport IcomoonReact from 'icomoon-react';\nimport IconSet from './icons/selection.json';\n\nexport type SFIconRotation = 'left' | 'right' | 'invert' | 'none';\n\nexport interface SFIconProps {\n  color?: string | undefined;\n  size?: string | number | undefined;\n  rotate?: SFIconRotation;\n  icon: string;\n  className?: string | undefined;\n  style?: React.CSSProperties | undefined;\n}\n\nconst getRotationDeg = (rotation: SFIconRotation): number => {\n  switch (rotation) {\n    case 'left':\n      return -90;\n    case 'right':\n      return 90;\n    case 'invert':\n      return 180;\n    default:\n      return 0;\n      break;\n  }\n};\n\nexport const SFIcon = forwardRef(\n  (\n    { icon = 'Bell', size = 24, rotate = 'none', ...props }: SFIconProps,\n    ref: React.Ref<SVGSVGElement>\n  ): React.ReactElement<SFIconProps> => {\n    const theme: Theme = useTheme();\n    const colorDefault: string =\n      theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400];\n    const color: string = props.color ? props.color : colorDefault;\n    const customStyle: React.CSSProperties = {\n      transform: `rotate(${getRotationDeg(rotate)}deg)`\n    };\n\n    return (\n      <IcomoonReact\n        {...props}\n        iconSet={IconSet}\n        icon={icon}\n        size={size}\n        color={color}\n        style={customStyle}\n        ref={ref}\n      />\n    );\n  }\n);\n","import * as React from 'react';\nimport { Theme, withStyles, makeStyles } from '@material-ui/core/styles';\nimport {\n  Autocomplete,\n  AutocompleteProps,\n  AutocompleteInputChangeReason,\n  AutocompleteChangeReason,\n  AutocompleteCloseReason,\n  AutocompleteRenderInputParams\n} from '@material-ui/lab';\nimport { SFMenuOption } from '../SFSelect/SFSelect';\nimport { SFTextField } from '../SFTextField/SFTextField';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { SFGrey, SFSurfaceLight } from '../../SFColors/SFColors';\nimport { hexToRgba } from '../../Helpers';\n\nconst StyledAutocomplete = withStyles((theme: Theme) => ({\n  inputRoot: {\n    '&[class*=\"MuiOutlinedInput-root\"]': {\n      paddingTop: '20px',\n\n      '& input.MuiAutocomplete-input:first-child': {\n        padding: '9.5px 4px'\n      },\n\n      '& .MuiAutocomplete-endAdornment': {\n        right: '18px'\n      }\n    }\n  },\n  endAdornment: {\n    marginTop: '-3px',\n    '& button': {\n      padding: '9px',\n      '&:hover': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey.A100 as string, 0.3)\n            : hexToRgba(SFGrey[500] as string, 0.3)\n      },\n      '&:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey.A100 as string, 0.5)\n            : hexToRgba(SFGrey[500] as string, 0.5)\n      }\n    }\n  },\n  listbox: {\n    padding: '13px 0',\n    backgroundColor:\n      theme.palette.type === 'light' ? SFSurfaceLight : SFGrey[800]\n  },\n  option: {\n    padding: '6px 24px',\n\n    '&[data-focus=\"true\"]': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.3)\n          : hexToRgba(SFGrey[500] as string, 0.3),\n      '&:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey.A100 as string, 0.5)\n            : hexToRgba(SFGrey[500] as string, 0.5)\n      }\n    },\n\n    '&[aria-selected=\"true\"]': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.5)\n          : hexToRgba(SFGrey[500] as string, 0.5)\n    }\n  }\n}))(Autocomplete);\n\nconst useStyles = makeStyles({\n  root: {\n    '& button.MuiAutocomplete-popupIndicator': {\n      padding: (props: Partial<SFAutocompleteProps>): string =>\n        props.hasPopupIcon ? '9px' : '0'\n    }\n  }\n});\n\nexport type SFAutocompleteInputChangeReason = AutocompleteInputChangeReason;\nexport type SFAutocompleteChangeReason = AutocompleteChangeReason;\nexport type SFAutocompleteCloseReason = AutocompleteCloseReason;\n\nexport interface SFAutocompleteProps\n  extends Omit<\n    AutocompleteProps<\n      SFMenuOption,\n      boolean | undefined,\n      boolean | undefined,\n      boolean | undefined\n    >,\n    'renderInput' | 'onChange' | 'onInputChange'\n  > {\n  label: string;\n  options: SFMenuOption[];\n  hasPopupIcon?: boolean;\n  onChange: (value: string) => void;\n}\n\nexport const SFAutocomplete = ({\n  label,\n  options,\n  hasPopupIcon = false,\n  ...props\n}: SFAutocompleteProps): React.ReactElement<SFAutocompleteProps> => {\n  const classes = useStyles({ hasPopupIcon });\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [inputValue, setInputValue] = React.useState<string>('');\n\n  const onInputChange = (\n    _event: React.ChangeEvent,\n    value: string,\n    reason: AutocompleteInputChangeReason\n  ): void => {\n    if (reason === 'reset') {\n      if (!props.freeSolo) {\n        setInputValue(value);\n        props.onChange(value);\n      }\n    } else {\n      setInputValue(value);\n\n      if (!isOpen && value.length > 0) {\n        setIsOpen(true);\n      } else if (isOpen && value.length === 0) {\n        setIsOpen(false);\n      }\n\n      if (props.freeSolo) {\n        props.onChange(value);\n      }\n    }\n  };\n\n  const onChange = (\n    _event: React.ChangeEvent,\n    option: SFMenuOption,\n    reason: AutocompleteChangeReason\n  ): void => {\n    setIsOpen(false);\n\n    if (reason !== 'create-option' && reason !== 'remove-option') {\n      setInputValue(option ? option.value : '');\n      props.onChange(option ? option.value : '');\n    }\n  };\n\n  const onOpen = (event: React.ChangeEvent): void => {\n    event.persist();\n\n    // If reason of open is click on button\n    if (event.type === 'click') {\n      setIsOpen(!isOpen);\n    }\n  };\n\n  const onClose = (\n    event: React.ChangeEvent,\n    reason: SFAutocompleteCloseReason\n  ): void => {\n    event.persist();\n\n    if (isOpen) {\n      setIsOpen(false);\n\n      if (props.onClose) {\n        props.onClose(event, reason);\n      }\n    }\n  };\n\n  return (\n    <StyledAutocomplete\n      className={`${classes.root} ${props.className || ''}`}\n      {...props}\n      open={isOpen}\n      openOnFocus={false}\n      options={options}\n      onChange={onChange}\n      onInputChange={onInputChange}\n      onClose={onClose}\n      onOpen={onOpen}\n      inputValue={inputValue}\n      getOptionSelected={(option: SFMenuOption, value: string): boolean =>\n        option.value === value\n      }\n      getOptionLabel={(option: SFMenuOption): string =>\n        typeof option === 'string' ? option : option.label\n      }\n      renderInput={(params: AutocompleteRenderInputParams): React.ReactNode => (\n        <SFTextField {...params} label={label} />\n      )}\n      popupIcon={hasPopupIcon ? <SFIcon icon='Down-2' size={16} /> : null}\n      closeIcon={<SFIcon icon='Close' size={16} />}\n    />\n  );\n};\n","import React from 'react';\nimport { Theme, withStyles, makeStyles } from '@material-ui/core/styles';\nimport { Autocomplete, AutocompleteRenderInputParams } from '@material-ui/lab';\nimport throttle from 'lodash.throttle';\nimport parse from 'autosuggest-highlight/parse';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { SFTextField } from '../SFTextField/SFTextField';\nimport { SFGrey, SFSurfaceLight } from '../../SFColors/SFColors';\nimport { hexToRgba } from '../../Helpers';\n\ninterface GeolocationPosition {\n  coords: {\n    latitude: number;\n    longitude: number;\n  };\n}\n\ninterface TextPart {\n  text: string;\n  highlight: boolean;\n}\n\nconst StyledAutocomplete = withStyles((theme: Theme) => ({\n  inputRoot: {\n    '&[class*=\"MuiOutlinedInput-root\"]': {\n      paddingTop: '20px',\n\n      '& input.MuiAutocomplete-input:first-child': {\n        padding: '9.5px 4px'\n      },\n\n      '& .MuiAutocomplete-endAdornment': {\n        right: '18px'\n      }\n    }\n  },\n  endAdornment: {\n    marginTop: '-3px'\n  },\n  popupIndicator: {\n    padding: 0\n  },\n  clearIndicator: {\n    padding: '9px',\n    '&:hover': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.3)\n          : hexToRgba(SFGrey[500] as string, 0.3)\n    },\n    '&:active': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.5)\n          : hexToRgba(SFGrey[500] as string, 0.5)\n    }\n  },\n  listbox: {\n    padding: '13px 0',\n    backgroundColor:\n      theme.palette.type === 'light' ? SFSurfaceLight : SFGrey[800]\n  },\n  option: {\n    padding: '6px 24px',\n\n    '&[data-focus=\"true\"]': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.3)\n          : hexToRgba(SFGrey[500] as string, 0.3),\n      '&:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey.A100 as string, 0.5)\n            : hexToRgba(SFGrey[500] as string, 0.5)\n      }\n    },\n\n    '&[aria-selected=\"true\"]': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.5)\n          : hexToRgba(SFGrey[500] as string, 0.5)\n    }\n  }\n}))(Autocomplete);\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  menu: {\n    display: 'grid',\n    gridTemplateColumns: 'auto 1fr',\n    gap: '15px',\n    alignItems: 'center'\n  },\n  itemText: {\n    fontSize: '16px',\n    lineHeight: '24px',\n    color: theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n  },\n  textHighlight: {\n    fontWeight: 700\n  },\n  itemSecondaryText: {\n    fontSize: '12px',\n    lineHeight: '14px',\n    color: theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]\n  }\n}));\n\nexport interface SFAutocompleteLocationResult {\n  text: string;\n  placeId?: string;\n}\n\nexport interface SFAutocompleteLocationProps {\n  label: string;\n  value: SFAutocompleteLocationResult;\n  disabled?: boolean;\n  currentLocation?: boolean;\n  currentLocationType?: 'address' | 'route';\n  onChange: (value: SFAutocompleteLocationResult) => void;\n}\n\nexport const SFAutocompleteLocation = ({\n  label,\n  value,\n  disabled = false,\n  currentLocation = false,\n  currentLocationType = 'route',\n  onChange\n}: SFAutocompleteLocationProps): React.ReactElement<SFAutocompleteLocationResult> => {\n  const classes = useStyles();\n  const autocompleteService = React.useRef<google.maps.places.AutocompleteService>();\n  const geocoderService = React.useRef<google.maps.Geocoder>();\n\n  const [apiLoaded, setApiLoaded] = React.useState<boolean>(false);\n\n  const [selectedOption, setSelectedOption] = React.useState<\n    Partial<google.maps.places.AutocompletePrediction>\n  >({});\n\n  const [options, setOptions] = React.useState<\n    google.maps.places.AutocompletePrediction[]\n  >([]);\n\n  const getPredictions = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        if (autocompleteService.current) {\n          autocompleteService.current.getPlacePredictions(request, callback);\n        }\n      }, 200),\n    []\n  );\n\n  const fetchOptions = (): void =>\n    getPredictions(\n      { input: value.text },\n      (results: google.maps.places.AutocompletePrediction[]) => {\n        setOptions(results || []);\n      }\n    );\n\n  React.useEffect(() => {\n    // Check if Google API it's loaded\n    if (\n      window.google &&\n      typeof window.google === 'object' &&\n      typeof window.google.maps === 'object'\n    ) {\n      setApiLoaded(true);\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n\n      if (\n        (!value || !value.text || value.text.length === 0) &&\n        currentLocation &&\n        navigator.geolocation\n      ) {\n        geocoderService.current = new google.maps.Geocoder();\n\n        const onLocationError = (): void =>\n          console.error(\"Can't get GeolocationPosition: \");\n\n        const onLocationSuccess = (pos: GeolocationPosition): void => {\n          const latlng = {\n            lat: pos.coords.latitude,\n            lng: pos.coords.longitude\n          };\n\n          if (geocoderService.current) {\n            geocoderService.current.geocode(\n              { location: latlng },\n              (\n                results: google.maps.GeocoderResult[],\n                status: google.maps.GeocoderStatus\n              ) => {\n                if (status === 'OK') {\n                  const locationType = `${\n                    currentLocationType === 'address' ? 'street_' : ''\n                  }${currentLocationType}`;\n\n                  const result:\n                    | google.maps.GeocoderResult\n                    | undefined = results.find(\n                    (result: google.maps.GeocoderResult) => {\n                      return result.types.indexOf(locationType) !== -1;\n                    }\n                  );\n\n                  if (result) {\n                    setSelectedOption({\n                      description: result.formatted_address,\n                      // eslint-disable-next-line\n                      place_id: result.place_id\n                    });\n\n                    onChange({\n                      text: result.formatted_address,\n                      placeId: result.place_id\n                    });\n                  } else {\n                    console.error('Geocoder: no results found');\n                  }\n                } else {\n                  console.error('Geocoder: failed due to: ' + status);\n                }\n              }\n            );\n          }\n        };\n\n        navigator.geolocation.getCurrentPosition(\n          onLocationSuccess,\n          onLocationError\n        );\n      } else if (value.text && value.text.length > 0) {\n        fetchOptions();\n      }\n    } else {\n      console.error('Google API is not loaded');\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (value.text && value.text.length > 0) {\n      fetchOptions();\n    } else {\n      setOptions([]);\n    }\n  }, [value]);\n\n  const renderInput = (\n    params: AutocompleteRenderInputParams\n  ): React.ReactNode => <SFTextField {...params} label={label} />;\n\n  const onAutocompleteChange = (\n    _event: React.ChangeEvent,\n    newValue: google.maps.places.AutocompletePrediction\n  ): void => {\n    if (newValue) {\n      setSelectedOption(newValue);\n      onChange({\n        text: newValue.description,\n        placeId: newValue.place_id\n      });\n    }\n  };\n\n  const onInputChange = (\n    _event: React.ChangeEvent,\n    newValue: string,\n    reason: string\n  ): void => {\n    if (reason !== 'reset') {\n      onChange({ text: newValue });\n    }\n  };\n\n  const getOptionLabel = (\n    option: google.maps.places.AutocompletePrediction\n  ): string => option.description || '';\n\n  const renderOption = (\n    option: google.maps.places.AutocompletePrediction\n  ): React.ReactNode => {\n    let matches: google.maps.places.PredictionSubstring[] = [];\n    let parts: TextPart[] = [];\n\n    if (option.structured_formatting) {\n      matches = option.structured_formatting.main_text_matched_substrings;\n      parts = parse(\n        option.structured_formatting.main_text,\n        matches.map((match: google.maps.places.PredictionSubstring) => [\n          match.offset,\n          match.offset + match.length\n        ])\n      );\n    }\n\n    return (\n      <div className={classes.menu}>\n        <SFIcon icon='Loction-1' />\n\n        <div className={classes.itemText}>\n          {parts.map((part, index) => (\n            <span\n              key={index}\n              className={part.highlight ? classes.textHighlight : ''}\n            >\n              {part.text}\n            </span>\n          ))}\n\n          <br />\n\n          <span className={classes.itemSecondaryText}>\n            {option.structured_formatting &&\n              option.structured_formatting.secondary_text}\n          </span>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <StyledAutocomplete\n      freeSolo\n      disabled={disabled || !apiLoaded}\n      options={options}\n      renderInput={renderInput}\n      popupIcon={null}\n      closeIcon={<SFIcon icon='Close' size='16' />}\n      value={selectedOption}\n      inputValue={value.text}\n      onChange={onAutocompleteChange}\n      onInputChange={onInputChange}\n      getOptionLabel={getOptionLabel}\n      renderOption={renderOption}\n    />\n  );\n};\n","import * as React from 'react';\nimport { CircularProgress, CircularProgressProps } from '@material-ui/core';\n\nexport interface SFSpinnerProps extends CircularProgressProps {}\n\nexport const SFSpinner = ({\n  ...props\n}: SFSpinnerProps): React.ReactElement<SFSpinnerProps> => {\n  return (\n    <CircularProgress {...props} color='primary' variant='indeterminate' />\n  );\n};\n","import * as React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper, { PaperProps } from '@material-ui/core/Paper';\n\nconst StyledPaper = withStyles({\n  root: {\n    borderRadius: 0,\n    height: '100%'\n  }\n})(Paper);\n\nexport interface SFPaperProps extends PaperProps {}\n\nexport const SFPaper = ({\n  elevation = 0,\n  ...props\n}: SFPaperProps): React.ReactElement<SFPaperProps> => {\n  return <StyledPaper elevation={elevation} {...props} />;\n};\n","import * as React from 'react';\nimport { useTheme, Theme, withStyles } from '@material-ui/core/styles';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { SFIcon, SFIconRotation } from '../SFIcon/SFIcon';\nimport IconButton, { IconButtonProps } from '@material-ui/core/IconButton';\n\ntype SFSize = 'tiny' | 'small' | 'medium' | 'large';\n\ninterface IconButtonInnerProps {\n  padding?: string;\n  size?: string;\n  width?: string;\n  height?: string;\n}\n\nconst StyledIconButton = withStyles((theme: Theme) => ({\n  root: {\n    '&:hover': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 204, 204, 0.3)'\n          : 'rgba(128, 128, 128, 0.3)'\n      }`\n    },\n    '&:active': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 204, 204, 0.5)'\n          : 'rgba(128, 128, 128, 0.2)'\n      }`\n    }\n  }\n}))(IconButton);\n\nconst getIconButtonInnerProps = (size?: SFSize): IconButtonInnerProps => {\n  const result: IconButtonInnerProps = {};\n  switch (size) {\n    case 'tiny':\n      result.padding = '5px';\n      result.size = '10';\n      result.height = '20px';\n      result.width = '20px';\n      break;\n    case 'small':\n      result.padding = '9px';\n      result.size = '16';\n      result.height = '34px';\n      result.width = '34px';\n      break;\n    case 'large':\n      result.padding = '14px';\n      result.size = '26';\n      result.height = '54px';\n      result.width = '54px';\n      break;\n    default:\n      result.padding = '11px';\n      result.size = '20';\n      result.height = '42px';\n      result.width = '42px';\n      break;\n  }\n  return result;\n};\n\nexport interface SFIconButtonProps extends IconButtonProps {\n  sfColor?: string | undefined;\n  sfSize: SFSize;\n  sfIcon: string;\n  rotate?: SFIconRotation;\n}\n\nexport const SFIconButton = ({\n  sfColor,\n  sfSize = 'medium',\n  sfIcon = 'Bell',\n  rotate = 'none',\n  ...props\n}: SFIconButtonProps): React.ReactElement<SFIconButtonProps> => {\n  const theme: Theme = useTheme();\n  const isThemeLight: boolean = theme.palette.type === 'light';\n  const iconDefaultColor: string = isThemeLight ? SFGrey[600] : SFGrey[400];\n  const disabledColor: string = isThemeLight ? SFGrey[200] : SFGrey[700];\n  const colorPicked: string = sfColor || iconDefaultColor;\n  const iconButtonInnerProps: IconButtonInnerProps = getIconButtonInnerProps(\n    sfSize\n  );\n\n  return (\n    <StyledIconButton\n      {...props}\n      disableRipple\n      style={{\n        padding: iconButtonInnerProps.padding,\n        height: iconButtonInnerProps.height,\n        width: iconButtonInnerProps.width\n      }}\n    >\n      <SFIcon\n        icon={sfIcon}\n        size={iconButtonInnerProps.size}\n        color={props.disabled ? disabledColor : colorPicked}\n        rotate={rotate}\n      />\n    </StyledIconButton>\n  );\n};\n","import * as React from 'react';\n\nimport { SFSpinner } from '../SFSpinner/SFSpinner';\nimport { SFPaper } from '../SFPaper/SFPaper';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { SFGrey } from '../../SFColors/SFColors';\n\nconst cardStyles = makeStyles({\n  root: {\n    position: 'relative',\n    padding: '30px',\n    borderRadius: '2px',\n    '& .loader': {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexDirection: 'column',\n      '&.top': {\n        flexDirection: 'row',\n        '& p': {\n          margin: '0px 15px'\n        }\n      }\n    }\n  }\n});\n\nconst usePaperStyles = makeStyles({\n  root: {\n    border: `1px solid ${SFGrey[100]}`,\n    borderRadius: '2px'\n  }\n});\n\nexport type sfElevations = 0 | 1 | 2 | 3 | 4 | 6 | 8 | 9 | 12 | 16 | 24;\n\nexport interface SFCardProps {\n  sfElevation?: sfElevations;\n  className?: string;\n  isLoading?: boolean;\n  loadingAtTop?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const SFCard = ({\n  sfElevation = 0,\n  className = '',\n  isLoading = false,\n  loadingAtTop = false,\n  children\n}: SFCardProps): React.ReactElement<SFCardProps> => {\n  const externalClass: string = className || '';\n  const customCardStyles: Record<'root', string> = cardStyles();\n  const styledPaper: Record<'root', string> = usePaperStyles();\n\n  return (\n    <SFPaper\n      elevation={sfElevation}\n      classes={sfElevation === 0 ? styledPaper : undefined}\n    >\n      <div className={`${customCardStyles.root} ${externalClass} `}>\n        {isLoading === true ? (\n          <div\n            className={`loader ${loadingAtTop === true ? 'top' : undefined}`}\n          >\n            <SFSpinner />\n            <p>Loading...</p>\n          </div>\n        ) : (\n          children\n        )}\n      </div>\n    </SFPaper>\n  );\n};\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport Chip, { ChipProps } from '@material-ui/core/Chip';\nimport { SFBlue, SFGrey, SFSurfaceLight } from '../../SFColors/SFColors';\nimport { SFIconButton } from '../SFIconButton/SFIconButton';\nimport { hexToRgba } from '../../Helpers';\n\nconst StyledChip = withStyles((theme: Theme) => ({\n  root: {\n    fontWeight: 400,\n    fontSize: '13px',\n\n    '&:not(.Mui-disabled)': {\n      '&.primary': {\n        backgroundColor:\n          theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200],\n        color: theme.palette.type === 'light' ? SFSurfaceLight : SFGrey[900],\n\n        '&.MuiChip-deletable': {\n          '& .MuiChip-deleteIcon': {\n            color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200],\n\n            '& .MuiIconButton-label': {\n              '& svg': {\n                '& path': {\n                  fill: `${\n                    theme.palette.type === 'light'\n                      ? SFSurfaceLight\n                      : SFGrey[900]\n                  } !important`\n                }\n              }\n            },\n\n            '&:hover, &:active': {\n              backgroundColor:\n                theme.palette.type === 'light'\n                  ? hexToRgba(SFGrey[200], 0.3)\n                  : hexToRgba(SFGrey[500], 0.3)\n            }\n          },\n\n          '&:active': {\n            backgroundColor:\n              theme.palette.type === 'light' ? SFBlue[700] : SFBlue[300]\n          }\n        },\n\n        '&.MuiChip-outlined': {\n          backgroundColor: 'transparent',\n          border: `1px solid ${\n            theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n          }`,\n          color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200],\n\n          '&.MuiChip-deletable': {\n            '& .MuiChip-deleteIcon': {\n              color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200],\n\n              '& .MuiIconButton-label': {\n                '& svg': {\n                  '& path': {\n                    fill: `${\n                      theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n                    } !important`\n                  }\n                }\n              }\n            },\n\n            '&:active': {\n              backgroundColor:\n                theme.palette.type === 'light'\n                  ? hexToRgba(SFBlue[100], 0.4)\n                  : hexToRgba(SFBlue[200], 0.2)\n            }\n          }\n        }\n      },\n\n      '&.default': {\n        backgroundColor:\n          theme.palette.type === 'light' ? SFGrey[100] : SFGrey[500],\n        color: theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50],\n\n        '&.MuiChip-deletable': {\n          '& .MuiChip-deleteIcon': {\n            color: theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n          },\n\n          '&:hover, &:active': {\n            backgroundColor:\n              theme.palette.type === 'light'\n                ? hexToRgba(SFGrey[500], 0.2)\n                : hexToRgba(SFGrey[200], 0.3)\n          },\n\n          '& .MuiIconButton-label': {\n            '& svg': {\n              '& path': {\n                fill: `${\n                  theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n                } !important`\n              }\n            }\n          },\n\n          '&:active': {\n            backgroundColor:\n              theme.palette.type === 'light' ? SFGrey[200] : SFGrey[600]\n          }\n        },\n\n        '&.MuiChip-outlined': {\n          backgroundColor: 'transparent',\n          border: `1px solid ${\n            theme.palette.type === 'light' ? SFGrey[400] : SFGrey[500]\n          }`,\n\n          '&.MuiChip-deletable': {\n            '&:active': {\n              backgroundColor:\n                theme.palette.type === 'light'\n                  ? hexToRgba(SFGrey[200], 0.3)\n                  : hexToRgba(SFGrey[500], 0.3)\n            }\n          }\n        }\n      }\n    },\n\n    '&.Mui-disabled': {\n      backgroundColor:\n        theme.palette.type === 'light' ? SFGrey[100] : SFGrey[800],\n      color: theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600],\n      opacity: 1,\n\n      '&.MuiChip-outlined': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n        } `,\n        color: `${theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600]} `,\n        backgroundColor: 'transparent'\n      },\n\n      '&.MuiChip-deletable': {\n        '& .MuiChip-deleteIcon': {\n          '& .MuiIconButton-label': {\n            '& svg': {\n              '& path': {\n                fill: `${\n                  theme.palette.type === 'light' ? SFGrey[400] : SFGrey[600]\n                } !important`\n              }\n            }\n          }\n        }\n      }\n    },\n\n    '&.fullWidth': {\n      display: 'flex',\n      justifyContent: 'space-between',\n      width: '100%'\n    }\n  },\n  label: {\n    lineHeight: '24px'\n  },\n  labelSmall: {\n    lineHeight: '20px'\n  }\n}))(Chip);\n\nexport interface SFChipProps extends ChipProps {\n  sfColor: 'primary' | 'default';\n  deleteable?: boolean;\n  fullWidth?: boolean;\n}\n\nexport const SFChip = ({\n  sfColor = 'primary',\n  size = 'medium',\n  label,\n  disabled,\n  deleteable,\n  variant = 'default',\n  fullWidth,\n  onDelete,\n  ...props\n}: SFChipProps): React.ReactElement<SFChipProps> => {\n  return (\n    <FormControl fullWidth={fullWidth}>\n      <StyledChip\n        {...props}\n        className={`${sfColor} ${fullWidth ? 'fullWidth' : ''}`}\n        label={label}\n        size={size}\n        variant={variant}\n        disabled={disabled}\n        deleteIcon={<SFIconButton sfIcon='Close' sfSize='tiny' />}\n        onDelete={deleteable ? onDelete : undefined}\n      />\n    </FormControl>\n  );\n};\n","import React from 'react';\nimport { SFAlert } from '../../SFAlert/SFAlert';\nimport { SFTextField } from '../../SFTextField/SFTextField';\nimport { ChipFieldValueType } from '../SFChipsListField';\n\nexport interface SFChipListModalProps {\n  value: ChipFieldValueType | undefined;\n  open: boolean;\n  onEdit: (\n    prevoiusValue: ChipFieldValueType,\n    value: ChipFieldValueType\n  ) => void;\n  onClose: () => void;\n}\n\nexport const SFChipListModal = ({\n  value,\n  open,\n  onEdit,\n  onClose\n}: SFChipListModalProps): React.ReactElement<SFChipListModalProps> => {\n  const [editedValue, setEditedValue] = React.useState<string>(\n    value?.value || ''\n  );\n\n  const onInputChange = (input: React.ChangeEvent<HTMLInputElement>): void => {\n    setEditedValue(input.target.value);\n  };\n\n  const onFinishEdition = (): void => {\n    onEdit(value as ChipFieldValueType, {\n      value: editedValue,\n      isNew: value?.isNew,\n      hasChanged: true\n    });\n    onClose();\n  };\n\n  React.useEffect(() => {\n    setEditedValue(value ? value.value : '');\n  }, [value]);\n\n  return (\n    <SFAlert\n      title='Edit item'\n      rightAction={{\n        label: 'Done',\n        buttonProps: {\n          disabled: value?.value === editedValue,\n          onClick: (): void => onFinishEdition()\n        }\n      }}\n      leftAction={{\n        label: 'Cancel',\n        buttonProps: {\n          onClick: (): void => onClose()\n        }\n      }}\n      open={open}\n      content='To edit this item, please enter the new one here.'\n    >\n      <SFTextField\n        label='Item'\n        value={editedValue}\n        onChange={(input: React.ChangeEvent<HTMLInputElement>): void =>\n          onInputChange(input)\n        }\n      />\n    </SFAlert>\n  );\n};\n","import React, { Fragment } from 'react';\nimport { ChipFieldValueType } from '../SFChipsListField';\nimport { SFChip } from '../../SFChip/SFChip';\n\nexport interface SFChipListRenderProps {\n  values: ChipFieldValueType[];\n  isChipFullWidth: boolean;\n  chipSize: 'small' | 'medium';\n  disabled: boolean;\n  onDelete: (input: ChipFieldValueType) => void;\n  onEdit: (value: ChipFieldValueType) => void;\n}\n\nexport const SFChipListRender = ({\n  values,\n  isChipFullWidth,\n  chipSize,\n  disabled,\n  onDelete,\n  onEdit\n}: SFChipListRenderProps): React.ReactElement<SFChipListRenderProps> => {\n  return (\n    <Fragment>\n      {values.map((input: ChipFieldValueType, index: number) => (\n        <SFChip\n          key={`${input.value}-${index}`}\n          fullWidth={isChipFullWidth}\n          deleteable\n          clickable\n          sfColor='default'\n          variant='outlined'\n          size={input.isNew ? 'small' : chipSize}\n          label={input.value}\n          disabled={disabled}\n          onDelete={(): void => onDelete(input)}\n          onClick={(): void => {\n            onEdit({\n              value: input.value,\n              isNew: input.isNew ? input.isNew : false\n            });\n          }}\n        />\n      ))}\n    </Fragment>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport {\n  Autocomplete,\n  AutocompleteRenderInputParams,\n  AutocompleteInputChangeReason,\n  AutocompleteChangeReason\n} from '@material-ui/lab';\nimport { SFTextField } from '../SFTextField/SFTextField';\nimport { SFChipListModal } from './SFChipFieldModal/SFChipFieldModal';\nimport { SFChipListRender } from './SFChipFieldRender/SFChipFieldRender';\nimport { hexToRgba } from '../../Helpers';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { withStyles, Theme, makeStyles } from '@material-ui/core/styles';\n\nconst StyledAutoComplete = withStyles((theme: Theme) => ({\n  root: {\n    '& .MuiAutocomplete-endAdornment': {\n      display: 'none'\n    }\n  },\n  listbox: {\n    padding: '13px 0'\n  },\n  paper: {\n    marginLeft: '4px',\n    marginRight: '-4px'\n  },\n  option: {\n    padding: '6px 24px',\n\n    '&[data-focus=\"true\"]': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.3)\n          : hexToRgba(SFGrey[500] as string, 0.3),\n      '&:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey.A100 as string, 0.5)\n            : hexToRgba(SFGrey[500] as string, 0.5)\n      }\n    },\n\n    '&[aria-selected=\"true\"]': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.5)\n          : hexToRgba(SFGrey[500] as string, 0.5)\n    }\n  }\n}))(Autocomplete);\n\nconst StyledTextField = withStyles({\n  root: {\n    '& .MuiInputBase-root': {\n      height: 'inherit',\n      minHeight: '56px',\n      gap: '6px'\n    }\n  }\n})(SFTextField);\n\nconst chipsDisplay = makeStyles({\n  chipDisplayInline: {\n    display: 'flex',\n    gap: '8px',\n    marginTop: '14px',\n    flexWrap: 'wrap',\n    flexDirection: 'row'\n  },\n  chipDisplayBlock: {\n    display: 'flex',\n    gap: '8px',\n    marginTop: '14px',\n    flexWrap: 'wrap',\n    flexDirection: 'column'\n  }\n});\n\nexport type ChipFieldValueType = {\n  value: string;\n  isNew?: boolean;\n  hasChanged?: boolean;\n};\n\nexport interface SFChipsListFieldProps {\n  chipSize?: 'small' | 'medium';\n  chipDisplay?: 'inline' | 'block';\n  emptyMessage?: string;\n  label: string;\n  options?: string[];\n  items?: ChipFieldValueType[];\n  delimiter?: ',' | ';';\n  freeSolo?: boolean;\n  disabled?: boolean;\n  onChange: (newItems: ChipFieldValueType[]) => void;\n}\n\nexport const SFChipsListField = ({\n  chipSize = 'small',\n  chipDisplay = 'inline',\n  emptyMessage,\n  label,\n  options = [],\n  items = [],\n  delimiter = undefined,\n  freeSolo = false,\n  disabled = false,\n  onChange\n}: SFChipsListFieldProps): React.ReactElement<SFChipsListFieldProps> => {\n  const [isPopperOpen, setIsPopperOpen] = React.useState<boolean>(false);\n  const [isModalOpen, setIsModalOpen] = React.useState<boolean>(false);\n  const [editedValue, setEditedValue] = React.useState<ChipFieldValueType>();\n  const [inputValue, setInputValue] = React.useState<string>('');\n  const { chipDisplayInline, chipDisplayBlock } = chipsDisplay();\n\n  const savedValues: ChipFieldValueType[] = items.filter(\n    (item: ChipFieldValueType) => item.isNew !== true\n  );\n\n  const inputValues: ChipFieldValueType[] = items.filter(\n    (item: ChipFieldValueType) => item.isNew === true\n  );\n\n  const isValueInOptions = (value: string): string | undefined => {\n    return options\n      .filter(\n        (option: string) =>\n          !items.find((item: ChipFieldValueType) => item.value === option)\n      )\n      .find((option) => option.toLowerCase() === value.toLowerCase());\n  };\n\n  const addValue = (input: ChipFieldValueType[]): void => {\n    const values: ChipFieldValueType[] = [...items, ...input];\n    onChange(values);\n  };\n\n  const editValue = (\n    previousInput: ChipFieldValueType,\n    input: ChipFieldValueType\n  ): void => {\n    const index: number = items.findIndex(\n      (item) => item.value === previousInput.value\n    );\n    const values: ChipFieldValueType[] = [\n      ...items.slice(0, index),\n      input,\n      ...items.slice(index + 1)\n    ];\n    onChange(values);\n  };\n\n  const deleteValue = (input: ChipFieldValueType): void => {\n    const index: number = items.indexOf(input);\n    const values: ChipFieldValueType[] = [\n      ...items.slice(0, index),\n      ...items.slice(index + 1)\n    ];\n    onChange(values);\n  };\n\n  const onEdit = (value: ChipFieldValueType): void => {\n    if (options.length === 0 || freeSolo === true) {\n      setEditedValue(value);\n      setIsModalOpen(true);\n    }\n  };\n\n  const filteredOptions = (options: string[]): string[] => {\n    if (savedValues.length !== 0) {\n      return options.filter(\n        (option: string) =>\n          !savedValues.find((item: ChipFieldValueType) => item.value === option)\n      );\n    } else {\n      return options;\n    }\n  };\n\n  const onInputChange = (\n    _event: ChangeEvent,\n    value: string,\n    reason: AutocompleteInputChangeReason\n  ): void => {\n    if (reason === 'reset') {\n      if (inputValue !== '') {\n        setInputValue(inputValue);\n      } else {\n        setIsPopperOpen(false);\n      }\n    } else {\n      setInputValue(value);\n      setIsPopperOpen(true);\n      if ((_event.nativeEvent as InputEvent).inputType === 'insertLineBreak') {\n        _event.preventDefault();\n        let insertedValues: string[] = [];\n        if (delimiter) {\n          insertedValues = value.replace(/\\n/g, '').split(`${delimiter}`);\n        } else {\n          insertedValues = [value.replace(/\\n/g, '')];\n        }\n\n        let valuesToAdd: ChipFieldValueType[] = [];\n        insertedValues.forEach((insertedValue: string) => {\n          if (insertedValue.trim() !== '') {\n            if (options.length === 0) {\n              valuesToAdd = [\n                ...valuesToAdd,\n                { value: insertedValue.trim(), isNew: true }\n              ];\n            } else {\n              const valueOption = isValueInOptions(insertedValue.trim());\n              if (valueOption) {\n                valuesToAdd = [\n                  ...valuesToAdd,\n                  { value: valueOption, isNew: true }\n                ];\n              }\n            }\n          }\n        });\n        addValue(valuesToAdd);\n        setInputValue('');\n      }\n    }\n  };\n\n  const onAutoCompleteChange = (\n    _event: ChangeEvent,\n    value: string,\n    reason: AutocompleteChangeReason\n  ): void => {\n    if (reason === 'select-option' || reason === 'create-option') {\n      if (typeof value[value.length - 1] === 'string') {\n        const currentValue: string = value[value.length - 1];\n        const values: string[] = delimiter\n          ? currentValue.split(`${delimiter}`)\n          : [currentValue];\n        let currentValues: ChipFieldValueType[] = [];\n        values.forEach((value: string) => {\n          if (value.trim() !== '') {\n            const matchValue: string | undefined = options.find(\n              (option) => option.toLowerCase() === value.trim().toLowerCase()\n            );\n            if (matchValue) {\n              if (items.findIndex((item) => item.value === matchValue) === -1) {\n                currentValues = [\n                  ...currentValues,\n                  { value: matchValue, isNew: true }\n                ];\n              }\n            } else {\n              currentValues = [\n                ...currentValues,\n                { value: value.trim(), isNew: true }\n              ];\n            }\n          }\n        });\n        addValue(currentValues);\n      }\n      setIsPopperOpen(false);\n      setInputValue('');\n    }\n  };\n\n  const DisplayValues = (): JSX.Element => {\n    return (\n      <div\n        className={` ${\n          chipDisplay === 'block' ? chipDisplayBlock : chipDisplayInline\n        }`}\n      >\n        {savedValues.length !== 0 && (\n          <SFChipListRender\n            values={savedValues}\n            isChipFullWidth={chipDisplay === 'block'}\n            chipSize={chipSize}\n            disabled={disabled}\n            onDelete={deleteValue}\n            onEdit={onEdit}\n          />\n        )}\n        {emptyMessage && (!savedValues || savedValues.length === 0) && (\n          <p>{emptyMessage}</p>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <FormControl fullWidth>\n      <SFChipListModal\n        value={editedValue}\n        open={isModalOpen}\n        onEdit={editValue}\n        onClose={(): void => setIsModalOpen(false)}\n      />\n      <StyledAutoComplete\n        disabled={disabled}\n        options={filteredOptions(options)}\n        multiple\n        value={inputValues}\n        inputValue={inputValue}\n        onChange={onAutoCompleteChange}\n        onInputChange={onInputChange}\n        open={options.length !== 0 ? isPopperOpen : false}\n        onClose={(): void => setIsPopperOpen(false)}\n        filterSelectedOptions\n        freeSolo={freeSolo}\n        getOptionSelected={(\n          option: string,\n          value: ChipFieldValueType\n        ): boolean => option === value.value}\n        renderTags={(value: ChipFieldValueType[]): JSX.Element => (\n          <SFChipListRender\n            isChipFullWidth={false}\n            chipSize='small'\n            values={value}\n            disabled={disabled}\n            onDelete={deleteValue}\n            onEdit={onEdit}\n          />\n        )}\n        renderInput={(params: AutocompleteRenderInputParams): JSX.Element => (\n          <StyledTextField {...params} multiline rows={1} label={label} />\n        )}\n      />\n      <DisplayValues />\n    </FormControl>\n  );\n};\n","import * as React from 'react';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport FormControlLabel, {\n  FormControlLabelProps\n} from '@material-ui/core/FormControlLabel';\nimport { SFGrey } from '../../SFColors/SFColors';\n\nconst StyledFromControlLabel = withStyles((theme: Theme) => ({\n  root: {\n    color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`,\n    '&.Mui-disabled': {\n      color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`\n    }\n  },\n  label: {\n    lineHeight: ' 24px'\n  }\n}))(FormControlLabel);\n\nexport interface SFFormControlLabelProps extends FormControlLabelProps {}\n\nexport const SFFormControlLabel = (\n  props: SFFormControlLabelProps\n): React.ReactElement<SFFormControlLabelProps> => {\n  return <StyledFromControlLabel {...props} />;\n};\n","import * as React from 'react';\nimport { withStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { SFFormControlLabel } from '../SFFormControlLabel/SFFormControlLabel';\nimport { SFIcon } from '../SFIcon/SFIcon';\n\nconst StyledCheckbox = withStyles((theme: Theme) => ({\n  root: {\n    padding: '12px',\n    color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`\n  },\n  colorPrimary: {\n    '&:hover': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 204, 204, 0.3)'\n          : 'rgba(128, 128, 128, 0.3)'\n      }`\n    },\n    '&:active': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 204, 204, 0.5)'\n          : 'rgba(128, 128, 128, 0.2)'\n      }`\n    },\n    '&.Mui-checked:hover': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 235, 255, 0.4)'\n          : 'rgba(128, 198, 255, 0.2)'\n      }`\n    },\n    '&.Mui-checked:active': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 235, 255, 0.6)'\n          : 'rgba(128, 198, 255, 0.1)'\n      }`\n    },\n    '&.Mui-disabled': {\n      color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n    }\n  }\n}))(Checkbox);\n\nconst getIconUncheckedColor = (\n  theme: Theme,\n  disabled: boolean | undefined\n): string => {\n  if (disabled) {\n    return theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700];\n  }\n  return theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400];\n};\n\nconst getIconCheckedColor = (\n  theme: Theme,\n  disabled: boolean | undefined\n): string => {\n  if (disabled) {\n    return theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700];\n  }\n  return theme.palette.primary.main;\n};\n\nexport interface SFCheckboxProps extends CheckboxProps {\n  label?: string;\n}\n\nexport const SFCheckbox = ({\n  disableRipple = true,\n  label,\n  ...props\n}: SFCheckboxProps): React.ReactElement<SFCheckboxProps> => {\n  const theme: Theme = useTheme();\n  const iconCheckedColor: string = getIconCheckedColor(theme, props.disabled);\n  const iconUncheckedColor: string = getIconUncheckedColor(\n    theme,\n    props.disabled\n  );\n\n  return (\n    <FormControl>\n      <SFFormControlLabel\n        control={\n          <StyledCheckbox\n            {...props}\n            color='primary'\n            disableRipple={disableRipple}\n            icon={\n              <SFIcon\n                icon='Checkbox-Unselected'\n                size={18}\n                color={iconUncheckedColor}\n              />\n            }\n            checkedIcon={\n              <SFIcon\n                icon='Checkbox-Selected'\n                size={18}\n                color={iconCheckedColor}\n              />\n            }\n          />\n        }\n        label={label}\n      />\n    </FormControl>\n  );\n};\n","import * as React from 'react';\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  withStyles\n} from '@material-ui/core/styles';\nimport MomentUtils from '@date-io/moment';\nimport { SFBlue, SFGrey, SFRed } from '../../SFColors/SFColors';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n  KeyboardDatePickerProps\n} from '@material-ui/pickers';\nimport { hexToRgba } from '../../Helpers';\n\nconst useButtonBackgrounds = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: `${\n        theme.palette.type !== 'light' ? SFGrey[800] : undefined\n      }`\n    }\n  })\n);\n\nconst usePopOverStyle = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      marginTop: '3px',\n      marginLeft: '-2px',\n      backgroundColor: `${\n        theme.palette.type !== 'light' ? SFGrey[800] : undefined\n      }`\n    }\n  })\n);\n\nconst StyledDatePicker = withStyles((theme: Theme) => ({\n  root: {\n    boxSizing: 'border-box',\n\n    '&.openCalendarStyle': {\n      '& .MuiFilledInput-root': {\n        border: `2px solid ${\n          theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        }`,\n\n        '& .MuiFilledInput-input': {\n          padding: '26px 10px 7px'\n        }\n      },\n      '& .MuiFilledInput-adornedEnd': {\n        paddingRight: '11px'\n      },\n      '& .MuiInputLabel-filled': {\n        '&.MuiInputLabel-shrink': {\n          color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        }\n      }\n    },\n\n    '& .MuiFilledInput-root': {\n      height: '56px',\n      backgroundColor: theme.palette.background.paper,\n      border: `1px solid ${\n        theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n      }`,\n      borderRadius: 2,\n      boxSizing: 'border-box',\n\n      '&:before': {\n        content: `none !important`\n      },\n\n      '&:after': {\n        content: `none !important`\n      },\n\n      '&:hover': {\n        borderColor: `${\n          theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n        }`\n      },\n\n      '&.Mui-focused': {\n        border: `2px solid ${\n          theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        }`,\n\n        '& .MuiFilledInput-input': {\n          padding: '26px 10px 7px'\n        },\n        '& .MuiInputAdornment-root': {\n          marginRight: '-1px'\n        }\n      },\n\n      '&.Mui-error': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n        } !important`,\n\n        '& .MuiFilledInput-input': {\n          padding: '26px 11px 7px !important'\n        },\n\n        '&.MuiFilledInput-adornedEnd': {\n          paddingRight: '12px !important'\n        }\n      },\n\n      '&.Mui-disabled': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n        }`,\n\n        '& .MuiFilledInput-input': {\n          padding: '26px 11px 7px !important'\n        },\n\n        '&.MuiFilledInput-adornedEnd': {\n          paddingRight: '12px !important'\n        }\n      },\n\n      '& .MuiFilledInput-input': {\n        fontWeight: 400,\n        fontSize: '16px',\n        padding: '26px 11px 7px',\n\n        '&.Mui-disabled': {\n          color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n        },\n\n        '&.MuiFilledInput-adornedEnd': {\n          paddingRight: '12px'\n        }\n      },\n\n      '& .MuiIconButton-root': {\n        '&:hover': {\n          backgroundColor: `${\n            theme.palette.type === 'light'\n              ? hexToRgba(SFGrey[200], 0.3)\n              : hexToRgba(SFGrey[500], 0.3)\n          }`\n        },\n\n        '&:active': {\n          backgroundColor: `${\n            theme.palette.type === 'light'\n              ? hexToRgba(SFGrey[200], 0.5)\n              : hexToRgba(SFGrey[500], 0.2)\n          }`\n        }\n      }\n    },\n\n    '& .MuiInputLabel-filled': {\n      fontSize: '16px',\n      lineHeight: '24px',\n      color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`,\n\n      '&.MuiInputLabel-shrink': {\n        fontSize: '14px',\n        lineHeight: '20px',\n        transform: `translate(12px, 6px)`,\n\n        '&.Mui-focused': {\n          color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        }\n      },\n\n      '&.Mui-error': {\n        color: `${theme.palette.type === 'light' ? SFRed[700] : SFRed[200]}`\n      },\n\n      '&.Mui-disabled': {\n        color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n      }\n    },\n\n    '& .MuiFormHelperText-root': {\n      backgroundColor: 'transparent',\n\n      '&.Mui-error': {\n        color: `${theme.palette.type === 'light' ? SFRed[700] : SFRed[200]}`\n      }\n    }\n  }\n}))(KeyboardDatePicker);\n\nexport interface SFDatePickerProps extends KeyboardDatePickerProps {}\n\nexport const SFDatePicker = ({\n  value = null,\n  label,\n  ...props\n}: SFDatePickerProps): React.ReactElement<KeyboardDatePickerProps> => {\n  const popOverStyle: Record<'paper', string> = usePopOverStyle();\n  const arrowStyle: Record<'root', string> = useButtonBackgrounds();\n  const [openCalendarStyle, setOpenCalendarStyle] = React.useState<boolean>(\n    false\n  );\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <StyledDatePicker\n        {...props}\n        fullWidth\n        disableToolbar\n        className={openCalendarStyle ? 'openCalendarStyle' : ''}\n        value={value}\n        variant='inline'\n        inputVariant='filled'\n        format='MM/DD/YYYY'\n        label={label}\n        onOpen={(): void => {\n          setOpenCalendarStyle(true);\n        }}\n        onClose={(): void => {\n          setOpenCalendarStyle(false);\n        }}\n        PopoverProps={{\n          classes: popOverStyle,\n          anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n          transformOrigin: { vertical: 'top', horizontal: 'left' }\n        }}\n        rightArrowButtonProps={{ classes: arrowStyle }}\n        rightArrowIcon={<SFIcon icon='Right-2' size='10' />}\n        leftArrowButtonProps={{ classes: arrowStyle }}\n        leftArrowIcon={<SFIcon icon='Left-2' size='10' />}\n        keyboardIcon={<SFIcon icon='Callendar' size='24' />}\n      />\n    </MuiPickersUtilsProvider>\n  );\n};\n","import { Drawer, DrawerProps } from '@material-ui/core';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { hexToRgba } from '../../Helpers';\n\nexport interface SFDrawerProps extends DrawerProps {}\n\nexport const SFDrawer = withStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: `${\n      theme.palette.type === 'light'\n        ? 'rgba(0, 0, 0, 0.3)'\n        : hexToRgba(SFGrey.A400 as string, 0.8)\n    }`\n  }\n}))(Drawer);\n","import * as React from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport Link, { LinkProps } from '@material-ui/core/Link';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\n\ntype SFSize = 'small' | 'medium';\nconst StyledLink = withStyles((theme: Theme) => ({\n  root: {\n    '&.MuiTypography-colorInherit': {\n      color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`\n    },\n    '&.MuiLink-root': {\n      cursor: 'pointer'\n    }\n  }\n}))(Link);\n\nconst getSizeStyle = (size?: SFSize): CSSProperties => {\n  switch (size) {\n    case 'small':\n      return {\n        fontSize: '14px',\n        lineHeight: '20px'\n      };\n    default:\n      return {\n        fontSize: '16px',\n        lineHeight: '24px'\n      };\n  }\n};\n\nexport interface SFLinkProps extends LinkProps {\n  sfSize: SFSize;\n}\n\nexport const SFLink = ({\n  sfSize = 'medium',\n  color,\n  ...props\n}: SFLinkProps): React.ReactElement<SFLinkProps> => {\n  const sfColor = color !== 'primary' ? 'inherit' : 'primary';\n  return <StyledLink {...props} style={getSizeStyle(sfSize)} color={sfColor} />;\n};\n","import { withStyles, Theme } from '@material-ui/core/styles';\nimport { MenuItem } from '@material-ui/core';\nimport { hexToRgba } from '../../Helpers';\nimport { SFGrey } from '../../SFColors/SFColors';\n\nexport const SFMenuItem = withStyles((theme: Theme) => ({\n  root: {\n    padding: '6px 24px',\n    height: 36,\n    '&:hover': {\n      background:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey[200], 0.3)\n          : hexToRgba(SFGrey[500], 0.3)\n    },\n    '&:active': {\n      background:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey[200], 0.5)\n          : hexToRgba(SFGrey[500], 0.2)\n    },\n    '&.Mui-selected': {\n      background:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey[200], 0.5)\n          : hexToRgba(SFGrey[500], 0.2),\n      '&:hover': {\n        background:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey[200], 0.3)\n            : hexToRgba(SFGrey[500], 0.3)\n      }\n    }\n  }\n}))(MenuItem);\n","import * as React from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport { SelectProps } from '@material-ui/core';\nimport { SFTextField } from '../SFTextField/SFTextField';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { SFCheckbox } from '../SFCheckbox/SFCheckbox';\nimport { SFMenuItem } from '../SFMenuItem/SFMenuItem';\nimport { SFMenuOption } from '../SFSelect/SFSelect';\n\nconst StyledSelect = withStyles(() => ({\n  root: {\n    '& svg': {\n      position: 'absolute',\n      right: 18,\n      pointerEvents: 'none',\n      top: 'auto'\n    }\n  }\n}))(SFTextField);\n\nconst StyledMenuItem = withStyles(() => ({\n  root: {\n    height: 52\n  }\n}))(SFMenuItem);\n\nconst useMenuStyles = makeStyles({\n  paper: {\n    marginTop: '8px'\n  }\n});\n\nexport interface SFMultiSelectProps extends SelectProps {\n  options: SFMenuOption[];\n  defaultValue?: string[];\n  value?: string[];\n  helperText?: React.ReactNode;\n}\n\nexport const SFMultiSelect = ({\n  options,\n  helperText,\n  label,\n  defaultValue,\n  value,\n  onChange,\n  ...props\n}: SFMultiSelectProps): React.ReactElement<SFMultiSelectProps> => {\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const menuClasses: Record<'paper', string> = useMenuStyles();\n\n  React.useEffect(() => {\n    const selectedValue = value || defaultValue;\n    setSelected(selectedValue || []);\n  }, [value, defaultValue]);\n\n  const handleChange = (\n    event: React.ChangeEvent<{\n      name?: string | undefined;\n      value: unknown;\n    }>,\n    child: React.ReactNode\n  ): void => {\n    if (!value) {\n      setSelected(event.target.value as string[]);\n    }\n\n    if (onChange) {\n      onChange(event, child);\n    }\n  };\n\n  const renderSelected = (selectedValues: string[]): string => {\n    return selectedValues ? selectedValues.join(', ') : '';\n  };\n\n  const isChecked = (\n    option: SFMenuOption,\n    selectedValues: string[]\n  ): boolean => {\n    return selectedValues && selectedValues.indexOf(option.value) > -1;\n  };\n\n  return (\n    <StyledSelect\n      select\n      fullWidth\n      label={label}\n      helperText={helperText}\n      error={props.error}\n      disabled={props.disabled}\n      SelectProps={{\n        ...props,\n        defaultValue,\n        multiple: true,\n        value: selected,\n        MenuProps: {\n          variant: 'menu',\n          autoFocus: false,\n          disableAutoFocusItem: true,\n          classes: menuClasses\n        },\n        onChange: handleChange,\n        renderValue: renderSelected,\n        IconComponent: (props): React.ReactElement => (\n          <SFIcon icon='Down-2' size='16' {...props} />\n        )\n      }}\n    >\n      {options.map((option) => (\n        <StyledMenuItem key={option.value} value={option.value}>\n          <SFCheckbox checked={isChecked(option, selected)} />\n          {option.label}\n        </StyledMenuItem>\n      ))}\n    </StyledSelect>\n  );\n};\n","import * as React from 'react';\nimport NumberFormat, { NumberFormatProps } from 'react-number-format';\nimport { SFTextField, SFTextFieldProps } from '../SFTextField/SFTextField';\n\ninterface NumberFormatCustomProps extends NumberFormatProps {\n  inputRef: (instance: NumberFormat | null) => void;\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  name: string;\n  allowDecimals: boolean;\n}\n\nfunction NumberFormatCustom(props: NumberFormatCustomProps): JSX.Element {\n  const { inputRef, onChange, allowDecimals, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      inputMode={allowDecimals ? 'decimal' : 'numeric'}\n      decimalScale={!allowDecimals ? 0 : props.decimalScale}\n      pattern={allowDecimals ? undefined : '[0-9]*'}\n      getInputRef={inputRef}\n      onValueChange={(values): void => {\n        onChange &&\n          onChange({\n            target: {\n              name: props.name || '',\n              value: values.value\n            }\n          });\n      }}\n    />\n  );\n}\n\nexport interface SFNumericFieldProps extends SFTextFieldProps {\n  numberFormatProps?: NumberFormatProps;\n  allowDecimals?: boolean;\n}\n\nexport const SFNumericField = ({\n  numberFormatProps,\n  allowDecimals = true,\n  ...props\n}: SFNumericFieldProps): React.ReactElement<SFNumericFieldProps> => {\n  return (\n    <SFTextField\n      {...props}\n      inputProps={{ ...numberFormatProps, allowDecimals }}\n      InputProps={{\n        inputComponent: NumberFormatCustom as any\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { SFDrawer, SFDrawerProps } from '../SFDrawer/SFDrawer';\nimport { SFButton, SFButtonProps } from '../SFButton/SFButton';\nimport { SFGrey } from '../../SFColors/SFColors';\n\nexport interface SFPanelAction {\n  label: string;\n  buttonProps?: SFButtonProps;\n}\n\nexport interface SFPanelProps extends SFDrawerProps {\n  title?: string;\n  maxWidth?: number;\n  leftAction?: SFPanelAction;\n  rightAction?: SFPanelAction;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      padding: '36px 36px 24px',\n      color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`,\n      fontSize: 24,\n      fontStyle: 'normal',\n      fontWeight: 500\n    },\n    content: {\n      maxWidth: (props: SFPanelProps): number | 'auto' =>\n        props.maxWidth || 'auto',\n      padding: '0 36px',\n      color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`,\n      fontSize: 16,\n      fontStyle: 'normal',\n      lineHeight: '24px'\n    },\n    actions: {\n      padding: '24px 36px 36px',\n      display: 'flex',\n      gap: '17px',\n      alignItems: 'center',\n      justifyContent: 'flex-end'\n    }\n  })\n);\n\nexport const SFPanel = ({\n  title,\n  leftAction,\n  rightAction,\n  children,\n  ...props\n}: SFPanelProps): React.ReactElement<SFPanelProps> => {\n  const classes = useStyles(props);\n\n  return (\n    <div>\n      <SFDrawer {...props}>\n        <div className={classes.title}>{title}</div>\n\n        <div className={classes.content}>{children}</div>\n\n        <div className={classes.actions}>\n          {leftAction && (\n            <SFButton sfColor='grey' variant='text' {...leftAction.buttonProps}>\n              {leftAction.label}\n            </SFButton>\n          )}\n\n          {rightAction && (\n            <SFButton sfColor='blue' {...rightAction.buttonProps}>\n              {rightAction.label}\n            </SFButton>\n          )}\n        </div>\n      </SFDrawer>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport Radio, { RadioProps } from '@material-ui/core/Radio';\nimport FormControl from '@material-ui/core/FormControl';\nimport { SFFormControlLabel } from '../../SFFormControlLabel/SFFormControlLabel';\nimport { SFGrey } from '../../../SFColors/SFColors';\n\nconst StyledRadio = withStyles((theme: Theme) => ({\n  root: {\n    color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`\n  },\n  colorPrimary: {\n    '&:hover': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 204, 204, 0.3)'\n          : 'rgba(128, 128, 128, 0.3)'\n      }`\n    },\n    '&:active': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 204, 204, 0.5)'\n          : 'rgba(128, 128, 128, 0.2)'\n      }`\n    },\n    '&.Mui-checked:hover': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 235, 255, 0.4)'\n          : 'rgba(128, 198, 255, 0.2)'\n      }`\n    },\n    '&.Mui-checked:active': {\n      backgroundColor: `${\n        theme.palette.type === 'light'\n          ? 'rgba(204, 235, 255, 0.6)'\n          : 'rgba(128, 198, 255, 0.1)'\n      }`\n    },\n    '&.Mui-disabled': {\n      color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n    }\n  }\n}))(Radio);\n\nexport interface SFRadioProps extends RadioProps {\n  label?: string;\n  isGroup?: boolean;\n}\n\nexport const SFRadio = ({\n  label,\n  isGroup = false,\n  ...props\n}: SFRadioProps): React.ReactElement<SFRadioProps> => {\n  if (isGroup) {\n    return <StyledRadio {...props} color='primary' disableRipple />;\n  }\n  return (\n    <FormControl>\n      <SFFormControlLabel\n        control={<StyledRadio {...props} color='primary' disableRipple />}\n        label={label}\n        disabled={props.disabled}\n      />\n    </FormControl>\n  );\n};\n","import * as React from 'react';\nimport RadioGroup, { RadioGroupProps } from '@material-ui/core/RadioGroup';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport { SFFormControlLabel } from '../SFFormControlLabel/SFFormControlLabel';\nimport { SFRadio } from './SFRadio/SFRadio';\n\nexport interface SFRadioOptionsProps {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\nexport interface SFRadioGroupProps extends RadioGroupProps {\n  label?: string;\n  color?: 'default' | 'primary' | 'secondary' | undefined;\n  options: SFRadioOptionsProps[];\n}\n\nconst StyledRadioGroup = withStyles({\n  root: {\n    '&.MuiFormGroup-row': {\n      gap: '20px'\n    }\n  }\n})(RadioGroup);\n\nexport const SFRadioGroup = ({\n  label,\n  options,\n  ...props\n}: SFRadioGroupProps): React.ReactElement<SFRadioGroupProps> => {\n  return (\n    <FormControl>\n      <label>{label}</label>\n      <StyledRadioGroup {...props} color='primary'>\n        {options.map((opt, i) => {\n          return (\n            <SFFormControlLabel\n              key={`${opt.value}${i}`}\n              value={opt.value}\n              control={<SFRadio isGroup />}\n              label={opt.label}\n              disabled={opt.disabled}\n            />\n          );\n        })}\n      </StyledRadioGroup>\n    </FormControl>\n  );\n};\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { SFGrey } from '../../SFColors/SFColors';\nimport { hexToRgba } from '../../Helpers';\n\nconst SCROLL_BOX_MIN_HEIGHT = 20;\nconst SCROLL_BOX_MIN_WIDTH = 20;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: '100%',\n      position: 'relative'\n    },\n    withHorizontalScroll: {\n      paddingBottom: 12\n    },\n    container: {\n      height: '100%',\n      overflow: 'auto',\n      scrollbarWidth: 'none',\n      msOverflowStyle: 'none',\n\n      '&::-webkit-scrollbar': {\n        display: 'none'\n      }\n    },\n    vScrollBar: {\n      height: '100%',\n      width: '9px',\n      position: 'absolute',\n      right: 3,\n      top: 0,\n      bottom: 0,\n      '@media print': {\n        display: 'none'\n      }\n    },\n    vScrollThumb: {\n      marginLeft: '3px',\n      width: '6px',\n      position: 'absolute',\n      borderRadius: '3px',\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.3)\n          : hexToRgba(SFGrey[500], 0.3)\n    },\n    hScrollBar: {\n      position: 'absolute',\n      width: '100%',\n      height: '9px',\n      left: 0,\n      right: 0,\n      bottom: 0,\n      '@media print': {\n        display: 'none'\n      }\n    },\n    hScrollThumb: {\n      height: '6px',\n      position: 'absolute',\n      borderRadius: '3px',\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey.A100 as string, 0.3)\n          : hexToRgba(SFGrey[500], 0.3)\n    }\n  })\n);\n\nconst hasScrollVertical = (elem: HTMLDivElement): boolean =>\n  elem.scrollHeight > elem.clientHeight;\n\nconst hasScrollHorizontal = (elem: HTMLDivElement): boolean =>\n  elem.scrollWidth > elem.clientWidth;\n\nexport interface SFScrollData {\n  host: HTMLDivElement;\n  verticalScroll: number;\n  horizontalScroll: number;\n}\n\nexport interface SFScrollableRefHandler {\n  scrollToTop: () => void;\n}\n\nexport interface SFScrollableProps {\n  className?: string;\n  containerClassName?: string;\n  children: React.ReactNode;\n  onScroll?: (data: SFScrollData) => void;\n}\n\nexport const SFScrollable = React.forwardRef(\n  (\n    { className, containerClassName, children, onScroll }: SFScrollableProps,\n    ref: React.Ref<SFScrollableRefHandler>\n  ) => {\n    const classes = useStyles();\n\n    const scrollHostRef: React.RefObject<HTMLDivElement> = React.useRef<HTMLDivElement>(\n      null\n    );\n\n    React.useImperativeHandle(ref, () => ({\n      scrollToTop() {\n        if (scrollHostRef.current) {\n          scrollHostRef.current.scrollTo(0, 0);\n        }\n      }\n    }));\n\n    const [\n      hasHorizontalScroll,\n      setHasHorizontalScroll\n    ] = React.useState<boolean>(false);\n\n    const [\n      verticalScrollHeight,\n      setVerticalScrollHeight\n    ] = React.useState<number>(SCROLL_BOX_MIN_HEIGHT);\n\n    const [\n      horizontalScrollWidth,\n      setHorizontalScrollWidth\n    ] = React.useState<number>(SCROLL_BOX_MIN_WIDTH);\n\n    const [verticalScrollTop, setVerticalScrollTop] = React.useState<number>(0);\n\n    const [\n      horizontalScrollLeft,\n      setHorizontalScrollLeft\n    ] = React.useState<number>(0);\n\n    const [showVerticalScroll, setShowVerticalScroll] = React.useState<boolean>(\n      false\n    );\n\n    const [\n      showHorizontalScroll,\n      setShowHorizontalScroll\n    ] = React.useState<boolean>(false);\n\n    const [isVerticalDragging, setIsVerticalDragging] = React.useState<boolean>(\n      false\n    );\n\n    const [\n      isHorizontalDragging,\n      setIsHorizontalDragging\n    ] = React.useState<boolean>(false);\n\n    const [lastVerticalPos, setLastVerticalPos] = React.useState<number>(0);\n    const [lastHorizontalPos, setLastHorizontalPos] = React.useState<number>(0);\n\n    const updateScrollbar = (elem: HTMLDivElement) => {\n      const { clientHeight, clientWidth, scrollHeight, scrollWidth } = elem;\n\n      if (hasScrollHorizontal(elem)) {\n        const scrollThumbWidth: number = Math.max(\n          (clientWidth / scrollWidth) * clientWidth,\n          SCROLL_BOX_MIN_WIDTH\n        );\n\n        setHasHorizontalScroll(true);\n        setHorizontalScrollWidth(scrollThumbWidth);\n        setHorizontalScrollLeft(0);\n      } else {\n        setHasHorizontalScroll(false);\n      }\n\n      if (hasScrollVertical(elem)) {\n        const scrollThumbHeight: number = Math.max(\n          (clientHeight / scrollHeight) * clientHeight,\n          SCROLL_BOX_MIN_HEIGHT\n        );\n\n        setVerticalScrollHeight(scrollThumbHeight);\n        setVerticalScrollTop(0);\n      }\n    };\n\n    React.useEffect(() => {\n      const elem: HTMLDivElement = scrollHostRef.current as HTMLDivElement;\n\n      const resizeObserver = new ResizeObserver(() => {\n        updateScrollbar(elem);\n      });\n\n      resizeObserver.observe(elem);\n\n      // cleanup\n      return () => {\n        resizeObserver.unobserve(elem);\n      };\n    }, []);\n\n    const onDocumentMouseMove = React.useCallback(\n      (e: MouseEvent) => {\n        if (scrollHostRef.current) {\n          if (isVerticalDragging) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            const {\n              scrollHeight,\n              offsetHeight,\n              offsetTop\n            } = scrollHostRef.current;\n            const deltaY = e.clientY - lastVerticalPos;\n            const percentage = deltaY * (scrollHeight / offsetHeight);\n\n            setLastVerticalPos(e.clientY);\n\n            setVerticalScrollTop(\n              Math.min(\n                Math.max(offsetTop, verticalScrollTop + deltaY),\n                offsetHeight - verticalScrollHeight + offsetTop\n              )\n            );\n\n            scrollHostRef.current.scrollTop = Math.min(\n              scrollHostRef.current.scrollTop + percentage,\n              scrollHeight - offsetHeight\n            );\n          } else if (isHorizontalDragging) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            const { scrollWidth, offsetWidth } = scrollHostRef.current;\n            const deltaX = e.clientX - lastHorizontalPos;\n            const percentage = deltaX * (scrollWidth / offsetWidth);\n\n            setLastHorizontalPos(e.clientX);\n            setHorizontalScrollLeft(\n              Math.min(\n                Math.max(0, horizontalScrollLeft + deltaX),\n                offsetWidth - horizontalScrollWidth\n              )\n            );\n\n            scrollHostRef.current.scrollLeft = Math.min(\n              scrollHostRef.current.scrollLeft + percentage,\n              scrollWidth - offsetWidth\n            );\n\n            if (onScroll) {\n              onScroll({\n                verticalScroll: verticalScrollTop,\n                horizontalScroll: horizontalScrollLeft,\n                host: scrollHostRef.current\n              });\n            }\n          }\n        }\n      },\n      [[isHorizontalDragging, isVerticalDragging]]\n    );\n\n    const onDocumentMouseUp = React.useCallback(\n      (e: MouseEvent) => {\n        if (isVerticalDragging) {\n          e.preventDefault();\n          setIsVerticalDragging(false);\n          setShowVerticalScroll(false);\n        } else if (isHorizontalDragging) {\n          e.preventDefault();\n          setIsHorizontalDragging(false);\n          setShowHorizontalScroll(false);\n        }\n      },\n      [[isHorizontalDragging, isVerticalDragging]]\n    );\n\n    React.useEffect(() => {\n      // handle scrollbar dragging\n      document.addEventListener('mousemove', onDocumentMouseMove);\n      document.addEventListener('mouseup', onDocumentMouseUp);\n      document.addEventListener('mouseleave', onDocumentMouseUp);\n\n      // cleanup\n      return () => {\n        document.removeEventListener('mousemove', onDocumentMouseMove);\n        document.removeEventListener('mouseup', onDocumentMouseUp);\n        document.removeEventListener('mouseleave', onDocumentMouseUp);\n      };\n    }, [onDocumentMouseMove, onDocumentMouseUp]);\n\n    React.useEffect(() => {\n      if (scrollHostRef.current) {\n        updateScrollbar(scrollHostRef.current as HTMLDivElement);\n      }\n    }, [children]);\n\n    const onMouseOver = () => {\n      if (scrollHostRef.current) {\n        if (hasScrollVertical(scrollHostRef.current) && !showVerticalScroll) {\n          setShowVerticalScroll(true);\n        }\n\n        if (\n          hasScrollHorizontal(scrollHostRef.current) &&\n          !showHorizontalScroll\n        ) {\n          setShowHorizontalScroll(true);\n        }\n      }\n    };\n\n    const onMouseOut = () => {\n      if (showHorizontalScroll && !isHorizontalDragging) {\n        setShowHorizontalScroll(false);\n      }\n\n      if (showVerticalScroll && !isVerticalDragging) {\n        setShowVerticalScroll(false);\n      }\n    };\n\n    const onVerticalScrollMouseDown: React.MouseEventHandler<HTMLDivElement> = (\n      e\n    ) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      setLastVerticalPos(e.clientY);\n      setIsVerticalDragging(true);\n    };\n\n    const onHorizontalScrollMouseDown: React.MouseEventHandler<HTMLDivElement> = (\n      e\n    ) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      setLastHorizontalPos(e.clientX);\n      setIsHorizontalDragging(true);\n    };\n\n    const onHostScroll = () => {\n      if (scrollHostRef.current) {\n        const {\n          scrollTop,\n          scrollHeight,\n          scrollLeft,\n          scrollWidth,\n          offsetHeight,\n          offsetWidth\n        } = scrollHostRef.current;\n\n        let newTop = (scrollTop / scrollHeight) * offsetHeight;\n        newTop = Math.min(newTop, offsetHeight - verticalScrollHeight);\n\n        let newLeft = (scrollLeft / scrollWidth) * offsetWidth;\n        newLeft = Math.min(newLeft, offsetWidth - horizontalScrollLeft);\n\n        if (newTop !== verticalScrollTop) {\n          setVerticalScrollTop(newTop);\n        }\n\n        if (newLeft !== horizontalScrollLeft) {\n          setHorizontalScrollLeft(newLeft);\n        }\n\n        if (onScroll) {\n          onScroll({\n            verticalScroll: newTop,\n            horizontalScroll: newLeft,\n            host: scrollHostRef.current\n          });\n        }\n      }\n    };\n\n    return (\n      <div\n        className={`${classes.root} ${\n          hasHorizontalScroll ? classes.withHorizontalScroll : ''\n        } ${className || ''}`}\n        onMouseOver={onMouseOver}\n        onTouchStart={onMouseOver}\n        onMouseOut={onMouseOut}\n        onTouchEnd={onMouseOut}\n      >\n        <div\n          className={`${classes.container} ${containerClassName || ''}`}\n          ref={scrollHostRef}\n          onScroll={onHostScroll}\n        >\n          {children}\n        </div>\n\n        <div\n          className={classes.vScrollBar}\n          style={{ opacity: showVerticalScroll ? 1 : 0 }}\n        >\n          <div\n            className={classes.vScrollThumb}\n            style={{ height: verticalScrollHeight, top: verticalScrollTop }}\n            onMouseDown={onVerticalScrollMouseDown}\n          />\n        </div>\n\n        <div\n          className={classes.hScrollBar}\n          style={{ opacity: showHorizontalScroll ? 1 : 0 }}\n        >\n          <div\n            className={classes.hScrollThumb}\n            style={{ width: horizontalScrollWidth, left: horizontalScrollLeft }}\n            onMouseDown={onHorizontalScrollMouseDown}\n          />\n        </div>\n      </div>\n    );\n  }\n);\n","import * as React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { SelectProps } from '@material-ui/core';\nimport { SFTextField } from '../SFTextField/SFTextField';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { SFMenuItem } from '../SFMenuItem/SFMenuItem';\n\nconst StyledSelect = withStyles(() => ({\n  root: {\n    '& svg': {\n      position: 'absolute',\n      right: 18,\n      pointerEvents: 'none',\n      top: 'auto'\n    }\n  }\n}))(SFTextField);\n\nexport interface SFMenuOption {\n  label: string;\n  value: string;\n}\n\nexport interface SFSelectProps extends SelectProps {\n  options: SFMenuOption[];\n  value?: string;\n  helperText?: React.ReactNode;\n}\n\nexport const SFSelect = ({\n  options,\n  helperText,\n  label,\n  value,\n  ...props\n}: SFSelectProps): React.ReactElement<SFSelectProps> => {\n  return (\n    <StyledSelect\n      select\n      fullWidth\n      label={label}\n      helperText={helperText}\n      error={props.error}\n      value={value}\n      disabled={props.disabled}\n      SelectProps={{\n        ...props,\n        IconComponent: (props): React.ReactElement => (\n          <SFIcon icon='Down-2' size='16' {...props} />\n        ),\n        MenuProps: {\n          variant: 'menu',\n          autoFocus: false,\n          disableAutoFocusItem: true\n        }\n      }}\n    >\n      {options.map((option: SFMenuOption, index: number) => (\n        <SFMenuItem key={`option-${index}`} value={option.value}>\n          {option.label}\n        </SFMenuItem>\n      ))}\n    </StyledSelect>\n  );\n};\n","import React from 'react';\nimport { Skeleton, SkeletonProps } from '@material-ui/lab';\n\nexport interface SFSkeletonProps extends SkeletonProps {}\n\nexport const SFSkeleton = (props: SFSkeletonProps) => {\n  return <Skeleton {...props} />;\n};\n","import * as React from 'react';\nimport { makeStyles, withStyles, Theme } from '@material-ui/core/styles';\nimport {\n  ButtonGroup,\n  Popper,\n  ClickAwayListener,\n  MenuList\n} from '@material-ui/core';\nimport { SFButton } from '../SFButton/SFButton';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { SFGrey, SFBlue, SFTextWhite } from '../../SFColors/SFColors';\nimport { SFPaper } from '../SFPaper/SFPaper';\nimport { SFMenuItem } from '../SFMenuItem/SFMenuItem';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  paper: {\n    borderRadius: 2\n  },\n  iconButton: {\n    '& svg': {\n      '& path': {\n        fill: (props: Partial<SFSplitButtonProps>): string => {\n          const isLight: boolean = theme.palette.type === 'light';\n          if (props.sfColor === 'grey') {\n            return `${isLight ? SFGrey[900] : SFGrey[50]} !important`;\n          } else {\n            if (props.variant === 'outlined') {\n              return `${isLight ? SFBlue[500] : SFBlue[200]} !important`;\n            }\n            return `${isLight ? SFTextWhite : SFGrey[900]} !important`;\n          }\n        }\n      }\n    },\n    '&:hover': {\n      '& svg': {\n        '& path': {\n          fill: (props: Partial<SFSplitButtonProps>): string => {\n            const isLight: boolean = theme.palette.type === 'light';\n            if (props.variant === 'outlined' && props.sfColor === 'blue') {\n              return `${isLight ? SFBlue[700] : SFBlue[300]} !important`;\n            }\n            return 'auto';\n          }\n        }\n      }\n    },\n    '&:active': {\n      '& svg': {\n        '& path': {\n          fill: (props: Partial<SFSplitButtonProps>): string => {\n            const isLight: boolean = theme.palette.type === 'light';\n            if (props.variant === 'outlined' && props.sfColor === 'blue') {\n              return `${isLight ? SFBlue[800] : SFBlue[400]} !important`;\n            }\n            return 'auto';\n          }\n        }\n      }\n    }\n  }\n}));\n\nconst StyledButtonGroup = withStyles((theme: Theme) => ({\n  root: {\n    boxShadow: 'none'\n  },\n  grouped: {\n    '&:last-child': {\n      padding: '0 !important'\n    }\n  },\n  groupedContainedHorizontal: {\n    '&:first-child': {\n      borderRight: `1px solid ${theme.palette.background.default}`\n    }\n  }\n}))(ButtonGroup);\n\nexport interface SFSplitButtonOption {\n  label: string;\n  disabled?: boolean;\n  onClick: () => void;\n}\n\nexport interface SFSplitButtonProps {\n  options: SFSplitButtonOption[];\n  defaultSelected?: number;\n  variant: 'outlined' | 'contained';\n  sfColor: 'blue' | 'grey';\n  size?: 'medium' | 'large';\n}\n\nexport const SFSplitButton = ({\n  options,\n  defaultSelected = 0,\n  variant = 'contained',\n  sfColor = 'blue',\n  size = 'medium'\n}: SFSplitButtonProps): React.ReactElement<SFSplitButtonProps> => {\n  const classes = useStyles({ variant, sfColor });\n\n  const [isMenuOpen, setIsMenuOpen] = React.useState<boolean>(false);\n  const [selectedItemIndex, setSelectedItemIndex] = React.useState<number>(\n    defaultSelected\n  );\n  const refMenu = React.useRef<HTMLDivElement>(null);\n\n  const onMenuItemClick = (index: number): void => {\n    setSelectedItemIndex(index);\n    setIsMenuOpen(false);\n  };\n\n  const onToggleMenu = (): void => {\n    setIsMenuOpen((prevOpen) => !prevOpen);\n  };\n\n  const onClickAway = (event: React.MouseEvent<Document, MouseEvent>): void => {\n    if (\n      refMenu.current &&\n      refMenu.current.contains(event.target as HTMLElement)\n    ) {\n      return;\n    }\n\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <div>\n      <StyledButtonGroup ref={refMenu} variant={variant} size='medium'>\n        <SFButton\n          sfColor={sfColor}\n          size={size}\n          onClick={options[selectedItemIndex].onClick}\n        >\n          {options[selectedItemIndex].label}\n        </SFButton>\n\n        <SFButton\n          sfColor={sfColor}\n          className={classes.iconButton}\n          size={size}\n          aria-controls={isMenuOpen ? 'split-button-menu' : undefined}\n          aria-expanded={isMenuOpen ? 'true' : undefined}\n          aria-haspopup='menu'\n          onClick={onToggleMenu}\n        >\n          <SFIcon icon='Down-2' size={13} />\n        </SFButton>\n      </StyledButtonGroup>\n\n      <Popper\n        style={{ zIndex: 1 }}\n        open={isMenuOpen}\n        anchorEl={refMenu.current}\n        placement='bottom-end'\n        disablePortal\n      >\n        <SFPaper className={classes.paper} elevation={8}>\n          <ClickAwayListener onClickAway={onClickAway}>\n            <MenuList id='split-button-menu'>\n              {options.map((option, index) => (\n                <SFMenuItem\n                  key={option.label}\n                  disabled={option.disabled}\n                  selected={index === selectedItemIndex}\n                  onClick={(): void => onMenuItemClick(index)}\n                >\n                  {option.label}\n                </SFMenuItem>\n              ))}\n            </MenuList>\n          </ClickAwayListener>\n        </SFPaper>\n      </Popper>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { withStyles, Theme } from '@material-ui/core/styles';\nimport Switch, { SwitchProps } from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport { SFSurfaceLight, SFSurfaceDark, SFGrey } from '../../SFColors/SFColors';\nimport { SFFormControlLabel } from '../SFFormControlLabel/SFFormControlLabel';\n\nconst StyledSwitch = withStyles((theme: Theme) => ({\n  root: {\n    display: 'flex',\n    width: 60,\n    height: 42,\n    padding: 11,\n\n    '& .MuiButtonBase-root': {\n      '& .MuiIconButton-label': {\n        '& .MuiSwitch-thumb': {\n          width: 12,\n          height: 12,\n          margin: '6px'\n        }\n      },\n\n      '&.Mui-checked': {\n        transform: 'translateX(17px)'\n      }\n    },\n\n    '& .MuiSwitch-track': {\n      height: '16px'\n    },\n\n    '&.MuiSwitch-sizeSmall': {\n      width: 49,\n      height: 34,\n      padding: 8,\n\n      '& .MuiButtonBase-root': {\n        '&.Mui-checked': {\n          transform: 'translateX(14px)'\n        },\n\n        '& .MuiIconButton-label': {\n          '& .MuiSwitch-thumb': {\n            width: 10,\n            height: 10,\n            margin: '8px'\n          }\n        }\n      },\n\n      '& .MuiSwitch-track': {\n        height: '14px'\n      },\n\n      '& + .MuiFormControlLabel-label': {\n        lineHeight: '20px'\n      }\n    }\n  },\n  switchBase: {\n    color: theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400],\n\n    '&:hover': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? `rgba(204, 204, 204, 0.3)`\n          : `rgba(128, 128, 128, 0.3)`\n    },\n\n    '&:active': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? `rgba(204, 204, 204, 0.5)`\n          : `rgba(128, 128, 128, 0.2)`\n    },\n\n    '&.Mui-checked': {\n      color: theme.palette.type === 'light' ? SFSurfaceLight : SFSurfaceDark,\n\n      '& + $track': {\n        opacity: 1,\n        backgroundColor: theme.palette.primary.main,\n        borderColor: theme.palette.primary.main\n      },\n\n      '&:hover': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? `rgba(204, 235, 255, 0.4)`\n            : `rgba(128, 198, 255, 0.2)`\n      },\n\n      '&:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? `rgba(204, 235, 255, 0.6)`\n            : `rgba(128, 198, 255, 0.1)`\n      }\n    },\n\n    '&.Mui-disabled': {\n      color: theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700],\n\n      '& + $track': {\n        opacity: 1,\n        backgroundColor: 'transparent',\n        borderColor: theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n      },\n\n      '&.Mui-checked': {\n        color: theme.palette.type === 'light' ? SFSurfaceLight : SFSurfaceDark,\n\n        '& + $track': {\n          backgroundColor:\n            theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700],\n          borderColor:\n            theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n        }\n      }\n    }\n  },\n  thumb: {\n    boxShadow: 'none'\n  },\n  track: {\n    border: `2px solid ${theme.palette.grey[600]}`,\n    borderRadius: 10,\n    opacity: 1,\n    backgroundColor:\n      theme.palette.type === 'light' ? SFSurfaceLight : SFSurfaceDark\n  }\n}))(Switch);\n\nexport interface SFSwitchProps extends SwitchProps {\n  label?: string;\n  sfColor?: 'primary' | 'default';\n}\n\nexport const SFSwitch = ({\n  sfColor = 'primary',\n  label,\n  size = 'medium',\n  ...props\n}: SFSwitchProps): React.ReactElement<SFSwitchProps> => {\n  return (\n    <FormControl>\n      <SFFormControlLabel\n        control={\n          <StyledSwitch\n            {...props}\n            color={sfColor}\n            disableRipple\n            disableTouchRipple\n            disableFocusRipple\n            size={size}\n          />\n        }\n        label={label}\n      />\n    </FormControl>\n  );\n};\n","import React, { forwardRef } from 'react';\nimport {\n  withStyles,\n  Theme,\n  makeStyles,\n  createStyles,\n  useTheme\n} from '@material-ui/core/styles';\nimport { Paper, CheckboxProps } from '@material-ui/core';\nimport MaterialTable, {\n  MTableBodyRow,\n  MaterialTableProps,\n  Column,\n  Options,\n  Icons\n} from 'material-table';\nimport { SFBlue, SFGrey } from '../../SFColors/SFColors';\nimport { SFIcon } from '../SFIcon/SFIcon';\nimport { hexToRgba } from '../../Helpers';\n\nconst StyledRow = withStyles((theme: Theme) => ({\n  root: {\n    '&:hover': {\n      backgroundColor:\n        theme.palette.type === 'light'\n          ? hexToRgba(SFGrey[200], 0.3)\n          : hexToRgba(SFGrey[500], 0.3)\n    }\n  }\n}))(MTableBodyRow);\n\nconst StyledContainer = withStyles({\n  root: {\n    padding: '24px 24px 34px 24px',\n    width: 'auto',\n    '& th:not(.MuiTableCell-paddingNone)': {\n      padding: 20\n    }\n  }\n})(Paper);\n\nconst useSelectionStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`\n    },\n    colorSecondary: {\n      '&.Mui-checked': {\n        color: `${theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]}`\n      },\n      '&:hover': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey[200], 0.3)\n            : hexToRgba(SFGrey[500], 0.3)\n      },\n      '&:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFGrey[200], 0.5)\n            : hexToRgba(SFGrey[500], 0.2)\n      },\n      '&.Mui-checked:hover': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFBlue[100], 0.4)\n            : hexToRgba(SFBlue[200], 0.2)\n      },\n      '&.Mui-checked:active': {\n        backgroundColor:\n          theme.palette.type === 'light'\n            ? hexToRgba(SFBlue[100], 0.6)\n            : hexToRgba(SFBlue[200], 0.1)\n      },\n      '&.Mui-disabled': {\n        color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n      }\n    }\n  })\n);\n\nconst iconSize = 16;\n\nconst tableIcons: Icons = {\n  Add: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Add' {...props} {...ref} size={iconSize} />\n  )),\n  Check: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Check-2' {...props} {...ref} size={iconSize} />\n  )),\n  Clear: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Close' {...props} {...ref} size={iconSize} />\n  )),\n  Delete: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Trash' {...props} {...ref} size={iconSize} />\n  )),\n  Edit: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Pencil' {...props} {...ref} size={iconSize} />\n  )),\n  Export: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Download' {...props} {...ref} size={iconSize} />\n  )),\n  Filter: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Filter' {...props} {...ref} size={iconSize} />\n  )),\n  FirstPage: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Left-3' {...props} {...ref} size={iconSize} />\n  )),\n  LastPage: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Right-3' {...props} {...ref} size={iconSize} />\n  )),\n  NextPage: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Right-2' {...props} {...ref} size={iconSize} />\n  )),\n  PreviousPage: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Left-2' {...props} {...ref} size={iconSize} />\n  )),\n  ResetSearch: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Close' {...props} {...ref} size={iconSize} />\n  )),\n  Search: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Search' {...props} {...ref} size={iconSize} />\n  )),\n  SortArrow: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Up-7' {...props} {...ref} size={iconSize} />\n  )),\n  ThirdStateCheck: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Remove' {...props} {...ref} size={iconSize} />\n  )),\n  ViewColumn: forwardRef((props, ref: React.Ref<SVGSVGElement>) => (\n    <SFIcon icon='Eye' {...props} {...ref} size={iconSize} />\n  ))\n};\n\ninterface RowTableData {\n  id: number;\n  checked: boolean;\n}\n\nexport type RowData = {\n  [key: string]: number | string | boolean | undefined;\n} & { tableData?: RowTableData };\n\nexport interface SFTableColumn extends Column<RowData> {}\nexport interface SFTableOptions extends Options<RowData> {}\nexport interface SFTableProps extends MaterialTableProps<RowData> {\n  columns: SFTableColumn[];\n  options: SFTableOptions;\n}\n\nexport const SFTable = ({\n  columns,\n  options,\n  ...props\n}: SFTableProps): React.ReactElement<SFTableProps> => {\n  const theme = useTheme();\n\n  const iconCheckedColor: string = theme.palette.primary.main;\n  const iconUncheckedColor: string =\n    theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400];\n\n  const selectionProps: CheckboxProps = {\n    classes: useSelectionStyles(props),\n    checkedIcon: (\n      <SFIcon icon='Checkbox-Selected' size={18} color={iconCheckedColor} />\n    ),\n    icon: (\n      <SFIcon icon='Checkbox-Unselected' size={18} color={iconUncheckedColor} />\n    )\n  };\n\n  const customColumns: SFTableColumn[] = columns.map(\n    (column: SFTableColumn) => {\n      return {\n        ...column,\n        cellStyle: {\n          padding: 20,\n          borderBottom: `1px solid  ${\n            theme.palette.type === 'light' ? SFGrey[100] : SFGrey[700]\n          }`,\n          color: `${theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]}`,\n          fontWeight: 400,\n          fontSize: 14\n        }\n      };\n    }\n  );\n\n  const customOptions: SFTableOptions = {\n    ...options,\n    headerStyle: {\n      borderBottom: `2px solid  ${\n        theme.palette.type === 'light' ? SFGrey[100] : SFGrey[700]\n      }`,\n      fontWeight: 500,\n      color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`,\n      fontSize: 14\n    },\n    rowStyle: (rowData: RowData): React.CSSProperties => {\n      if (rowData?.tableData?.checked) {\n        return {\n          backgroundColor:\n            theme.palette.type === 'light'\n              ? hexToRgba(SFGrey[200], 0.5)\n              : hexToRgba(SFGrey[500], 0.2)\n        };\n      }\n      return {};\n    },\n    selectionProps: {\n      ...selectionProps\n    },\n    headerSelectionProps: {\n      indeterminate: false,\n      ...selectionProps\n    }\n  };\n\n  return (\n    <MaterialTable\n      {...props}\n      icons={tableIcons}\n      columns={customColumns}\n      options={customOptions}\n      components={{\n        // eslint-disable-next-line\n        Container: (props: any): JSX.Element => (\n          <StyledContainer {...props} elevation={2} />\n        ),\n        // eslint-disable-next-line\n        Row: (props: any): JSX.Element => <StyledRow {...props} />\n      }}\n    />\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Theme, withStyles } from '@material-ui/core/styles';\nimport MomentUtils from '@date-io/moment';\nimport moment from 'moment';\n\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardTimePickerProps\n} from '@material-ui/pickers';\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\nimport { SFBlue, SFGrey, SFRed } from '../../SFColors/SFColors';\n\nfunction getDateFromString(value: string): MaterialUiPickersDate | null {\n  const date = moment(value);\n  return date.isValid() ? date : null;\n}\n\nconst StyledTimePicker = withStyles((theme: Theme) => ({\n  root: {\n    boxSizing: 'border-box',\n\n    '& .MuiFilledInput-root': {\n      height: '56px',\n      backgroundColor: theme.palette.background.paper,\n      border: `1px solid ${\n        theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n      }`,\n      borderRadius: 2,\n      boxSizing: 'border-box',\n\n      '&:before': {\n        content: `none !important`\n      },\n\n      '&:after': {\n        content: `none !important`\n      },\n\n      '&:hover': {\n        borderColor: `${\n          theme.palette.type === 'light' ? SFGrey[900] : SFGrey[50]\n        }`\n      },\n\n      '&.Mui-focused': {\n        border: `2px solid ${\n          theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n        }`,\n\n        '& .MuiFilledInput-input': {\n          padding: '26px 10px 7px'\n        }\n      },\n\n      '&.Mui-error': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFRed[700] : SFRed[200]\n        } !important`,\n\n        '& .MuiFilledInput-input': {\n          padding: '26px 11px 7px !important'\n        }\n      },\n\n      '&.Mui-disabled': {\n        border: `1px solid ${\n          theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]\n        }`\n      },\n\n      '& .MuiFilledInput-input': {\n        fontWeight: 400,\n        fontSize: '16px',\n        padding: '26px 11px 7px',\n\n        '&.Mui-disabled': {\n          color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n        }\n      }\n    },\n\n    '& .MuiInputLabel-filled': {\n      fontSize: '16px',\n      lineHeight: '24px',\n      color: `${theme.palette.type === 'light' ? SFGrey[600] : SFGrey[400]}`,\n\n      '&.MuiInputLabel-shrink': {\n        fontSize: '14px',\n        lineHeight: '20px',\n        transform: `translate(12px, 6px)`\n      },\n\n      '&.Mui-focused': {\n        color: theme.palette.type === 'light' ? SFBlue[500] : SFBlue[200]\n      },\n\n      '&.Mui-error': {\n        color: `${theme.palette.type === 'light' ? SFRed[700] : SFRed[200]}`\n      },\n\n      '&.Mui-disabled': {\n        color: `${theme.palette.type === 'light' ? SFGrey[200] : SFGrey[700]}`\n      }\n    },\n\n    '& .MuiFormHelperText-root': {\n      backgroundColor: 'transparent',\n\n      '&.Mui-error': {\n        color: `${theme.palette.type === 'light' ? SFRed[700] : SFRed[200]}`\n      }\n    }\n  }\n}))(KeyboardTimePicker);\n\nexport interface SFTimeFieldProps\n  extends Omit<KeyboardTimePickerProps, 'value' | 'onChange'> {\n  value: string;\n  onChange: (value: string) => void;\n}\n\nexport const SFTimeField = ({\n  value,\n  onChange,\n  placeholder = '08:00 AM',\n  ...props\n}: SFTimeFieldProps): React.ReactElement<SFTimeFieldProps> => {\n  const [date, setDate] = useState<MaterialUiPickersDate | null>(\n    getDateFromString(value)\n  );\n\n  useEffect(() => {\n    setDate(getDateFromString(value));\n  }, [value]);\n\n  const onDateChange = (date: MaterialUiPickersDate): void => {\n    setDate(date);\n\n    if (date && date.isValid()) {\n      onChange(date.toISOString());\n    }\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <StyledTimePicker\n        {...props}\n        fullWidth\n        variant='inline'\n        inputVariant='filled'\n        disableToolbar\n        mask='__:__ _M'\n        value={date}\n        onChange={onDateChange}\n        keyboardIcon={null}\n      />\n    </MuiPickersUtilsProvider>\n  );\n};\n","import { SFThemeOptions } from './SFTheme';\n\nconst CommonThemeOptions: SFThemeOptions = {\n  props: {\n    MuiButtonBase: {\n      disableRipple: true\n    },\n    MuiDrawer: {\n      elevation: 24\n    }\n  },\n  shape: {\n    borderRadius: 2\n  },\n  overrides: {\n    MuiFormControlLabel: {\n      root: {\n        marginRight: 0\n      }\n    },\n    MuiIconButton: {\n      colorPrimary: {\n        '&:hover': {\n          borderRadius: '50%'\n        },\n        '&:active': {\n          borderRadius: '50%'\n        }\n      }\n    },\n    MuiButton: {\n      root: {\n        padding: '4px 10px',\n        height: '30px',\n        boxSizing: 'border-box'\n      },\n      label: {\n        textTransform: 'none'\n      }\n    },\n    MuiPaper: {\n      elevation1: {\n        boxShadow:\n          '0px 2px 1px -1px rgba(0,0,0,0.02), 0px 1px 1px rgba(0,0,0,0.14), 0px 1px 3px rgba(0,0,0,0.12)'\n      },\n      elevation2: {\n        boxShadow:\n          '0px 3px 1px -2px rgba(0, 0, 0, 0.02), 0px 2px 2px rgba(0, 0, 0, 0.14), 0px 1px 5px rgba(0, 0, 0, 0.12)'\n      },\n      elevation3: {\n        boxShadow:\n          '0px 3px 3px -2px rgba(0, 0, 0, 0.02), 0px 3px 4px rgba(0, 0, 0, 0.14), 0px 1px 8px rgba(0, 0, 0, 0.12)'\n      },\n      elevation4: {\n        boxShadow:\n          '0px 2px 4px -1px rgba(0, 0, 0, 0.02), 0px 4px 5px rgba(0, 0, 0, 0.14), 0px 1px 10px rgba(0, 0, 0, 0.12)'\n      },\n      elevation6: {\n        boxShadow:\n          '0px 3px 5px -1px rgba(0, 0, 0, 0.02), 0px 6px 10px rgba(0, 0, 0, 0.14), 0px 1px 18px rgba(0, 0, 0, 0.12)'\n      },\n      elevation8: {\n        boxShadow:\n          '0px 5px 5px -3px rgba(0, 0, 0, 0.02), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12)'\n      },\n      elevation9: {\n        boxShadow:\n          '0px 5px 6px -3px rgba(0, 0, 0, 0.02), 0px 9px 12px 1px rgba(0, 0, 0, 0.14), 0px 3px 16px 2px rgba(0, 0, 0, 0.12)'\n      },\n      elevation12: {\n        boxShadow:\n          '0px 7px 8px -4px rgba(0, 0, 0, 0.02), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12)'\n      },\n      elevation16: {\n        boxShadow:\n          '0px 8px 10px -5px rgba(0, 0, 0, 0.02), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12)'\n      },\n      elevation24: {\n        boxShadow:\n          '0px 11px 15px -7px rgba(0, 0, 0, 0.02), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12)'\n      }\n    }\n  }\n};\n\nexport { CommonThemeOptions };\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { CommonThemeOptions } from './CommonThemeOptions';\n\nimport {\n  SFGrey,\n  SFBlue,\n  SFBlueMainDark,\n  SFRedMainDark,\n  SFBackgroundDark,\n  SFSurfaceDark,\n  SFTextWhite\n} from '../SFColors/SFColors';\n\nCommonThemeOptions.palette = {\n  type: 'dark',\n  text: {\n    primary: SFTextWhite\n  },\n  primary: {\n    main: SFBlueMainDark\n  },\n  secondary: {\n    main: SFRedMainDark\n  },\n  background: {\n    default: SFBackgroundDark,\n    paper: SFSurfaceDark\n  },\n  grey: SFGrey,\n  // TODO - action prop is work in progress\n  action: {\n    active: SFGrey[500],\n    activatedOpacity: 0.3,\n    hover: SFBlue[200],\n    hoverOpacity: 0.3,\n    selected: SFBlue[200],\n    selectedOpacity: 0.1,\n    disabled: SFGrey[600],\n    disabledBackground: SFGrey[800],\n    disabledOpacity: 0.38,\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12\n  }\n};\n\nconst NightTheme = createMuiTheme(CommonThemeOptions);\n\nexport { NightTheme };\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { CommonThemeOptions } from './CommonThemeOptions';\nimport {\n  SFGrey,\n  SFBlue,\n  SFBlueMainLight,\n  SFRedMainLight,\n  SFBackgroundLight,\n  SFSurfaceLight,\n  SFTextBlack\n} from '../SFColors/SFColors';\n\nCommonThemeOptions.palette = {\n  type: 'light',\n  text: {\n    primary: SFTextBlack\n  },\n  primary: {\n    main: SFBlueMainLight\n  },\n  secondary: {\n    main: SFRedMainLight\n  },\n  background: {\n    default: SFBackgroundLight,\n    paper: SFSurfaceLight\n  },\n  grey: SFGrey,\n  // TODO - action prop is work in progress\n  action: {\n    active: SFGrey[200],\n    activatedOpacity: 0.3,\n    hover: SFBlue[100],\n    hoverOpacity: 0.04,\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    disabledOpacity: 0.38,\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12\n  }\n};\n\nconst DayTheme = createMuiTheme(CommonThemeOptions);\n\nexport { DayTheme };\n","/**\n * Hypertext Transfer Protocol (HTTP) response status codes.\n * @see {@link https://datatracker.ietf.org/doc/html/rfc7231#section-6}\n */\n\nexport enum HttpStatusCode {\n  /**\n   * The server has received the request headers and the client should proceed to send the request body\n   * (in the case of a request for which a body needs to be sent; for example, a POST request).\n   * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\n   * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\n   * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\n   */\n  CONTINUE = 100,\n\n  /**\n   * The requester has asked the server to switch protocols and the server has agreed to do so.\n   */\n  SWITCHING_PROTOCOLS = 101,\n\n  /**\n   * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\n   * This code indicates that the server has received and is processing the request, but no response is available yet.\n   * This prevents the client from timing out and assuming the request was lost.\n   */\n  PROCESSING = 102,\n\n  /**\n   * Standard response for successful HTTP requests.\n   * The actual response will depend on the request method used.\n   * In a GET request, the response will contain an entity corresponding to the requested resource.\n   * In a POST request, the response will contain an entity describing or containing the result of the action.\n   */\n  OK = 200,\n\n  /**\n   * The request has been fulfilled, resulting in the creation of a new resource.\n   */\n  CREATED = 201,\n\n  /**\n   * The request has been accepted for processing, but the processing has not been completed.\n   * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\n   */\n  ACCEPTED = 202,\n\n  /**\n   * SINCE HTTP/1.1\n   * The server is a transforming proxy that received a 200 OK from its origin,\n   * but is returning a modified version of the origin's response.\n   */\n  NON_AUTHORITATIVE_INFORMATION = 203,\n\n  /**\n   * The server successfully processed the request and is not returning any content.\n   */\n  NO_CONTENT = 204,\n\n  /**\n   * The server successfully processed the request, but is not returning any content.\n   * Unlike a 204 response, this response requires that the requester reset the document view.\n   */\n  RESET_CONTENT = 205,\n\n  /**\n   * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\n   * The range header is used by HTTP clients to enable resuming of interrupted downloads,\n   * or split a download into multiple simultaneous streams.\n   */\n  PARTIAL_CONTENT = 206,\n\n  /**\n   * The message body that follows is an XML message and can contain a number of separate response codes,\n   * depending on how many sub-requests were made.\n   */\n  MULTI_STATUS = 207,\n\n  /**\n   * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\n   * and are not being included again.\n   */\n  ALREADY_REPORTED = 208,\n\n  /**\n   * The server has fulfilled a request for the resource,\n   * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n   */\n  IM_USED = 226,\n\n  /**\n   * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\n   * For example, this code could be used to present multiple video format options,\n   * to list files with different filename extensions, or to suggest word-sense disambiguation.\n   */\n  MULTIPLE_CHOICES = 300,\n\n  /**\n   * This and all future requests should be directed to the given URI.\n   */\n  MOVED_PERMANENTLY = 301,\n\n  /**\n   * This is an example of industry practice contradicting the standard.\n   * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\n   * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\n   * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\n   * to distinguish between the two behaviours. However, some Web applications and frameworks\n   * use the 302 status code as if it were the 303.\n   */\n  FOUND = 302,\n\n  /**\n   * SINCE HTTP/1.1\n   * The response to the request can be found under another URI using a GET method.\n   * When received in response to a POST (or PUT/DELETE), the client should presume that\n   * the server has received the data and should issue a redirect with a separate GET message.\n   */\n  SEE_OTHER = 303,\n\n  /**\n   * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\n   * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\n   */\n  NOT_MODIFIED = 304,\n\n  /**\n   * SINCE HTTP/1.1\n   * The requested resource is available only through a proxy, the address for which is provided in the response.\n   * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\n   */\n  USE_PROXY = 305,\n\n  /**\n   * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\n   */\n  SWITCH_PROXY = 306,\n\n  /**\n   * SINCE HTTP/1.1\n   * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\n   * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\n   * For example, a POST request should be repeated using another POST request.\n   */\n  TEMPORARY_REDIRECT = 307,\n\n  /**\n   * The request and all future requests should be repeated using another URI.\n   * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\n   * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\n   */\n  PERMANENT_REDIRECT = 308,\n\n  /**\n   * The server cannot or will not process the request due to an apparent client error\n   * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\n   */\n  BAD_REQUEST = 400,\n\n  /**\n   * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\n   * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\n   * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\n   * \"unauthenticated\",i.e. the user does not have the necessary credentials.\n   */\n  UNAUTHORIZED = 401,\n\n  /**\n   * Reserved for future use. The original intention was that this code might be used as part of some form of digital\n   * cash or micro payment scheme, but that has not happened, and this code is not usually used.\n   * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\n   */\n  PAYMENT_REQUIRED = 402,\n\n  /**\n   * The request was valid, but the server is refusing action.\n   * The user might not have the necessary permissions for a resource.\n   */\n  FORBIDDEN = 403,\n\n  /**\n   * The requested resource could not be found but may be available in the future.\n   * Subsequent requests by the client are permissible.\n   */\n  NOT_FOUND = 404,\n\n  /**\n   * A request method is not supported for the requested resource;\n   * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\n   */\n  METHOD_NOT_ALLOWED = 405,\n\n  /**\n   * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\n   */\n  NOT_ACCEPTABLE = 406,\n\n  /**\n   * The client must first authenticate itself with the proxy.\n   */\n  PROXY_AUTHENTICATION_REQUIRED = 407,\n\n  /**\n   * The server timed out waiting for the request.\n   * According to HTTP specifications:\n   * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\n   */\n  REQUEST_TIMEOUT = 408,\n\n  /**\n   * Indicates that the request could not be processed because of conflict in the request,\n   * such as an edit conflict between multiple simultaneous updates.\n   */\n  CONFLICT = 409,\n\n  /**\n   * Indicates that the resource requested is no longer available and will not be available again.\n   * This should be used when a resource has been intentionally removed and the resource should be purged.\n   * Upon receiving a 410 status code, the client should not request the resource in the future.\n   * Clients such as search engines should remove the resource from their indices.\n   * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\n   */\n  GONE = 410,\n\n  /**\n   * The request did not specify the length of its content, which is required by the requested resource.\n   */\n  LENGTH_REQUIRED = 411,\n\n  /**\n   * The server does not meet one of the preconditions that the requester put on the request.\n   */\n  PRECONDITION_FAILED = 412,\n\n  /**\n   * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\n   */\n  PAYLOAD_TOO_LARGE = 413,\n\n  /**\n   * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\n   * in which case it should be converted to a POST request.\n   * Called \"Request-URI Too Long\" previously.\n   */\n  URI_TOO_LONG = 414,\n\n  /**\n   * The request entity has a media type which the server or resource does not support.\n   * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\n   */\n  UNSUPPORTED_MEDIA_TYPE = 415,\n\n  /**\n   * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\n   * For example, if the client asked for a part of the file that lies beyond the end of the file.\n   * Called \"Requested Range Not Satisfiable\" previously.\n   */\n  RANGE_NOT_SATISFIABLE = 416,\n\n  /**\n   * The server cannot meet the requirements of the Expect request-header field.\n   */\n  EXPECTATION_FAILED = 417,\n\n  /**\n   * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\n   */\n  MISDIRECTED_REQUEST = 421,\n\n  /**\n   * The request was well-formed but was unable to be followed due to semantic errors.\n   */\n  UNPROCESSABLE_ENTITY = 422,\n\n  /**\n   * The resource that is being accessed is locked.\n   */\n  LOCKED = 423,\n\n  /**\n   * The request failed due to failure of a previous request (e.g., a PROPPATCH).\n   */\n  FAILED_DEPENDENCY = 424,\n\n  TOO_EARLY = 425,\n\n  /**\n   * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\n   */\n  UPGRADE_REQUIRED = 426,\n\n  /**\n   * The origin server requires the request to be conditional.\n   * Intended to prevent \"the 'lost update' problem, where a client\n   * GETs a resource's state, modifies it, and PUTs it back to the server,\n   * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\n   */\n  PRECONDITION_REQUIRED = 428,\n\n  /**\n   * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\n   */\n  TOO_MANY_REQUESTS = 429,\n\n  /**\n   * The server is unwilling to process the request because either an individual header field,\n   * or all the header fields collectively, are too large.\n   */\n  REQUEST_HEADER_FIELDS_TOO_LARGE = 431,\n\n  /**\n   * A server operator has received a legal demand to deny access to a resource or to a set of resources\n   * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\n   */\n  UNAVAILABLE_FOR_LEGAL_REASONS = 451,\n\n  /**\n   * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n   */\n  INTERNAL_SERVER_ERROR = 500,\n\n  /**\n   * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\n   * Usually this implies future availability (e.g., a new feature of a web-service API).\n   */\n  NOT_IMPLEMENTED = 501,\n\n  /**\n   * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\n   */\n  BAD_GATEWAY = 502,\n\n  /**\n   * The server is currently unavailable (because it is overloaded or down for maintenance).\n   * Generally, this is a temporary state.\n   */\n  SERVICE_UNAVAILABLE = 503,\n\n  /**\n   * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\n   */\n  GATEWAY_TIMEOUT = 504,\n\n  /**\n   * The server does not support the HTTP protocol version used in the request\n   */\n  HTTP_VERSION_NOT_SUPPORTED = 505,\n\n  /**\n   * Transparent content negotiation for the request results in a circular reference.\n   */\n  VARIANT_ALSO_NEGOTIATES = 506,\n\n  /**\n   * The server is unable to store the representation needed to complete the request.\n   */\n  INSUFFICIENT_STORAGE = 507,\n\n  /**\n   * The server detected an infinite loop while processing the request.\n   */\n  LOOP_DETECTED = 508,\n\n  /**\n   * Further extensions to the request are required for the server to fulfill it.\n   */\n  NOT_EXTENDED = 510,\n\n  /**\n   * The client needs to authenticate to gain network access.\n   * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\n   * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\n   */\n  NETWORK_AUTHENTICATION_REQUIRED = 511\n}\n","export enum SFMedia {\n  XS_WIDTH = 375,\n  XS_HEIGHT = 667,\n\n  SM_WIDTH = 768,\n  SM_HEIGHT = 1024,\n\n  MD_WIDTH = 1024,\n  MD_HEIGHT = 768,\n\n  LG_WIDTH = 1280,\n  LG_HEIGHT = 720,\n\n  XL_WIDTH = 1600,\n  XL_HEIGHT = 900,\n\n  XXL_WIDTH = 1920,\n  XXL_HEIGHT = 1080\n}\n","import {\n  Theme,\n  ThemeOptions,\n  ThemeProvider as SFThemeProvider\n} from '@material-ui/core/styles';\n\nimport { NightTheme } from './NightTheme';\nimport { DayTheme } from './DayTheme';\n\ninterface SFTheme extends Theme {}\ninterface SFThemeOptions extends ThemeOptions {}\n\nexport { SFThemeProvider, SFTheme, SFThemeOptions };\n\nexport type SFThemeType = 'day' | 'night';\n\nexport function createSFTheme(type: SFThemeType): SFTheme {\n  return type === 'day' ? DayTheme : NightTheme;\n}\n"],"sourceRoot":""}